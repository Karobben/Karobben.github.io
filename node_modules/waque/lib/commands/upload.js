"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const glob = tslib_1.__importStar(require("glob"));
const signale = tslib_1.__importStar(require("signale"));
const command_1 = require("@oclif/command");
const chokidar_1 = tslib_1.__importDefault(require("chokidar"));
const fs_1 = require("fs");
const lodash_1 = require("lodash");
const LarkClient_1 = tslib_1.__importDefault(require("../LarkClient"));
const Document_1 = tslib_1.__importDefault(require("../Document"));
const base_1 = tslib_1.__importDefault(require("../base"));
const path_1 = require("../path");
class Upload extends base_1.default {
    async run() {
        this.lark = new LarkClient_1.default(this.config, this.config.currentUser);
        this.pattern = this.config.lark.pattern;
        const args = lodash_1.compact(Object.values(this.args));
        if (args.length === 1) {
            this.pattern = args[0];
        }
        else if (args.length > 1) {
            this.pattern = `{${args.join(',')}}`;
        }
        let foundSummary;
        let foundLayout = glob.sync(this.config.lark.pattern).find((f) => this.isLayout(f));
        if (foundLayout) {
            signale.info('发现 layout.md');
        }
        const larkDocs = await this.lark.getDocs();
        const docs = await Promise.all(glob
            .sync(this.pattern, { ignore: this.config.lark.ignore })
            .filter((filename) => {
            if (this.isSummary(filename)) {
                signale.info(`发现 ${filename}`);
                foundSummary = filename;
                return false;
            }
            if (this.isLayout(filename)) {
                return false;
            }
            return true;
        })
            .map((filename) => {
            const doc = new Document_1.default(larkDocs, this.lark, this.config.lark, filename);
            return doc.createDoc(foundLayout);
        }));
        let hasError = false;
        await Promise.all(docs.map((doc) => {
            const result = doc.validate();
            if (!result.valid) {
                signale.error(`${doc.filename} ${result.messages.join('|')}`);
                hasError = true;
                return;
            }
            if (doc.id) {
                this.debug('Update yuque doc %s', doc.title);
                return this.lark
                    .updateDoc(doc.id, doc.dump())
                    .then(() => {
                    signale.success(`更新 ${doc.title}[${doc.slug}]`);
                })
                    .catch((error) => {
                    signale.error(`更新 ${doc.title}[${doc.slug}]`);
                    hasError = true;
                    this.log(error.response.data);
                });
            }
            else {
                this.debug('Create yuque doc %s', doc.title);
                return this.lark
                    .createDoc(doc.dump())
                    .then(() => {
                    signale.success(`创建 ${doc.title}[${doc.slug}]`);
                })
                    .catch((error) => {
                    signale.error(`创建 ${doc.title}[${doc.slug}]`);
                    hasError = true;
                    this.log(error.response.data);
                });
            }
        }));
        this.updateToc(foundSummary);
        if (this.flags.watch) {
            this.startWatch();
            signale.success('watch for changes...');
        }
        else {
            if (hasError) {
                this.exit(1);
            }
        }
    }
    updateToc(foundSummary) {
        const summaryFile = foundSummary || path_1.resolve(this.config.lark.summary);
        if (fs_1.existsSync(summaryFile)) {
            const summary = fs_1.readFileSync(summaryFile).toString();
            this.lark.updateRepo({ toc: summary });
            signale.success('更新目录');
        }
    }
    isSummary(filename) {
        return path_1.basename(filename).toLowerCase() === 'summary.md';
    }
    isLayout(filename) {
        return path_1.basename(filename).toLowerCase() === 'layout.md';
    }
    startWatch() {
        const watcher = chokidar_1.default.watch(this.pattern, {
            ignored: this.config.lark.ignore,
            ignoreInitial: true,
        });
        watcher
            .on('add', (path) => this.handleDoc(path))
            .on('change', (path) => this.handleDoc(path));
    }
    async handleDoc(filename) {
        if (this.isSummary(filename)) {
            this.updateToc(filename);
            return;
        }
        if (this.isLayout(filename)) {
            return;
        }
        const larkDocs = await this.lark.getDocs();
        const doc = new Document_1.default(larkDocs, this.lark, this.config.lark, filename);
        const foundLayout = glob.sync(this.config.lark.pattern).find((f) => this.isLayout(f));
        doc.createDoc(foundLayout);
        const result = doc.validate();
        if (!result.valid) {
            signale.error(`${doc.filename} ${result.messages.join('|')}`);
            return;
        }
        if (doc.id) {
            this.debug('Update yuque doc %s', doc.title);
            return this.lark
                .updateDoc(doc.id, doc.dump())
                .then(() => {
                signale.success(`更新 ${doc.title}[${doc.slug}]`);
            })
                .catch((error) => {
                signale.error(`更新 ${doc.title}[${doc.slug}]`);
                this.log(error.response.data);
            });
        }
        else {
            this.debug('Create yuque doc %s', doc.title);
            return this.lark
                .createDoc(doc.dump())
                .then(() => {
                signale.success(`创建 ${doc.title}[${doc.slug}]`);
            })
                .catch((error) => {
                signale.error(`创建 ${doc.title}[${doc.slug}]`);
                this.log(error.response.data);
            });
        }
    }
}
Upload.description = 'upload docs';
Upload.flags = Object.assign({}, base_1.default.flags, { watch: command_1.flags.boolean({
        char: 'w',
    }) });
Upload.args = lodash_1.times(1000, Number).map((i) => ({ name: `file${i}` }));
Upload.strict = false;
exports.default = Upload;
