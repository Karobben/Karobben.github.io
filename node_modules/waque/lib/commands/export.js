"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = require("fs");
const signale = tslib_1.__importStar(require("signale"));
const LarkClient_1 = tslib_1.__importDefault(require("../LarkClient"));
const base_1 = tslib_1.__importDefault(require("../base"));
const path_1 = require("../path");
function times(n, s) {
    return Array(n)
        .fill(s)
        .join('');
}
class Export extends base_1.default {
    async run() {
        const { args } = this.parse();
        const lark = new LarkClient_1.default(this.config, this.config.currentUser);
        const docs = await lark.getDocs();
        const dir = path_1.resolve(args.dir);
        docs.map(async (doc) => {
            const docDetail = await lark.getDoc(doc.id);
            const filename = docDetail.title.trim();
            const file = `${filename}.md`;
            let content = [];
            const url = docDetail.slug === filename ? null : docDetail.slug;
            const isPublic = docDetail.public === 1 ? null : docDetail.public;
            if (url || isPublic) {
                content.push('---');
                if (url) {
                    content.push(`url: ${url}`);
                }
                if (isPublic) {
                    content.push(`public: ${isPublic}`);
                }
                content.push('---\n');
            }
            content.push(`# ${docDetail.title.trim()}\n`);
            content.push(docDetail.body);
            fs_1.writeFileSync(path_1.join(dir, file.replace(/[\/ ]/g, '-')), content.join('\n'));
            signale.success(`Exported ${file}`);
        });
        const repo = await lark.getRepo();
        if (repo.toc) {
            const toc = await lark.getRepoToc();
            const content = toc.map((doc) => {
                return `${times(doc.depth - 1, '  ')}- [${doc.title}](${doc.slug})`;
            }).concat(['\n']).join('\n');
            fs_1.writeFileSync(path_1.join(dir, 'summary.md'), content);
            signale.success('Exported summary.md');
        }
    }
}
Export.description = 'export docs';
Export.flags = base_1.default.flags;
Export.args = [
    {
        name: 'dir',
        default: '.',
    },
];
exports.default = Export;
