"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const path_1 = require("./path");
require('axios-debug-log')({
    request(debug, config) {
        debug('Request ' + config.url);
    },
    response(debug, response) {
        debug('Response with ' + response.status, 'from ' + response.config.url);
    },
    error(debug, error) {
        debug('Boom', error);
    }
});
class LarkClient {
    static async login(user) {
        const { data } = await axios_1.default.post('/authorize', user);
        return data.data;
    }
    constructor(config, user) {
        this.config = config;
        this.user = user;
        const baseURL = 'https://www.yuque.com/api/v2';
        this.client = axios_1.default.create({
            baseURL,
            headers: {
                'X-Auth-Token': user.token
            },
        });
    }
    repoPath(path) {
        return path_1.join('/repos', this.config.lark.repo, path);
    }
    createDoc(doc) {
        return this.client.post(this.repoPath('docs'), doc);
    }
    updateDoc(id, doc) {
        return this.client.put(this.repoPath(`/docs/${id}`), doc);
    }
    async getDoc(id) {
        const { data } = await this.client.get(this.repoPath(`/docs/${id}?raw=1`));
        return data.data;
    }
    async getDocs() {
        const { data } = await this.client.get(this.repoPath('/docs'));
        return data.data;
    }
    updateRepo(repo) {
        this.client.put(this.repoPath('/'), repo);
    }
    async getRepo() {
        const { data } = await this.client.get(this.repoPath('/'));
        return data.data;
    }
    async getRepoToc() {
        const { data } = await this.client.get(this.repoPath('/toc'));
        return data.data;
    }
    async getRepos() {
        const { data } = await this.client.get(`/users/${this.user.id}/repos`);
        return data.data;
    }
    async getUser() {
        const { data } = await this.client.get('/user');
        return data.data;
    }
}
exports.default = LarkClient;
