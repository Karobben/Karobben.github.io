"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = require("fs");
const yamlFront = tslib_1.__importStar(require("yaml-front-matter"));
const nunjucks = tslib_1.__importStar(require("nunjucks"));
const path_1 = require("./path");
const ASSETS_BEGIN = '[comment]: <> (waque assets)';
const ASSETS_END = '[comment]: <> (waque assets end)';
class Document {
    constructor(larkDocs, lark, config, filename) {
        this.larkDocs = larkDocs;
        this.lark = lark;
        this.config = config;
        this.filename = filename;
        this.assets = [];
        this.raw = fs_1.readFileSync(path_1.resolve(this.filename)).toString();
    }
    async createDoc(layout) {
        // load config
        this.loadConfig();
        // set id
        const larkDoc = this.larkDocs.find((ld) => ld.slug === this.slug);
        if (larkDoc) {
            this.id = larkDoc.id;
        }
        // render template
        this.renderTemplate();
        let title = '';
        let body = [];
        let prevLine = '';
        const lines = this.rendered.split('\n');
        for (const line of lines) {
            if (!title) {
                if (line.startsWith('# ')) {
                    title = line.replace('# ', '');
                    continue;
                }
                if (line.startsWith('====')) {
                    title = prevLine;
                    body.shift();
                    continue;
                }
            }
            prevLine = line;
            body.push(line);
        }
        if (this.assets.length > 0) {
            body.push('');
            body.push(ASSETS_BEGIN);
            this.assets.forEach(asset => body.push(`[comment]: <> (${asset.hash}: ${asset.url})`));
            body.push(ASSETS_END);
        }
        body = body.join('\n').trim();
        this.title = title.trim();
        this.body = body;
        this.applyLayout(layout);
        if (this.config.promote) {
            this.body = this.body + this.signature();
        }
        return this;
    }
    signature() {
        return '\n\n---\n <sub>本文档由[瓦雀](https://www.yuque.com/waquehq)创建</sub>';
    }
    applyLayout(layout) {
        if (!layout) {
            return;
        }
        let variables = {
            slug: this.slug,
            title: this.title,
            content: this.body,
            public: this.public,
            filename: path_1.basename(this.filename),
            path: this.filename.replace(process.cwd(), ''),
        };
        let tags;
        if (this.config.template) {
            variables = Object.assign({}, variables, this.config.template.variables);
            tags = this.config.template.tags;
        }
        const env = nunjucks.configure({ tags });
        this.body = env.renderString(fs_1.readFileSync(path_1.resolve(layout)).toString(), variables);
    }
    getTemplate() {
        if (this.template === false) {
            return false;
        }
        if (this.template === true || this.config.template) {
            return {
                variables: this.config.template.variables || {},
                tags: this.config.template.tags
            };
        }
        return false;
    }
    renderTemplate() {
        const template = this.getTemplate();
        if (template) {
            const env = nunjucks.configure({ tags: template.tags });
            this.rendered = env.renderString(this.rendered, template.variables);
        }
    }
    loadConfig() {
        const config = yamlFront.loadFront(this.raw);
        this.slug =
            config.url ||
                path_1.basename(this.filename, '.md')
                    .toLowerCase()
                    .replace(/\s/g, '-');
        this.template = config.template;
        this.rendered = config.__content;
        this.public = config.public;
    }
    dump() {
        return {
            slug: this.slug,
            title: this.title,
            body: this.body,
            public: this.public
        };
    }
    validate() {
        const result = {
            valid: true,
            messages: [],
        };
        if (!this.title) {
            result.valid = false;
            result.messages.push('缺少文章标题');
        }
        if (!/\w+/.test(this.slug)) {
            result.valid = false;
            result.messages.push('文件名只能是字母、数字、_和-');
        }
        return result;
    }
}
exports.default = Document;
