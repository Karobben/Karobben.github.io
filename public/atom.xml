<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Karobben</title>
  
  <subtitle>Engjoy~</subtitle>
  <link href="https://karobben.github.io/atom.xml" rel="self"/>
  
  <link href="https://karobben.github.io/"/>
  <updated>2023-03-09T04:47:25.670Z</updated>
  <id>https://karobben.github.io/</id>
  
  <author>
    <name>Karobben</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Image skills for python</title>
    <link href="https://karobben.github.io/2023/03/07/Python/image/"/>
    <id>https://karobben.github.io/2023/03/07/Python/image/</id>
    <published>2023-03-08T02:25:35.000Z</published>
    <updated>2023-03-09T04:47:25.670Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Read-tiff-files">Read tiff files</h2><p><a href="https://biomedicalhub.github.io/python-data/skimage.html">skimage</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> skimage.io <span class="hljs-keyword">as</span> skio<br>imstack1    = skio.imread(<span class="hljs-string">&quot;FILENAME.TIF&quot;</span>, plugin=<span class="hljs-string">&quot;tifffile&quot;</span>)<br></code></pre></td></tr></table></figure></div><h2 id="Gaussian-Smoothing">Gaussian Smoothing</h2><p><a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.gaussian_filter.html">scipy</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scipy.ndimage <span class="hljs-keyword">import</span> gaussian_filter<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = np.arange(<span class="hljs-number">50</span>, step=<span class="hljs-number">2</span>).reshape((<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br>b = gaussian_filter(a, sigma=<span class="hljs-number">3</span>)<br><br>fig, axs = plt.subplots(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>axs[<span class="hljs-number">0</span>].imshow(a)<br>axs[<span class="hljs-number">1</span>].imshow(b)<br><br>plt.show()<br></code></pre></td></tr></table></figure></div><p><img src="https://s1.ax1x.com/2023/03/08/ppe5dzD.png" alt="Gaussian Smoothing"></p><table><thead><tr><th style="text-align:center"><img src="https://docs.scipy.org/doc/scipy/_images/scipy-ndimage-gaussian_filter-1.png" alt="Gaussian example from scipy"></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.gaussian_filter.html">Â© scipy</a></td></tr></tbody></table><h2 id="Turn-image-to-DataFrame">Turn image to DataFrame</h2><h3 id="Grey-image">Grey image</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># create a 2D image array</span><br>image_array = np.array([[<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>], [<span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>], [<span class="hljs-number">70</span>, <span class="hljs-number">80</span>, <span class="hljs-number">90</span>]])<br><span class="hljs-comment"># convert to pandas dataframe</span><br>df = pd.DataFrame(image_array)<br><span class="hljs-comment"># print dataframe</span><br>print(df)<br></code></pre></td></tr></table></figure></div><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    <category term="Python" scheme="https://karobben.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://karobben.github.io/tags/Python/"/>
    
    <category term="Image" scheme="https://karobben.github.io/tags/Image/"/>
    
  </entry>
  
  <entry>
    <title>Python 3D Plot</title>
    <link href="https://karobben.github.io/2023/03/07/Python/3dball/"/>
    <id>https://karobben.github.io/2023/03/07/Python/3dball/</id>
    <published>2023-03-08T01:58:47.000Z</published>
    <updated>2023-03-08T03:19:56.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Plot-a-ball">Plot a ball</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> mpl_toolkits.mplot3d <span class="hljs-keyword">import</span> Axes3D<br><br><span class="hljs-comment"># Generate random points on the surface of a unit sphere</span><br>np.random.seed(<span class="hljs-number">123</span>)<br>n_points = <span class="hljs-number">500</span><br>theta = np.random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> * np.pi, size=n_points)<br>phi = np.random.uniform(<span class="hljs-number">0</span>, np.pi, size=n_points)<br>x = np.sin(phi) * np.cos(theta)<br>y = np.sin(phi) * np.sin(theta)<br>z = np.cos(phi)<br><br><span class="hljs-comment"># Plot the points on a 3D scatter plot</span><br>fig = plt.figure()<br>ax = fig.add_subplot(<span class="hljs-number">111</span>, projection=<span class="hljs-string">&#x27;3d&#x27;</span>)<br>ax.scatter(x, y, z, s=<span class="hljs-number">50</span>)<br><br><span class="hljs-comment"># Connect the dots to the center of the ball</span><br>center = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_points):<br>    point = np.array([x[i], y[i], z[i]])<br>    ax.plot([center[<span class="hljs-number">0</span>], point[<span class="hljs-number">0</span>]], [center[<span class="hljs-number">1</span>], point[<span class="hljs-number">1</span>]], [center[<span class="hljs-number">2</span>], point[<span class="hljs-number">2</span>]], <span class="hljs-string">&#x27;k--&#x27;</span>, alpha=<span class="hljs-number">0.3</span>)<br><br><span class="hljs-comment"># Set axis limits and labels</span><br>ax.set_xlim([-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br>ax.set_ylim([-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br>ax.set_zlim([-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br>ax.set_xlabel(<span class="hljs-string">&#x27;X&#x27;</span>)<br>ax.set_ylabel(<span class="hljs-string">&#x27;Y&#x27;</span>)<br>ax.set_zlabel(<span class="hljs-string">&#x27;Z&#x27;</span>)<br>plt.show()<br><br></code></pre></td></tr></table></figure></div><p>In this code, we first generate random points on the surface of a unit sphere using the <code>numpy.random.uniform</code> function. Then we plot these points on a 3D scatter plot using matplotlib. Finally, we connect each point to the center of the sphere using a black dotted line with <code>ax.plot</code>. The center of the sphere is defined as <code>[0, 0, 0]</code>.</p><p><img src="https://s1.ax1x.com/2023/03/08/ppe2Ozj.png" alt="3D ball shape dots plot"></p><h2 id="Add-a-plate-to-slice-the-dots">Add a plate to slice the dots</h2><h3 id="how-to-plot-a-surface">how to plot a surface</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> mpl_toolkits.mplot3d <span class="hljs-keyword">import</span> Axes3D<br><br>fig = plt.figure()<br>ax = fig.add_subplot(<span class="hljs-number">111</span>, projection=<span class="hljs-string">&#x27;3d&#x27;</span>)<br><br><span class="hljs-comment"># Generate some data for the plot</span><br>x, y = np.meshgrid(np.arange(-<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0.5</span>), np.arange(-<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0.5</span>))<br>z = np.zeros(x.shape)<br><br><span class="hljs-comment"># Create the plane surface</span><br>ax.plot_surface(x, y, z, alpha=<span class="hljs-number">0.5</span>, color=<span class="hljs-string">&#x27;blue&#x27;</span>)<br><br><span class="hljs-comment"># Plot some 3D points</span><br>xs = np.random.normal(size=<span class="hljs-number">50</span>)<br>ys = np.random.normal(size=<span class="hljs-number">50</span>)<br>zs = np.random.normal(size=<span class="hljs-number">50</span>)<br><br>ax.scatter(xs, ys, zs)<br><br>plt.show()<br></code></pre></td></tr></table></figure></div><p>In this code, we first create a <code>figure</code> and a <code>subplot</code> with a 3D projection. Then, we generate some data for the surface plane using <code>numpy.meshgrid()</code>. We set the <code>z</code> values to zero so that the plane is on the <code>xy</code> plane.</p><p>We then create the plane surface using <code>Axes3D.plot_surface()</code> function. The <code>alpha</code> parameter sets the transparency of the surface and the <code>color</code> parameter sets its color.</p><p>Finally, we plot some 3D points using the <code>Axes3D.scatter()</code> function.</p><p>When you run this code, you should see a 3D plot with a transparent blue plane surface and some randomly scattered 3D points.</p><p><img src="https://s1.ax1x.com/2023/03/08/ppeRiYF.png" alt="Python: A surface in 3D plot"></p><h3 id="Slice-the-ball-with-the-surface">Slice the ball with the surface</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> mpl_toolkits.mplot3d <span class="hljs-keyword">import</span> Axes3D<br><br><span class="hljs-comment"># Generate random points on the surface of a unit sphere</span><br>np.random.seed(<span class="hljs-number">123</span>)<br>n_points = <span class="hljs-number">500</span><br>theta = np.random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> * np.pi, size=n_points)<br>phi = np.random.uniform(<span class="hljs-number">0</span>, np.pi, size=n_points)<br>x = np.sin(phi) * np.cos(theta)<br>y = np.sin(phi) * np.sin(theta)<br>z = np.cos(phi)<br><br><span class="hljs-comment"># Plot the points on a 3D scatter plot</span><br>fig = plt.figure()<br>ax = fig.add_subplot(<span class="hljs-number">111</span>, projection=<span class="hljs-string">&#x27;3d&#x27;</span>)<br>ax.scatter(x, y, z, s=<span class="hljs-number">50</span>)<br><br><span class="hljs-comment"># Connect the dots to the center of the ball</span><br>center = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n_points):<br>    point = np.array([x[i], y[i], z[i]])<br>    ax.plot([center[<span class="hljs-number">0</span>], point[<span class="hljs-number">0</span>]], [center[<span class="hljs-number">1</span>], point[<span class="hljs-number">1</span>]], [center[<span class="hljs-number">2</span>], point[<span class="hljs-number">2</span>]], <span class="hljs-string">&#x27;k--&#x27;</span>, alpha=<span class="hljs-number">0.3</span>)<br><br><span class="hljs-comment"># Set axis limits and labels</span><br>ax.set_xlim([-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br>ax.set_ylim([-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br>ax.set_zlim([-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br>ax.set_xlabel(<span class="hljs-string">&#x27;X&#x27;</span>)<br>ax.set_ylabel(<span class="hljs-string">&#x27;Y&#x27;</span>)<br>ax.set_zlabel(<span class="hljs-string">&#x27;Z&#x27;</span>)<br><br><span class="hljs-comment"># Add plate</span><br><br>x, y =  np.meshgrid(np.arange(-<span class="hljs-number">1</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">0.5</span>), <br>        np.arange(-<span class="hljs-number">1</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">0.5</span>))<br>z = np.zeros(x.shape)<br><br><span class="hljs-comment"># Create the plane surface</span><br>ax.plot_surface(x, y, z + <span class="hljs-number">.7</span>, alpha=<span class="hljs-number">0.5</span>, color=<span class="hljs-string">&#x27;steelblue&#x27;</span>)<br>ax.plot_surface(x, y, z +<span class="hljs-number">.75</span>, alpha=<span class="hljs-number">0.5</span>, color=<span class="hljs-string">&#x27;red&#x27;</span>)<br>ax.plot_surface(x, y, z + <span class="hljs-number">.8</span>, alpha=<span class="hljs-number">0.5</span>, color=<span class="hljs-string">&#x27;steelblue&#x27;</span>)<br><br><br>plt.show()<br></code></pre></td></tr></table></figure></div><p><img src="https://s1.ax1x.com/2023/03/08/ppeRwtS.png" alt="Python 3D plot: slice a ball with plate"></p><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">123</summary>
    
    
    
    <category term="Python" scheme="https://karobben.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://karobben.github.io/tags/Python/"/>
    
    <category term="Plot" scheme="https://karobben.github.io/tags/Plot/"/>
    
    <category term="3D" scheme="https://karobben.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>Python Dictionary is awesome</title>
    <link href="https://karobben.github.io/2023/03/01/Python/dictionary/"/>
    <id>https://karobben.github.io/2023/03/01/Python/dictionary/</id>
    <published>2023-03-01T18:41:49.000Z</published>
    <updated>2023-03-01T19:17:01.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dictionary">Dictionary</h2><p>A dictionary in Python is an unordered collection of key-value pairs. It is a mutable, indexed, and iterable data structure that is commonly used to store and retrieve data. The keys in a dictionary must be unique and immutable (strings, integers, tuples) while the values can be of any data type (strings, integers, lists, sets, other dictionaries, etc.). It could be create by <code>my_dict = &#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 25, &quot;city&quot;: &quot;New York&quot;&#125;</code></p><p>Here is some basic operations for Python dictionary</p><ol><li>Creating a dictionary</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">25</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span>&#125;<br></code></pre></td></tr></table></figure></div><ol start="2"><li>Accessing values using keys</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python">print(my_dict[<span class="hljs-string">&quot;name&quot;</span>]) <br>print(my_dict[<span class="hljs-string">&quot;age&quot;</span>]) <br></code></pre></td></tr></table></figure></div><pre>John25</pre><ol start="3"><li>Adding a new key-value pair</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python">my_dict[<span class="hljs-string">&quot;country&quot;</span>] = <span class="hljs-string">&quot;USA&quot;</span><br>print(my_dict)  <br></code></pre></td></tr></table></figure></div><pre>{"name": "John", "age": 25, "city": "New York", "country": "USA"}</pre><ol start="4"><li>Removing and Updating</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">del</span> my_dict[<span class="hljs-string">&quot;city&quot;</span>]<br>my_dict[<span class="hljs-string">&quot;age&quot;</span>] = <span class="hljs-number">26</span><br></code></pre></td></tr></table></figure></div><ol start="5"><li>Checking if a key exists in a dictionary</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;name&quot;</span> <span class="hljs-keyword">in</span> my_dict:<br>    print(<span class="hljs-string">&quot;Name is present&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">&quot;Name is not present&quot;</span>)<br><br><span class="hljs-comment"># Iterating through a dictionary</span><br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> my_dict.items():<br>    print(key, value)<br></code></pre></td></tr></table></figure></div><h2 id="Find-the-max-value-from-a-dictionary">Find the max value from a dictionary</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python">d = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">20</span>&#125;<br>max_value = <span class="hljs-built_in">max</span>(d, key=d.get)<br>print(max_value)<br></code></pre></td></tr></table></figure></div><pre>c</pre><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">Python Dictionary is awesome</summary>
    
    
    
    <category term="Python" scheme="https://karobben.github.io/categories/Python/"/>
    
    <category term="Beginner" scheme="https://karobben.github.io/categories/Python/Beginner/"/>
    
    
    <category term="Python" scheme="https://karobben.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>path find in a network plot</title>
    <link href="https://karobben.github.io/2023/02/26/Python/net-path/"/>
    <id>https://karobben.github.io/2023/02/26/Python/net-path/</id>
    <published>2023-02-26T17:22:57.000Z</published>
    <updated>2023-03-02T19:51:47.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="path-find-in-a-network-plot">path find in a network plot</h2><p>Hereâs an example code for a more complicated network graph using NetworkX and finding a path from one node to another node:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> networkx <span class="hljs-keyword">as</span> nx<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># Create a graph</span><br>G = nx.DiGraph()<br><br><span class="hljs-comment"># Add nodes</span><br>G.add_nodes_from([<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>])<br><br><span class="hljs-comment"># Add edges</span><br>G.add_edges_from([(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>), (<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>), (<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>), (<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>), (<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>),<br>                  (<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>), (<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>), (<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>), (<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>)])<br><br><span class="hljs-comment"># Plot the graph</span><br>pos = nx.spring_layout(G, seed=<span class="hljs-number">123</span>)<br>nx.draw_networkx(G, pos, with_labels=<span class="hljs-literal">True</span>)<br>edge_labels = nx.get_edge_attributes(G, <span class="hljs-string">&#x27;weight&#x27;</span>)<br>nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)<br>plt.show()<br><br><span class="hljs-comment"># Find a path from node &#x27;A&#x27; to node &#x27;H&#x27;</span><br>path = nx.shortest_path(G, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>)<br>print(path)<br><br><br><span class="hljs-comment"># highlight the path</span><br>edge_colors = [<span class="hljs-string">&#x27;red&#x27;</span> <span class="hljs-keyword">if</span> (u, v) <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(path, path[<span class="hljs-number">1</span>:]) <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;black&#x27;</span> <span class="hljs-keyword">for</span> u, v <span class="hljs-keyword">in</span> G.edges()]<br>nx.draw(G,  pos, with_labels=<span class="hljs-literal">True</span>, edge_color=edge_colors)<br>plt.show()<br></code></pre></td></tr></table></figure></div><pre>['A', 'B', 'C', 'E', 'G', 'H']</pre><p><img src="https://s1.ax1x.com/2023/03/02/ppFiGOf.png" alt="Net work path find"></p><p>In this code, we create a directed graph <code>G</code> using <code>nx.DiGraph()</code>. We add nodes to the graph using <code>G.add_nodes_from()</code>, and add edges to the graph using <code>G.add_edges_from()</code>. We can assign a weight to each edge using a dictionary, but in this example we donât do that.</p><p>We then use the <code>nx.spring_layout()</code> function to generate node positions for the graph. This function positions nodes using the Fruchterman-Reingold force-directed algorithm. In this example, we set the random seed to 123 using the <code>seed</code> parameter of <code>nx.spring_layout()</code>. This ensures that the initial conditions of the spring layout algorithm are the same each time you run the code, and the layout of the graph remains the same.</p><p>We then use <code>nx.draw_networkx()</code> to draw nodes and edges of the graph with labels. We also use <code>nx.get_edge_attributes()</code> and <code>nx.draw_networkx_edge_labels()</code> to add labels to the edges of the graph. Finally, we use <code>plt.show()</code> to display the plot.</p><p>After displaying the graph, we use <code>nx.shortest_path()</code> to find the shortest path from node âAâ to node âHâ. The function returns a list of nodes that form the path. We print the path to the console.</p><p>Note that you can modify the graph and the path-finding algorithms according to your specific needs using the functions available in the NetworkX library.</p><h2 id="How-does-nx-shortest-path-works">How does <strong>nx.shortest_path</strong> works</h2><p>The <code>nx.shortest_path()</code> function in NetworkX is used to find the shortest path between two nodes in a graph. It uses the <em><strong>Dijkstraâs algorithm</strong></em>, which is an algorithm for finding the shortest paths between nodes in a graph.</p><p>The <code>nx.shortest_path()</code> function takes three parameters:</p><ul><li><code>G</code>: the graph to search for shortest path in.</li><li><code>source</code>: the starting node for the path.</li><li><code>target</code>: the ending node for the path.<br>The function returns a list of nodes in the shortest path from the <code>source</code> node to the <code>target</code> node.</li></ul><h2 id="what-is-Dijkstraâs-algorithm">what is <em><strong>Dijkstraâs algorithm</strong></em></h2><p><em><strong>Dijkstraâs algorithm</strong></em> is a graph search algorithm that works by finding the shortest path from a starting node to all other nodes in the graph. The algorithm maintains a set of visited nodes and a set of unvisited nodes, with the distance from the starting node to each unvisited node initialized to infinity. At each step, the algorithm selects the unvisited node with the smallest distance from the starting node and adds it to the visited set. It then updates the distances of all adjacent nodes that are still in the unvisited set, setting their distance to the sum of the distance to the current node and the weight of the edge between them. The algorithm continues until the target node is reached, or until all nodes have been visited.</p><p>Once the shortest path has been found, <code>nx.shortest_path()</code> returns a list of nodes in the path, in the order that they appear in the path.</p><h2 id="What-is-âbellman-fordâ">What is âbellman-fordâ?</h2><p>Bellman-Ford is an algorithm for finding the shortest paths between nodes in a weighted graph. The algorithm can handle negative edge weights, whereas Dijkstraâs algorithm, which we discussed in a previous question, cannot. However, Bellman-Ford is slower than Dijkstraâs algorithm and has a higher time complexity of O(V*E), where V is the number of vertices and E is the number of edges in the graph.</p><p>The Bellman-Ford algorithm works by relaxing all edges in the graph V-1 times, where V is the number of vertices in the graph. During each iteration, the algorithm checks if the distance to a node can be improved by going through another node. If so, it updates the distance to the node. The algorithm repeats this process V-1 times to ensure that all possible paths have been explored.</p><p>After the V-1 iterations, the algorithm performs one more check to see if there are any negative weight cycles in the graph. If there are, then the algorithm cannot find a shortest path because the distance to the node can be decreased indefinitely by traversing the negative cycle. In this case, the algorithm returns a message indicating that a negative cycle has been detected.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> networkx <span class="hljs-keyword">as</span> nx<br><br><span class="hljs-comment"># Create a graph</span><br>G = nx.DiGraph()<br><br><span class="hljs-comment"># Add nodes</span><br>G.add_nodes_from([<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>])<br><br><span class="hljs-comment"># Add edges with weights</span><br>G.add_weighted_edges_from([(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">3</span>), (<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">8</span>), (<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, -<span class="hljs-number">4</span>),<br>                           (<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-number">7</span>), (<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-number">2</span>),<br>                           (<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">2</span>), (<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, -<span class="hljs-number">5</span>)])<br><br><span class="hljs-comment"># Find the shortest paths using Bellman-Ford algorithm</span><br>distances, predecessors = nx.bellman_ford(G, <span class="hljs-string">&#x27;A&#x27;</span>)<br><br><span class="hljs-comment"># Print the distances</span><br>print(distances)<br><br><span class="hljs-comment"># Print the predecessors</span><br>print(predecessors)<br></code></pre></td></tr></table></figure></div><p>In this example, we create a directed graph with five nodes and eight edges, with some edges having negative weights. We then use <code>nx.bellman_ford()</code> to find the shortest paths from the node âAâ to all other nodes in the graph. The function returns two dictionaries: one with the shortest distance from the starting node to each node, and another with the predecessor node in the shortest path for each node. We print these dictionaries to the console.</p><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">path find in a network plot</summary>
    
    
    
    <category term="Python" scheme="https://karobben.github.io/categories/Python/"/>
    
    
    <category term="Network" scheme="https://karobben.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>Fruchterman Reingold layout</title>
    <link href="https://karobben.github.io/2023/02/20/LearnNotes/fruchterman-reingold/"/>
    <id>https://karobben.github.io/2023/02/20/LearnNotes/fruchterman-reingold/</id>
    <published>2023-02-21T03:44:24.000Z</published>
    <updated>2023-03-02T07:29:29.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FruchtermanâReingold">FruchtermanâReingold</h2><blockquote><p>Fruchterman-Reingold is an algorithm used for force-directed graph drawing, which is a way of visualizing graph structures in a 2D or 3D space. The algorithm was first introduced by Thomas M. Fruchterman and Edward M. Reingold in 1991.</p><p>The Fruchterman-Reingold algorithm works by simulating a physical system in which the nodes of a graph are treated as objects with electrical charges and the edges of the graph are treated as springs. The nodes are initially placed at random positions in the 2D or 3D space, and then the algorithm iteratively adjusts the position of the nodes based on the repulsion between the nodes and the attraction between the connected nodes. The nodes that are connected by an edge are pulled closer together, while the nodes that are not connected are pushed apart.</p><p>The Fruchterman-Reingold algorithm aims to minimize the total energy of the system by finding an equilibrium state where the forces between the nodes and edges are balanced. The algorithm iteratively adjusts the positions of the nodes until it reaches the equilibrium state. The result is a visually pleasing graph layout that allows the viewer to easily see the connections and relationships between the nodes.</p><p>The Fruchterman-Reingold algorithm is widely used in many fields such as social network analysis, information visualization, and bioinformatics. It has been implemented in many software packages, including Gephi, Cytoscape, and NetworkX.<br>FruchtermanâReingold is a type of layout which widely be used in the network, social network and protein-protein interaction network for instance, analysis.<br><a title='ChatGPT'> Who sad this?</a></p></blockquote><p>So, imagine that all the nodes are electrons that carry the same charge. As a result, they prefer to stay away from each other and distribute evenly in a limited space. However, the connections (edges) work like springs that pull two nodes together. If two groups have connections that frequently occur within the group, those nodes would prefer to be close to each other and form two large clusters because of the âspringsâ. The two groups would be away from each other because no/or a few of spring pulls them together, and the two huge groups of nodes would push the nodes outside the cluster. If a new node is added that has connections to both clusters and the number is significant enough, it could form an hourglass-like structure. And if there are a few other connections between two clusters at the same time, it would merge the two groups into a single one.</p><p>HarelâKoren Fast Multiscaling layout</p><h2 id="Want-to-know-more">Want to know more?</h2><p>This algorithm was published in 1991 by Fruchterman &amp; Reingold<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>. It is a undirected layout and modified from the spring-embedder model and VLSI technique called force-directed placement.</p><p>By this methoud, it is mainly concerned about:</p><ol><li>Distribute the vertices evenly in the frame.</li><li>Minimize edge crossings.</li><li>Make  edge lengths uniform.</li><li>Reflect inherent symmetry.</li><li>Conform to the  frame.</li></ol><ul><li><p>Repulsive forces<br>$<br>f _{rep}(u,v) = \frac{c _{rep}}{||p _v - p _u||^ 2} Ã \overrightarrow{p _vp _u}<br>$</p></li><li><p>Attractive forces<br>$<br>f _{spring}(u,v) = c _{spring} Ã log\frac{||p _v - p _u||}{\ell} Ã \overrightarrow{p _vp _u}<br>$</p></li></ul><p>$<br>f_{attr}(u,v) = f _spring(u,v)-f _{rep}(u,v)<br>$</p><ul><li>Resulting displacement vector<br>$<br>F _u =  \sum _{v \in V} f _{rep}(u, v) + \sum _{uv \in E} f _{attr} (u,v)<br>$</li></ul><p>More Details and example you can find at <a href="https://www.youtube.com/watch?v=JAe7Oscsp98">Philipp Kindermannâs Youtobe Video (2021) </a></p><style>pre {  background-color:#38393d;  color: #5fd381;}</style><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Fruchterman, Thomas MJ, and Edward M. Reingold. âGraph drawing by forceâdirected placement.â Software: Practice and experience 21.11 (1991): 1129-1164. <a href="#fnref1" class="footnote-backref">â©ï¸</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">Fruchterman Reingold</summary>
    
    
    
    <category term="Notes" scheme="https://karobben.github.io/categories/Notes/"/>
    
    <category term="Statistic" scheme="https://karobben.github.io/categories/Notes/Statistic/"/>
    
    <category term="others" scheme="https://karobben.github.io/categories/Notes/Statistic/others/"/>
    
    
    <category term="Statistic" scheme="https://karobben.github.io/tags/Statistic/"/>
    
    <category term="Network" scheme="https://karobben.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>Overlap calculation in R</title>
    <link href="https://karobben.github.io/2023/02/14/R/r-overlap/"/>
    <id>https://karobben.github.io/2023/02/14/R/r-overlap/</id>
    <published>2023-02-14T07:25:30.000Z</published>
    <updated>2023-02-23T23:05:37.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="overlap">overlap</h2><p><code>overlap</code>: The overlap package provides functions to calculate and visualize the overlap of two or more density distributions. The <code>overlapEst</code> function can be used to calculate the overlap of two density distributions, while the <code>overlapPlot</code> function can be used to visualize the overlap.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">library(overlap)<br>library(ggplot2)<br><br><span class="hljs-comment"># Generate two random lists of numbers</span><br>set.seed(<span class="hljs-number">123</span>)<br>list1 &lt;- rnorm(<span class="hljs-number">100</span>, mean = <span class="hljs-number">5</span>, sd = <span class="hljs-number">1</span>)<br>list2 &lt;- rnorm(<span class="hljs-number">100</span>, mean = <span class="hljs-number">8</span>, sd = <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Calculate overlap density</span><br>overlapEst(list1, list2)<br><br>ggplot() + geom_density(aes(list1, fill = <span class="hljs-string">&quot;list1&quot;</span>), alpha = <span class="hljs-number">.5</span>) + <br>  geom_density(aes(list2, fill = <span class="hljs-string">&quot;list2&quot;</span>), alpha = <span class="hljs-number">.5</span>) + theme_bw()<br><br></code></pre></td></tr></table></figure></div><pre>    Dhat1     Dhat4     Dhat5 0.2460298        NA        NA </pre><p><img src="https://s1.ax1x.com/2023/02/14/pSTf79K.png" alt="Density overlapping estimate 1"></p><h2 id="overlapping">overlapping</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">library(overlapping)<br><br><span class="hljs-comment"># Generate two random lists of numbers</span><br>set.seed(<span class="hljs-number">123</span>)<br>list1 &lt;- rnorm(<span class="hljs-number">100</span>, mean = <span class="hljs-number">5</span>, sd = <span class="hljs-number">1</span>)<br>list2 &lt;- rnorm(<span class="hljs-number">100</span>, mean = <span class="hljs-number">8</span>, sd = <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Calculate overlap density</span><br>overlap(<span class="hljs-built_in">list</span>(list1, list2))<br></code></pre></td></tr></table></figure></div><pre>$OV[1] 0.1431085</pre><p>I personally believe that this result is more reliable.</p><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">Overlap calculation in R with library overlap and kerndwd</summary>
    
    
    
    <category term="Data" scheme="https://karobben.github.io/categories/Data/"/>
    
    <category term="Statistic" scheme="https://karobben.github.io/categories/Data/Statistic/"/>
    
    
    <category term="R" scheme="https://karobben.github.io/tags/R/"/>
    
    <category term="Data" scheme="https://karobben.github.io/tags/Data/"/>
    
  </entry>
  
  <entry>
    <title>From igraph to ggplot2</title>
    <link href="https://karobben.github.io/2023/02/07/R/igraph-ggplot2/"/>
    <id>https://karobben.github.io/2023/02/07/R/igraph-ggplot2/</id>
    <published>2023-02-07T18:44:28.000Z</published>
    <updated>2023-03-02T07:28:34.450Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Turn-igraph-result-to-ggplot2-plot">Turn igraph result to ggplot2 plot</h2><div class="admonition note"><p class="admonition-title">Why you want to turn igraph network polot to ggplot?</p><ul><li>Flexibility: ggplot is a very flexible and customizable plotting package that allows you to create high-quality, publication-ready plots with a high degree of control over the visual aesthetics of your plots. You can easily modify various aspects of the plot, such as the color, shape, and size of the nodes and edges, and the placement of the labels.</li><li>Integration with igraph: ggplot works seamlessly with igraph, making it easy to create complex and informative visualizations of your network data. You can use ggplot to visualize network data in a variety of ways, including heatmaps, scatterplots, and bar charts.</li><li>Consistency: ggplot provides a consistent grammar for building plots, which makes it easy to create plots with a consistent style and look across different datasets. This can be particularly useful if you are working with multiple datasets and want to create a consistent visual language for your plots.</li><li>Reproducibility: ggplot produces code that can be easily reproduced, making it easier to share and collaborate on your work. You can also easily modify and update your plots as your data or analysis changes.Overall, using ggplot to plot igraph results can help you create informative, visually appealing, and reproducible visualizations of your network data.</li></ul></div><p>Basic idea of this post is from <a href="https://chrischizinski.github.io/rstats/igraph-ggplotll/">Â© Christopher Chizinski, 2014</a>. It is an old post but all codes work just fine!</p><h2 id="Example-data-for-igraph">Example data for igraph</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">library(stringr)<br>library(reshape2)<br>library(ggplot2)<br>library(igraph)<br>library(RColorBrewer)<br>library(qgraph)<br>library(ggthemes)<br><br><br><span class="hljs-comment"># data clean</span><br>dataUU &lt;- read.table(<span class="hljs-string">&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/13_AdjacencyUndirectedUnweighted.csv&quot;</span>, header=<span class="hljs-literal">TRUE</span>)<br>TB &lt;- na.omit(melt(dataUU))<br>TB$from &lt;- str_replace_all(TB$from, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>)<br><span class="hljs-comment"># width of the edges</span><br>set.seed(<span class="hljs-number">3</span>)<br>TB$value = runif(nrow(TB), <span class="hljs-built_in">min</span>=<span class="hljs-number">0</span>, <span class="hljs-built_in">max</span>=<span class="hljs-number">10</span>)<br><span class="hljs-comment"># size of pointsd</span><br>TB_size &lt;- as.data.frame(table(<span class="hljs-built_in">c</span>(as.matrix(TB[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]))))<br><br>network=graph_from_data_frame(TB[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>] )<br><br>set.seed(<span class="hljs-number">1</span>)<br>e &lt;- get.edgelist(network,<span class="hljs-built_in">names</span>=<span class="hljs-literal">FALSE</span>)<br>l &lt;- qgraph.layout.fruchtermanreingold(e,vcount=vcount(network),  <br>    area=<span class="hljs-number">30</span>*(vcount(network)^<span class="hljs-number">2</span>), repulse.rad=(vcount(network)^<span class="hljs-number">4</span>))  <br>plot(network,  <br>    layout=l, <br>    vertex.size=<span class="hljs-number">4</span>, vertex.label=<span class="hljs-literal">NA</span>,  <br>    edge.arrow.size= <span class="hljs-number">0</span>, <br>)<br></code></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r"><span class="hljs-comment">## convert the layout to a data.frame</span><br>fr.all.df &lt;- as.data.frame(l)<br><span class="hljs-comment">## add in the species codes</span><br>fr.all.df$species &lt;- V(network)$name<br><span class="hljs-comment">## add size for each nodes</span><br>fr.all.df$size &lt;- TB_size$Freq[match(fr.all.df$species, TB_size$Var1)]<br><br>g &lt;- TB[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]<br>colnames(g) &lt;-<span class="hljs-built_in">c</span>(<span class="hljs-string">&#x27;from&#x27;</span>, <span class="hljs-string">&#x27;to&#x27;</span>)<br>g$weight = TB[[<span class="hljs-number">3</span>]]<br>g$from.x &lt;- fr.all.df$V1[match(g$from, fr.all.df$species)]  <span class="hljs-comment">#  match the from locations from the node data.frame we previously connected</span><br>g$from.y &lt;- fr.all.df$V2[match(g$from, fr.all.df$species)]<br>g$to.x &lt;- fr.all.df$V1[match(g$to, fr.all.df$species)]  <span class="hljs-comment">#  match the to locations from the node data.frame we previously connected</span><br>g$to.y &lt;- fr.all.df$V2[match(g$to, fr.all.df$species)]<br><br>P &lt;-ggplot() +<br>        geom_segment(data=g,aes(x=from.x,xend = to.x, y=from.y,yend = to.y, size = weight),colour=<span class="hljs-string">&quot;black&quot;</span>, alpha =<span class="hljs-number">.1</span> ) +<br>        geom_point(data=fr.all.df,aes(x=V1,y=V2)) +<br>        geom_text(data=fr.all.df,aes(x=V1,y=V2,label=<span class="hljs-string">&quot;&quot;</span>)) +<br>        theme_map()   + coord_fixed(ratio = <span class="hljs-number">1</span>) + coord_fixed(ratio = <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></div><table><thead><tr><th style="text-align:center"><img src="https://s1.ax1x.com/2023/02/08/pS2NQED.png" alt=""></th><th style="text-align:center"><img src="https://s1.ax1x.com/2023/02/08/pS2N14H.png" alt=""></th></tr></thead><tbody></tbody></table><h2 id="include-size-of-the-dots-and-the-weight-of-edges">include size of the dots and the weight of edges</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">ggplot() +<br>  geom_segment(data=g,aes(x=from.x,xend = to.x, y=from.y,yend = to.y, size = weight), size = <span class="hljs-built_in">log</span>(g$weight + <span class="hljs-number">1</span>)/<span class="hljs-number">2</span>, colour=<span class="hljs-string">&quot;black&quot;</span>, alpha =<span class="hljs-number">.1</span> ) +<br>  geom_point(data=fr.all.df,aes(x=V1,y=V2, size = size, color = size), alpha = <span class="hljs-number">.8</span>) +<br>  geom_text(data=fr.all.df,aes(x=V1,y=V2,label=<span class="hljs-string">&quot;&quot;</span>)) +<br>  theme_map()   + coord_fixed(ratio = <span class="hljs-number">1</span>) + coord_fixed(ratio = <span class="hljs-number">1</span>) + scale_color_gradient(high = <span class="hljs-string">&#x27;red&#x27;</span>, low = <span class="hljs-string">&#x27;steelblue&#x27;</span>)<br></code></pre></td></tr></table></figure></div><p><img src="https://s1.ax1x.com/2023/02/08/pS2UVIg.png" alt=""></p><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">Turn igraph result to ggplot2 and more</summary>
    
    
    
    <category term="R" scheme="https://karobben.github.io/categories/R/"/>
    
    <category term="Plot" scheme="https://karobben.github.io/categories/R/Plot/"/>
    
    <category term="GGPLOT" scheme="https://karobben.github.io/categories/R/Plot/GGPLOT/"/>
    
    
    <category term="ggplot2" scheme="https://karobben.github.io/tags/ggplot2/"/>
    
    <category term="Network" scheme="https://karobben.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>How to set a static IP address for Linux</title>
    <link href="https://karobben.github.io/2023/01/31/Linux/linux-static-ip/"/>
    <id>https://karobben.github.io/2023/01/31/Linux/linux-static-ip/</id>
    <published>2023-01-31T16:40:12.000Z</published>
    <updated>2023-02-12T16:08:19.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="How-to-set-a-static-ip-for-Pop-os">How to set a static ip for Pop os</h2><ol><li>Find <code>Gateway</code> and the <code>DNS</code> for your network</li></ol><p><img src="https://s1.ax1x.com/2023/02/01/pS0LD5n.png" alt=""><br>Setting â Network â Check the details of your network.<br>Here, <code>Default Route</code> is the <code>Gateway</code>,<br><code>DNS</code> is the <code>DNS</code></p><ol start="2"><li>Find the Netmask for your network by <code>ifconfig</code></li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">ifconfig<br></code></pre></td></tr></table></figure></div><pre>eno1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500        inet 192.168.3.1  netmask 255.255.255.0  broadcast 192.168.3.255...</pre><ol start="3"><li>fill them in IPv4 setting</li></ol><p>Fill the address you want and rest of other infor you jut get from above.<br>||<img src="https://s1.ax1x.com/2023/02/01/pS0L62V.png" alt=""></p><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">How to set a static IP address for Linux</summary>
    
    
    
    <category term="Linux" scheme="https://karobben.github.io/categories/Linux/"/>
    
    <category term="System" scheme="https://karobben.github.io/categories/Linux/System/"/>
    
    
    <category term="Linux" scheme="https://karobben.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>IdTrackerAI</title>
    <link href="https://karobben.github.io/2023/01/24/Bioinfor/idtracker/"/>
    <id>https://karobben.github.io/2023/01/24/Bioinfor/idtracker/</id>
    <published>2023-01-24T22:41:05.000Z</published>
    <updated>2023-02-12T01:23:31.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Set-up-Install">Set up/Install</h2><p><a href="http://localhost:4000/2023/01/24/Bioinfor/idtracker/">Documentation</a></p><p>how to install correct pytorch and cuda: <a href="https://pytorch.org/get-started/previous-versions/">https://pytorch.org/get-started/previous-versions/</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">conda create -y --name idtrackerai python=3.7 Tensorflow=2.0.0 cudatoolkit=11.3.1 pytorch=1.10.0<br>conda activate idtrackerai<br>pip install <span class="hljs-string">&quot;idtrackerai[gui]&quot;</span><br></code></pre></td></tr></table></figure></div><h2 id="Idtracker-Data-analysis">Idtracker Data analysis</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> trajectorytools <span class="hljs-keyword">as</span> tt<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>trajectories_file_path = <span class="hljs-string">&#x27;trajectories_wo_gaps/trajectories_wo_gaps.npy&#x27;</span><br>trajectories_dict = np.load(trajectories_file_path, allow_pickle=<span class="hljs-literal">True</span>).item()<br>trajectories = trajectories_dict[<span class="hljs-string">&#x27;trajectories&#x27;</span>]<br>tr = tt.Trajectories.from_positions(trajectories)<br><br><br>fig, ax_trajectories = plt.subplots(figsize=(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br>frame_range = <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>*<span class="hljs-number">30</span>) <br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(tr.number_of_individuals):<br>    ax_trajectories.plot(tr.s[frame_range,i,<span class="hljs-number">0</span>], tr.s[frame_range,i,<span class="hljs-number">1</span>])<br>    ax_trajectories.set_aspect(<span class="hljs-string">&#x27;equal&#x27;</span>,<span class="hljs-string">&#x27;box&#x27;</span>)<br>    ax_trajectories.set_title(<span class="hljs-string">&#x27;Trajectories&#x27;</span>,fontsize=<span class="hljs-number">24</span>)<br>    ax_trajectories.set_xlabel(<span class="hljs-string">&#x27;X (BL)&#x27;</span>,fontsize=<span class="hljs-number">24</span>)<br>    ax_trajectories.set_ylabel(<span class="hljs-string">&#x27;Y (BL)&#x27;</span>,fontsize=<span class="hljs-number">24</span>)<br>fig.savefig(<span class="hljs-string">&quot;trajectory2.png&quot;</span>)<br></code></pre></td></tr></table></figure></div><p><img src="https://s1.ax1x.com/2023/01/25/pSt1TnH.png" alt="Trajectory"></p><p>With video</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> colors<br><br>Palette = [<span class="hljs-string">&quot;#B03D3B&quot;</span>, <span class="hljs-string">&quot;#B86C3D&quot;</span>, <span class="hljs-string">&quot;#BF8040&quot;</span>, <span class="hljs-string">&quot;#ACC144&quot;</span>, <span class="hljs-string">&quot;#78C144&quot;</span>, <span class="hljs-string">&quot;#47C291&quot;</span>, <span class="hljs-string">&quot;#478BC2&quot;</span>, <span class="hljs-string">&quot;#4760C2&quot;</span>, <span class="hljs-string">&quot;#574BC3&quot;</span>, <span class="hljs-string">&quot;#834BC3&quot;</span>, <span class="hljs-string">&quot;#C34BAB&quot;</span>, <span class="hljs-string">&quot;#C14465&quot;</span>, <span class="hljs-string">&quot;#DEB59C&quot;</span>, <span class="hljs-string">&quot;#D7DF9F&quot;</span>, <span class="hljs-string">&quot;#A7DF9F&quot;</span>, <span class="hljs-string">&quot;#9FDFD9&quot;</span>, <span class="hljs-string">&quot;#A3B3E0&quot;</span>, <span class="hljs-string">&quot;#D0A3E0&quot;</span>, <span class="hljs-string">&quot;#E2A7CD&quot;</span>, <span class="hljs-string">&quot;#361712&quot;</span>, <span class="hljs-string">&quot;#1A3913&quot;</span>, <span class="hljs-string">&quot;#132B39&quot;</span>, <span class="hljs-string">&quot;#2D1339&quot;</span>, <span class="hljs-string">&quot;#391330&quot;</span>]<br>Num = <span class="hljs-number">0</span><br><span class="hljs-comment">#V_loc = &#x27;/mnt/Ken_lap/Vlog/upload/promE-GFP/20210622_promE-GFP_C0074_Trim.mp4&#x27;</span><br>V_loc = <span class="hljs-string">&#x27;/mnt/Ken_lap/Vlog/upload/promE-fru-IR-v330035/20220116-promE-v330035-298d-C0379_Trim-2.mp4&#x27;</span><br><span class="hljs-comment">#V_loc = &#x27;/mnt/Ken_lap/Vlog/upload/elav-GS-fru-IR-V330035/20220123C0394_Trim.mp4&#x27;</span><br><br>cap=cv2.VideoCapture(V_loc)<br>fourcc = cv2.VideoWriter_fourcc(*<span class="hljs-string">&#x27;XVID&#x27;</span>)<br>out = cv2.VideoWriter(<span class="hljs-string">&#x27;output.avi&#x27;</span>,fourcc, <span class="hljs-number">20.0</span>, (<span class="hljs-number">1920</span>,<span class="hljs-number">1080</span>))<br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">True</span>):<br>  ret,frame=cap.read()<br>  <span class="hljs-keyword">for</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(trajectories[<span class="hljs-number">0</span>])):<br>    XY = np.array(trajectories[Num][<span class="hljs-built_in">id</span>], dtype = <span class="hljs-built_in">int</span>)<br>    C = np.array(colors.to_rgba(Palette[<span class="hljs-built_in">id</span>]))[:-<span class="hljs-number">1</span>] * <span class="hljs-number">225</span><br>    cv2.putText(frame, <span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>) ,(XY[<span class="hljs-number">0</span>], XY[<span class="hljs-number">1</span>]), cv2.FONT_HERSHEY_COMPLEX, <span class="hljs-number">1</span>, C, <span class="hljs-number">2</span>)<br><br>  cv2.imshow(<span class="hljs-string">&quot;video&quot;</span>,frame)<br>  Num +=<span class="hljs-number">1</span> <br>  out.write(frame)<br>  <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">30</span>)&amp;<span class="hljs-number">0xFF</span>==<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>      cv2.destroyAllWindows()<br>      <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> trajectorytools <span class="hljs-keyword">as</span> tt<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> json<br><br><br>F = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data/csv/20220116-promE-v330035-298d-C0379_Trim-2.mp4_.json&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br>Dict = json.loads(F)<br>trajectories = np.array([[Dict[i][ii][<span class="hljs-string">&#x27;body&#x27;</span>][:<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> np.sort([ii <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> Dict[<span class="hljs-string">&#x27;12&#x27;</span>].keys()])] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Dict.keys()])<br>tr = tt.Trajectories.from_positions(trajectories)<br><br>fig, ax_trajectories = plt.subplots(figsize=(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br>frame_range = <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>*<span class="hljs-number">30</span>) <br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(tr.number_of_individuals):<br>    ax_trajectories.plot(tr.s[frame_range,i,<span class="hljs-number">0</span>], tr.s[frame_range,i,<span class="hljs-number">1</span>])<br>    ax_trajectories.set_aspect(<span class="hljs-string">&#x27;equal&#x27;</span>,<span class="hljs-string">&#x27;box&#x27;</span>)<br>    ax_trajectories.set_title(<span class="hljs-string">&#x27;Trajectories&#x27;</span>,fontsize=<span class="hljs-number">24</span>)<br>    ax_trajectories.set_xlabel(<span class="hljs-string">&#x27;X (BL)&#x27;</span>,fontsize=<span class="hljs-number">24</span>)<br>    ax_trajectories.set_ylabel(<span class="hljs-string">&#x27;Y (BL)&#x27;</span>,fontsize=<span class="hljs-number">24</span>)<br>    ax_trajectories.set_aspect(<span class="hljs-number">.5</span>)<br><br><br>fig.savefig(<span class="hljs-string">&quot;20220123C0394_Trim_30.png&quot;</span>)<br><br><br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> colors<br><br>Palette = [<span class="hljs-string">&quot;#B03D3B&quot;</span>, <span class="hljs-string">&quot;#B86C3D&quot;</span>, <span class="hljs-string">&quot;#BF8040&quot;</span>, <span class="hljs-string">&quot;#ACC144&quot;</span>, <span class="hljs-string">&quot;#78C144&quot;</span>, <span class="hljs-string">&quot;#47C291&quot;</span>, <span class="hljs-string">&quot;#478BC2&quot;</span>, <span class="hljs-string">&quot;#4760C2&quot;</span>, <span class="hljs-string">&quot;#574BC3&quot;</span>, <span class="hljs-string">&quot;#834BC3&quot;</span>, <span class="hljs-string">&quot;#C34BAB&quot;</span>, <span class="hljs-string">&quot;#C14465&quot;</span>, <span class="hljs-string">&quot;#DEB59C&quot;</span>, <span class="hljs-string">&quot;#D7DF9F&quot;</span>, <span class="hljs-string">&quot;#A7DF9F&quot;</span>, <span class="hljs-string">&quot;#9FDFD9&quot;</span>, <span class="hljs-string">&quot;#A3B3E0&quot;</span>, <span class="hljs-string">&quot;#D0A3E0&quot;</span>, <span class="hljs-string">&quot;#E2A7CD&quot;</span>, <span class="hljs-string">&quot;#361712&quot;</span>, <span class="hljs-string">&quot;#1A3913&quot;</span>, <span class="hljs-string">&quot;#132B39&quot;</span>, <span class="hljs-string">&quot;#2D1339&quot;</span>, <span class="hljs-string">&quot;#391330&quot;</span>]<br>V_list = &#123;<span class="hljs-string">&quot;20210622_promE-GFP_C0074_Trim.mp4&quot;</span>: <span class="hljs-string">&#x27;/mnt/8A26661926660713/Vlog/upload/promE-GFP/20210622_promE-GFP_C0074_Trim.mp4&#x27;</span>,<br>    <span class="hljs-string">&quot;20220116-promE-v330035-298d-C0379_Trim-2.mp4&quot;</span>: <span class="hljs-string">&#x27;/mnt/8A26661926660713/Vlog/upload/promE-fru-IR-v330035/20220116-promE-v330035-298d-C0379_Trim-2.mp4&#x27;</span>,<br>    <span class="hljs-string">&quot;20220123C0394_Trim.mp4&quot;</span>: <span class="hljs-string">&#x27;/mnt/8A26661926660713/Vlog/upload/elav-GS-fru-IR-V330035/20220123C0394_Trim.mp4&#x27;</span>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Video_output</span>(<span class="hljs-params">Video, V_loc</span>):</span><br>  loc = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> os.listdir(<span class="hljs-string">&quot;data/csv&quot;</span>) <span class="hljs-keyword">if</span> Video <span class="hljs-keyword">in</span> i <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;json&quot;</span> <span class="hljs-keyword">in</span> i][<span class="hljs-number">0</span>]<br>  F = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data/csv/&quot;</span> + loc , <span class="hljs-string">&#x27;r&#x27;</span>).read()<br>  Dict = json.loads(F)<br>  trajectories = np.array([[Dict[i][ii][<span class="hljs-string">&#x27;body&#x27;</span>][:<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> np.sort([ii <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> Dict[<span class="hljs-string">&#x27;12&#x27;</span>].keys()])] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Dict.keys()])<br>  tr = tt.Trajectories.from_positions(trajectories)<br><br>  Num = <span class="hljs-number">0</span><br>  cap=cv2.VideoCapture(V_loc)<br>  fourcc = cv2.VideoWriter_fourcc(*<span class="hljs-string">&#x27;XVID&#x27;</span>)<br>  out = cv2.VideoWriter(Video + <span class="hljs-string">&quot;_30.avi&quot;</span>, fourcc, <span class="hljs-number">20.0</span>, (<span class="hljs-number">1920</span>,<span class="hljs-number">1080</span>))<br>  <br>  List = []<br>  <span class="hljs-keyword">while</span> Num &lt;= <span class="hljs-number">900</span>:<br>    ret,frame=cap.read()<br>    List += [trajectories[Num]]<br>    List = List[-<span class="hljs-number">100</span>:]<br>    <span class="hljs-keyword">for</span> Trace <span class="hljs-keyword">in</span> List:<br>      <span class="hljs-keyword">for</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Trace)):<br>        XY = np.array(Trace[<span class="hljs-built_in">id</span>]  * (<span class="hljs-number">1920</span>, <span class="hljs-number">1080</span>), dtype = <span class="hljs-built_in">int</span>)<br>        C = np.array(colors.to_rgba(Palette[<span class="hljs-built_in">id</span>]))[:-<span class="hljs-number">1</span>] * <span class="hljs-number">225</span><br>        cv2.putText(frame, <span class="hljs-string">&quot;.&quot;</span> ,(XY[<span class="hljs-number">0</span>], XY[<span class="hljs-number">1</span>]), cv2.FONT_HERSHEY_COMPLEX, <span class="hljs-number">1</span>, C, <span class="hljs-number">2</span>)<br><br>    Trace = List[-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Trace)):<br>      XY = np.array(Trace[<span class="hljs-built_in">id</span>]  * (<span class="hljs-number">1920</span>, <span class="hljs-number">1080</span>), dtype = <span class="hljs-built_in">int</span>)<br>      C = np.array(colors.to_rgba(Palette[<span class="hljs-built_in">id</span>]))[:-<span class="hljs-number">1</span>] * <span class="hljs-number">225</span><br>      cv2.putText(frame, <span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>) ,(XY[<span class="hljs-number">0</span>], XY[<span class="hljs-number">1</span>]), cv2.FONT_HERSHEY_COMPLEX, <span class="hljs-number">1</span>, C, <span class="hljs-number">2</span>)<br><br>    cv2.imshow(<span class="hljs-string">&quot;video&quot;</span>,frame)<br>    Num +=<span class="hljs-number">1</span> <br>    out.write(frame)<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">30</span>)&amp;<span class="hljs-number">0xFF</span>==<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>        cv2.destroyAllWindows()<br>        out.write(frame)<br>        <span class="hljs-keyword">break</span><br>  cv2.destroyAllWindows()<br>  out.write(frame)<br><br><br><br><span class="hljs-keyword">for</span> Video <span class="hljs-keyword">in</span> V_list.keys():<br>    Video_output(Video, V_list[Video])<br></code></pre></td></tr></table></figure></div><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">IdTrackerAI</summary>
    
    
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/categories/Bioinformatics/"/>
    
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/tags/Bioinformatics/"/>
    
    <category term="Machine Learning" scheme="https://karobben.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>VS code</title>
    <link href="https://karobben.github.io/2023/01/13/Linux/vscode/"/>
    <id>https://karobben.github.io/2023/01/13/Linux/vscode/</id>
    <published>2023-01-13T20:31:21.000Z</published>
    <updated>2023-03-02T06:56:56.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VS-code">VS code</h2><p>I am a loyal Atom user. But Atom has died and I have to move on.</p><h2 id="Hotkeys">Hotkeys</h2><p><a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf">Keyboard shortcuts for Linux</a></p><ul><li>Fold all: <code>ctrl+k</code> <code>ctrl+0</code></li><li>Release all: <code>ctrl+k</code> <code>ctrl+j</code></li><li>wrap text: <code>Alt+z</code></li></ul><h2 id="Plugins-List">Plugins List</h2><p><code>ctrl+shift+x</code>  to open and search plugins.</p><ul><li>Markdown Preview Enhance</li><li>R</li><li>Code Spell Checker</li></ul><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">VS code, ide for all</summary>
    
    
    
    <category term="Linux" scheme="https://karobben.github.io/categories/Linux/"/>
    
    <category term="Software" scheme="https://karobben.github.io/categories/Linux/Software/"/>
    
    
    <category term="Linux" scheme="https://karobben.github.io/tags/Linux/"/>
    
    <category term="Software" scheme="https://karobben.github.io/tags/Software/"/>
    
    <category term="IDE" scheme="https://karobben.github.io/tags/IDE/"/>
    
  </entry>
  
  <entry>
    <title>String DB</title>
    <link href="https://karobben.github.io/2023/01/09/Bioinfor/string-db/"/>
    <id>https://karobben.github.io/2023/01/09/Bioinfor/string-db/</id>
    <published>2023-01-10T03:01:48.000Z</published>
    <updated>2023-02-12T01:23:41.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="String-Database">String Database</h2><h3 id="Download-Specious-Network">Download Specious Network</h3><p><a href="https://string-db.org/cgi/download?sessionId=byDJhSpQeXPo&amp;species_text=Drosophila+melanogaster">Link to downloading the networks</a></p><p>An example of download files:</p><ul><li>Link file: <code>7227.protein.physical.links.full.v11.5.txt</code></li><li>Protein annotation: <code>7227.protein.info.v11.5.txt.gz</code></li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">TB &lt;- read.table(<span class="hljs-string">&quot;7227.protein.links.detailed.v11.5.txt&quot;</span>, header = <span class="hljs-built_in">T</span>)<br><br><span class="hljs-built_in">dim</span>(TB)<br>str(TB)<br></code></pre></td></tr></table></figure></div><pre>[1] 4343798      10'data.frame':4343798 obs. of  10 variables: $ protein1      : chr  "7227.FBpp0070001" "7227.FBpp0070001" "7227.FBpp0070001" "7227.FBpp0070001" ... $ protein2      : chr  "7227.FBpp0293850" "7227.FBpp0087873" "7227.FBpp0079990" "7227.FBpp0080090" ... $ neighborhood  : int  0 0 0 0 0 0 0 0 0 0 ... $ fusion        : int  0 0 0 0 0 0 0 0 0 0 ... $ cooccurence   : int  0 0 0 0 0 0 0 0 0 0 ... $ coexpression  : int  151 153 167 298 446 371 242 371 373 238 ... $ experimental  : int  0 0 0 0 0 0 0 0 0 0 ... $ database      : int  0 0 0 0 0 0 0 0 0 0 ... $ textmining    : int  0 0 0 0 0 0 0 0 0 0 ... $ combined_score: int  150 152 167 298 446 371 241 371 373 237 ...</pre><ul><li>Protein 1: Start protein</li><li>Protein 2: Connections from Protein 1 to protein 2</li><li>neighborhood: Physical neighborhood on the Genome</li><li>fusion: raw fusion score for COG mode (deprecated).</li><li>cooccurence: raw cooccurence score for COG mode (deprecated).</li><li>coexpression: expression patterns in a group of RNA-Seq are similar</li><li>experimental: experimental score (derived from experimental data, such as, affinity chromatography).</li><li>database: database score (derived from curated data of various databases).</li><li>textmining:  textmining score (derived from co-occurring mentioning of gene/protein names in abstracts).</li><li>combined_score: scores in total</li></ul><p>From:</p><ul><li><a href="https://string-db.org/help/database/#table-networkscore_types">Table: network.score_types</a></li><li><a href="https://string-db.org/help/getting_started/">Starting Point</a></li></ul><div class="admonition question"><p class="admonition-title">How do I select a reasonable score cut-off value for my analysis?</p><p>You can use the score cut-off to limit the number of interactions to those that have higher confidence and are more likely to be true positives. Setting the cutoff lower will increase coverage but also a fraction of false positives. You have to choose some <strong>arbitrary number</strong> based on the number of interactions you need for your analysis.</p></div><div class="admonition question"><p class="admonition-title">What is co-occurrence</p><p>A type of phylogenetic profile â the patterns of the presence or absence of orthologs across many organisms<a href="https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1002340">Â© Pan-Jun Kim, 2011</a></p></div><h3 id="Example-in-R">Example in R</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">library(ggplot2)<br>library(stringr)<br>library(igraph)<br>library(reshape2)<br><br>Anno &lt;-  read.csv(<span class="hljs-string">&quot;7227.protein.info.v11.5.txt&quot;</span>, sep =<span class="hljs-string">&#x27;\t&#x27;</span>, header = <span class="hljs-built_in">T</span>, <span class="hljs-built_in">quote</span> = <span class="hljs-string">&quot;&quot;</span>)<br>Anno[[<span class="hljs-number">1</span>]] &lt;- str_remove(Anno[[<span class="hljs-number">1</span>]], <span class="hljs-string">&quot;7227.&quot;</span>)<br><br>TB &lt;- read.table(<span class="hljs-string">&quot;7227.protein.links.detailed.v11.5.txt&quot;</span>, header = <span class="hljs-built_in">T</span>)<br>TB2 &lt;- TB[<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;protein1&quot;</span>, <span class="hljs-string">&quot;protein2&quot;</span>, <span class="hljs-string">&quot;fusion&quot;</span>, <span class="hljs-string">&quot;cooccurence&quot;</span>, <span class="hljs-string">&quot;coexpression&quot;</span>, <span class="hljs-string">&quot;experimental&quot;</span>)]<br>TB2$protein1 &lt;- str_remove(TB2$protein1, <span class="hljs-string">&quot;7227.&quot;</span>)<br>TB2$protein2 &lt;- str_remove(TB2$protein2, <span class="hljs-string">&quot;7227.&quot;</span>)<br><br>TB_df &lt;- apply(TB2[-<span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">2</span>)], <span class="hljs-number">1</span>, <span class="hljs-built_in">sum</span>)<br><br>N = <span class="hljs-number">18</span>+ which.max(density(TB_df[which(TB_df&gt;<span class="hljs-number">0</span>)])$y[-<span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">18</span>)])<br>X = density(TB_df[which(TB_df&gt;<span class="hljs-number">0</span>)])$x[N]<br>Y = density(TB_df[which(TB_df&gt;<span class="hljs-number">0</span>)])$y[N]<br><br>ggplot() + geom_density(aes(x= TB_df[which(TB_df&gt;<span class="hljs-number">0</span>)])) + theme_bw() +<br>    geom_vline(xintercept =  X) +<br>    geom_text(aes(x= X, y = Y, label= <span class="hljs-built_in">round</span>(X, <span class="hljs-number">2</span>)), hjust = <span class="hljs-number">0</span>, vjust = <span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># LIST</span><br><br>LIST &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;FBpp0070483&quot;</span>, <span class="hljs-string">&quot;FBpp0288697&quot;</span>, <span class="hljs-string">&quot;FBpp0304573&quot;</span>, <span class="hljs-string">&quot;FBpp0305946&quot;</span>, <span class="hljs-string">&quot;FBpp0300852&quot;</span>, <span class="hljs-string">&quot;FBpp0083503&quot;</span>, <span class="hljs-string">&quot;FBpp0297544&quot;</span>, <span class="hljs-string">&quot;FBpp0085082&quot;</span>, <span class="hljs-string">&quot;FBpp0288660&quot;</span>, <span class="hljs-string">&quot;FBpp0077739&quot;</span>, <span class="hljs-string">&quot;FBpp0081139&quot;</span>, <span class="hljs-string">&quot;FBpp0293081&quot;</span>, <span class="hljs-string">&quot;FBpp0079676&quot;</span>, <span class="hljs-string">&quot;FBpp0288515&quot;</span>, <span class="hljs-string">&quot;FBpp0297890&quot;</span>, <span class="hljs-string">&quot;FBpp0304299&quot;</span>, <span class="hljs-string">&quot;FBpp0306192&quot;</span>, <span class="hljs-string">&quot;FBpp0074686&quot;</span>, <span class="hljs-string">&quot;FBpp0070417&quot;</span>, <span class="hljs-string">&quot;FBpp0086911&quot;</span>, <span class="hljs-string">&quot;FBpp0289616&quot;</span>)<br><br><span class="hljs-comment"># Try threshold at 2000</span><br><span class="hljs-comment"># TB3 &lt;- TB2[which(TB_df&gt;1000),]</span><br>TB3 &lt;- rbind(TB2[TB2$protein1 %in% LIST,], TB2[TB2$protein2 %in% LIST,])<br>TB_df &lt;- apply(TB3[-<span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">2</span>)], <span class="hljs-number">1</span>, <span class="hljs-built_in">sum</span>)<br>TB3 &lt;- TB3[which(TB_df&gt;<span class="hljs-number">150</span>),]<br><span class="hljs-built_in">length</span>(unique(<span class="hljs-built_in">c</span>(TB3$protein1, TB3$protein2 )))<br><span class="hljs-comment"># 173; we have 173 unique proteins</span><br><br><br><span class="hljs-comment"># plot it with igraph</span><br>TB3$CN = <span class="hljs-number">1</span><br>TB4 &lt;- reshape(TB3[<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;protein1&quot;</span>, <span class="hljs-string">&quot;protein2&quot;</span>, <span class="hljs-string">&quot;CN&quot;</span>)], idvar = <span class="hljs-string">&quot;protein1&quot;</span>, timevar = <span class="hljs-string">&quot;protein2&quot;</span>, direction = <span class="hljs-string">&quot;wide&quot;</span>)<br>rownames(TB4) &lt;- TB4[[<span class="hljs-number">1</span>]]<br>TB4 &lt;- TB4[-<span class="hljs-number">1</span>]<br>colnames(TB4) &lt;- str_remove(colnames(TB4), <span class="hljs-string">&quot;CN.&quot;</span>)<br>TB4[<span class="hljs-built_in">is.na</span>(TB4)] &lt;- <span class="hljs-number">0</span><br><br>network=graph_from_adjacency_matrix(as.matrix(TB4) , mode=<span class="hljs-string">&#x27;undirected&#x27;</span>, diag=<span class="hljs-built_in">T</span> )<br><br>TB4.Size &lt;- as.data.frame(table(<span class="hljs-built_in">c</span>(TB3$protein1, TB3$protein2 )))<br>TB4.Size &lt;- TB4.Size[match(colnames(TB4),TB4.Size$Var1),]<br>TB4.Size$Anno &lt;- Anno[[<span class="hljs-number">2</span>]][match(TB4.Size$Var1,Anno[[<span class="hljs-number">1</span>]])]<br>TB4.Size$Anno2 = <span class="hljs-string">&quot;&quot;</span><br>TB4.Size$Anno2[which(TB4.Size$Freq&gt;=<span class="hljs-number">100</span>)] &lt;- TB4.Size$Anno[which(TB4.Size$Freq&gt;=<span class="hljs-number">100</span>)]<br><span class="hljs-comment">##DefauTB4.Size$Anno2 = &quot;&quot;</span><br>set.seed(<span class="hljs-number">1</span>)<br>par(mar=<span class="hljs-built_in">c</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>plot(network,    <br>    vertex.size= <span class="hljs-built_in">log</span>(TB4.Size$Freq +<span class="hljs-number">1</span>),<br>    vertex.label = TB4.Size$Anno2 ,<br>    vertex.label.size= <span class="hljs-built_in">log</span>(TB4.Size$Freq +<span class="hljs-number">1</span>) ,<br>    vertex.frame.color= adjustcolor(<span class="hljs-string">&quot;salmon&quot;</span>, alpha.f = <span class="hljs-number">.5</span>),<br>    vertex.color = adjustcolor(<span class="hljs-string">&quot;salmon&quot;</span>, alpha.f = <span class="hljs-number">.5</span>),<br>    edge.color = adjustcolor(<span class="hljs-string">&quot;grey&quot;</span>, alpha.f = <span class="hljs-number">.1</span>), layout = layout_nicely)<br><br>lay = layout_with_graphopt(network)<br>R = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">abs</span>(lay))<br>lay_Y = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">asin</span>(<span class="hljs-built_in">sin</span>(lay[,<span class="hljs-number">2</span>]/<span class="hljs-built_in">sqrt</span>(lay[,<span class="hljs-number">1</span>]^<span class="hljs-number">2</span> + lay[,<span class="hljs-number">2</span>]^<span class="hljs-number">2</span>))) * R)<br>lay_X = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">acos</span>(<span class="hljs-built_in">cos</span>(lay[,<span class="hljs-number">1</span>]/<span class="hljs-built_in">sqrt</span>(lay[,<span class="hljs-number">1</span>]^<span class="hljs-number">2</span> + lay[,<span class="hljs-number">2</span>]^<span class="hljs-number">2</span>))) * R)<br>lay_X[lay[,<span class="hljs-number">1</span>]&lt;<span class="hljs-number">0</span>] &lt;- lay_X[lay[,<span class="hljs-number">1</span>]&lt;<span class="hljs-number">0</span>] * -<span class="hljs-number">1</span><br>lay_Y[lay[,<span class="hljs-number">2</span>]&lt;<span class="hljs-number">0</span>] &lt;- lay_Y[lay[,<span class="hljs-number">2</span>]&lt;<span class="hljs-number">0</span>] * -<span class="hljs-number">1</span><br><br>LX &lt;- 2*(lay_X -lay[,<span class="hljs-number">1</span>]) <span class="hljs-comment">#+ lay[,1]</span><br>LY &lt;- 2*(lay_Y -lay[,<span class="hljs-number">2</span>]) <span class="hljs-comment">#+ lay[,2]</span><br><br>LAY &lt;- matrix(<span class="hljs-built_in">c</span>(LX, LY) , ncol = <span class="hljs-number">2</span>)<br><span class="hljs-comment">#layout_with_mds</span><br><span class="hljs-comment">#layout_nicely</span><br><span class="hljs-comment">#layout_with_graphopt</span><br></code></pre></td></tr></table></figure></div><table><thead><tr><th style="text-align:center"><img src="https://s1.ax1x.com/2023/01/10/pSejUfS.png" alt="string-db Density plot"></th></tr></thead><tbody></tbody></table><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">STRING database is a web-based tool that provides information on protein-protein interactions, including physical and functional associations. It consolidates and scores data from multiple sources, making it a valuable resource for functional annotation and network analysis in the life sciences. &lt;a title=&#39;ChatGPT&#39;&gt;Who sad this?&lt;/a&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Cellpose</title>
    <link href="https://karobben.github.io/2022/12/21/Bioinfor/cellpose/"/>
    <id>https://karobben.github.io/2022/12/21/Bioinfor/cellpose/</id>
    <published>2022-12-21T23:55:36.000Z</published>
    <updated>2023-03-04T18:47:53.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CellPose">CellPose</h2><p>CellPose is an awesome machine learning-based tool that could segment cells very easily. The pre-trained model could suit multiple scenarios and fit the basic usages. And it can do more than cell segmentation (Though the cell pose looks fancy, I still didnât know who to work with the results.) To learn more, please read the <a href="https://cellpose.readthedocs.io/en/latest/index.html">documentation</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> cellpose <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">from</span> cellpose.io <span class="hljs-keyword">import</span> imread<br><br><span class="hljs-comment"># model_type=&#x27;cyto&#x27; or model_type=&#x27;nuclei&#x27;</span><br>model = models.Cellpose(gpu=<span class="hljs-literal">False</span>, model_type=<span class="hljs-string">&#x27;cyto&#x27;</span>)<br><br>files = [<span class="hljs-string">&#x27;img0.tif&#x27;</span>, <span class="hljs-string">&#x27;img1.tif&#x27;</span>]<br>imgs = [imread(f) <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> files]<br>masks, flows, styles, diams = model.<span class="hljs-built_in">eval</span>(imgs, diameter=<span class="hljs-literal">None</span>, channels=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>                                         flow_threshold=<span class="hljs-number">0.4</span>, do_3D=<span class="hljs-literal">False</span>)<br><br><br><br></code></pre></td></tr></table></figure></div><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">A quick note of how to use the cellpose to do cell segmentation</summary>
    
    
    
    <category term="Biology" scheme="https://karobben.github.io/categories/Biology/"/>
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/"/>
    
    <category term="Software" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Software/"/>
    
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/tags/Bioinformatics/"/>
    
    <category term="Machine Learning" scheme="https://karobben.github.io/tags/Machine-Learning/"/>
    
    <category term="Image" scheme="https://karobben.github.io/tags/Image/"/>
    
  </entry>
  
  <entry>
    <title>TCGA Database with R</title>
    <link href="https://karobben.github.io/2022/12/06/Bioinfor/tcga/"/>
    <id>https://karobben.github.io/2022/12/06/Bioinfor/tcga/</id>
    <published>2022-12-06T19:02:44.000Z</published>
    <updated>2023-02-12T01:24:43.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCGA-Database">TCGA Database</h2><p>Reference:</p><ul><li><a href="https://bioconductor.org/packages/release/bioc/vignettes/TCGAbiolinks/inst/doc/download_prepare.html#Downloading_and_preparing_data_for_analysis">Documentation</a></li><li><a href="https://support.bioconductor.org/p/133576/">Bioconductor</a></li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">library(TCGAbiolinks)<br>library(SummarizedExperiment)<br>library(dplyr)<br>library(DT)<br><br>projects &lt;- TCGAbiolinks:::getGDCprojects()$project_id<br>projects &lt;- projects[grepl(<span class="hljs-string">&#x27;^TCGA&#x27;</span>,projects,perl=<span class="hljs-built_in">T</span>)]<br><br>query &lt;- GDCquery(project = projects,<br>                  data.category = <span class="hljs-string">&quot;Transcriptome Profiling&quot;</span>,  <br>                  data.type = <span class="hljs-string">&quot;Gene Expression Quantification&quot;</span>,  <br>                  workflow.type = <span class="hljs-string">&quot;STAR - Counts&quot;</span>)<br><span class="hljs-comment"># counts &lt;- GDCprepare(query,save = TRUE, save.filename = &quot;all_tumor_htseq_raw_counts.rda&quot;)</span><br>data &lt;- GDCprepare(query = query)<br><br><span class="hljs-comment"># download and fetch the data from local</span><br>GDCdownload(query = query,<br>              method = <span class="hljs-string">&quot;api&quot;</span>,<br>              files.per.chunk = <span class="hljs-number">60</span>,<br>              directory = <span class="hljs-string">&quot;mRNA&quot;</span>)<br><br>expdat &lt;- GDCprepare(query = query,<br>                       directory = <span class="hljs-string">&quot;mRNA&quot;</span>)<br></code></pre></td></tr></table></figure></div><p>If you download successfully, you would see the red codes below.</p><code><pre style="background-color:white; color:red">--------------------------------------o GDCquery: Searching in GDC database--------------------------------------Genome of reference: hg38--------------------------------------------oo Accessing GDC. This might take a while...--------------------------------------------ooo Project: TCGA-ESCAooo Project: TCGA-SARCooo Project: TCGA-CESCooo Project: TCGA-UCEC--------------------oo Filtering results--------------------ooo By data.typeooo By workflow.type----------------oo Checking data----------------ooo Checking if there are duplicated casesooo Checking if there are results for the query-------------------o Preparing output-------------------</pre></code><div class="admonition note"><p class="admonition-title">Check the group and counts information</p></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Check the mate information</span><br>as.data.frame(colData(data))<br><span class="hljs-comment"># Check Exression counts</span><br>assay(data)[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>,<span class="hljs-number">1</span>:<span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure></div><pre>TCGA-DX-A6Z0-01A-13R-A36F-07 TCGA-X2-A95T-01A-11R-A37L-07 TCGA-DX-A6BF-01A-11R-A30C-07 TCGA-DX-A1L1-01A-11R-A24X-07ENSG00000000003.15                         3415                          861                          316                         4004ENSG00000000005.6                           340                            4                           14                            0ENSG00000000419.13                         2296                          905                          938                         3935ENSG00000000457.14                          594                          454                           85                          595ENSG00000000460.17                          626                          318                           62                          458ENSG00000000938.13                          259                          138                          271                          381</pre><style>pre {  background-color:#38393d;  color: #5fd381;}</style><div class="admonition note"><p class="admonition-title">why download data</p></div><p>Sometimes, you may receive errors:</p><pre>Error in GDCquery(project = projects[3], data.category = "Transcriptome Profiling",  :  Please set a valid workflow.type argument from the list below:  => STAR - Counts</pre><p>You canât turn the âGDCprepareâ results into data directly. You need to download it first and convert it by âGDCprepareâ. See details in <a href="https://github.com/BioinformaticsFMRP/TCGAbiolinks/issues/153">github</a></p><h2 id="Differential-Expression-Genes">Differential Expression Genes</h2><p>Reference: <a href="https://rdrr.io/bioc/TCGAbiolinks/f/vignettes/analysis.Rmd">rdrr.io</a></p><p>I am failed to get the expression matrix by using <code>GDCprepare</code>. According to [Â© g27182818, 2022], it caused by STAR-Count files has more infor than <code>GDCprepare</code> need. What ever, a modified solution could be like codes below:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">library(<span class="hljs-string">&#x27;TCGAbiolinks&#x27;</span>)<br>library(stringr)<br><br>project_name &lt;- <span class="hljs-string">&quot;TCGA-CHOL&quot;</span><br><br><span class="hljs-comment"># Defines the query to the GDC</span><br>query &lt;- GDCquery(project = project_name,<br>                  data.category = <span class="hljs-string">&quot;Transcriptome Profiling&quot;</span>,<br>                  data.type = <span class="hljs-string">&quot;Gene Expression Quantification&quot;</span>,<br>                  experimental.strategy = <span class="hljs-string">&quot;RNA-Seq&quot;</span>,<br>                  workflow.type = <span class="hljs-string">&quot;STAR - Counts&quot;</span>)<br><br><span class="hljs-comment"># Get metadata matrix</span><br>metadata &lt;- query[[<span class="hljs-number">1</span>]][[<span class="hljs-number">1</span>]]<br><br><span class="hljs-comment"># Get main directory where data is stored</span><br>main_dir &lt;- file.path(<span class="hljs-string">&quot;mRNA&quot;</span>, project_name)<br><span class="hljs-comment"># Get file list of downloaded files</span><br>file_list &lt;- file.path(<span class="hljs-string">&quot;mRNA&quot;</span>, project_name,list.files(main_dir,recursive = <span class="hljs-literal">TRUE</span>)) <br><br><span class="hljs-comment"># Read first downloaded to get gene names</span><br>test_tab &lt;- read.table(file = file_list[<span class="hljs-number">1</span>], sep = <span class="hljs-string">&#x27;\t&#x27;</span>, header = <span class="hljs-literal">TRUE</span>)<br><span class="hljs-comment"># Delete header lines that don&#x27;t contain usefull information</span><br>test_tab &lt;- test_tab[-<span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">4</span>),]<br><span class="hljs-comment"># STAR counts and tpm datasets</span><br>tpm_data_frame &lt;- data.frame(test_tab[,<span class="hljs-number">1</span>])<br>count_data_frame &lt;- data.frame(test_tab[,<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># Append cycle to get the complete matrix</span><br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(file_list))) &#123;<br>  <span class="hljs-comment"># Read table</span><br>  test_tab &lt;- read.table(file = file_list[i], sep = <span class="hljs-string">&#x27;\t&#x27;</span>, header = <span class="hljs-literal">TRUE</span>)<br>  <span class="hljs-comment"># Delete not useful lines</span><br>  test_tab &lt;- test_tab[-<span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">4</span>),]<br>  <span class="hljs-comment"># Column bind of tpm and counts data</span><br>  tpm_data_frame &lt;- cbind(tpm_data_frame, test_tab[,<span class="hljs-number">7</span>])<br>  count_data_frame &lt;- cbind(count_data_frame, test_tab[,<span class="hljs-number">4</span>])<br>  <span class="hljs-comment"># Print progres from 0 to 1</span><br>  print(i/<span class="hljs-built_in">length</span>(file_list))<br>&#125;<br><br>ID_list &lt;- as.data.frame(str_split_fixed(file_list, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">7</span>))[[<span class="hljs-number">6</span>]]<br><br>row.names(count_data_frame) &lt;- count_data_frame[[<span class="hljs-number">1</span>]]<br>count_data_frame &lt;- count_data_frame[-<span class="hljs-number">1</span>]<br>colnames(count_data_frame) &lt;- metadata$cases[match(ID_list, metadata$id)]<br><br>N_control = <span class="hljs-built_in">length</span>(which(<span class="hljs-built_in">as.numeric</span>(gsub(<span class="hljs-string">&quot;[^0-9.-]&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, as.data.frame(str_split_fixed(metadata$cases, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-number">5</span>))[[<span class="hljs-number">4</span>]])) &gt;= <span class="hljs-number">10</span>))<br><br></code></pre></td></tr></table></figure></div><h2 id="The-meaning-of-the-barcode">The meaning of the barcode</h2><table><thead><tr><th style="text-align:center"><img src="https://docs.gdc.cancer.gov/Encyclopedia/pages/images/barcode.png" alt=""></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://docs.gdc.cancer.gov/Encyclopedia/pages/TCGA_Barcode/">Â© NIH, GDC</a></td></tr></tbody></table><table><thead><tr><th style="text-align:left">Label</th><th style="text-align:left">Identifier for</th><th style="text-align:left">Value</th><th style="text-align:left">Value Description</th><th style="text-align:left">Possible Values</th></tr></thead><tbody><tr><td style="text-align:left">Analyte</td><td style="text-align:left">Molecular type of analyte for analysis</td><td style="text-align:left">D</td><td style="text-align:left">The analyte is a DNA sample</td><td style="text-align:left">See Code Tables Report</td></tr><tr><td style="text-align:left">Plate</td><td style="text-align:left">Order of plate in a sequence of 96-well plates</td><td style="text-align:left">182</td><td style="text-align:left">The 182nd plate</td><td style="text-align:left">4-digit alphanumeric value</td></tr><tr><td style="text-align:left">Portion</td><td style="text-align:left">Order of portion in a sequence of 100 - 120 mg sample portions</td><td style="text-align:left">1</td><td style="text-align:left">The first portion of the sample</td><td style="text-align:left">01-99</td></tr><tr><td style="text-align:left">Vial</td><td style="text-align:left">Order of sample in a sequence of samples</td><td style="text-align:left">C</td><td style="text-align:left">The third vial</td><td style="text-align:left">A to Z</td></tr><tr><td style="text-align:left">Project</td><td style="text-align:left">Project name</td><td style="text-align:left">TCGA</td><td style="text-align:left">TCGA project</td><td style="text-align:left">TCGA</td></tr><tr><td style="text-align:left">Sample</td><td style="text-align:left">Sample type</td><td style="text-align:left">1</td><td style="text-align:left">A solid tumor</td><td style="text-align:left">Tumor types range from 01 - 09, normal types from 10 - 19 and control samples from 20 - 29. See Code Tables Report for a complete list of sample codes</td></tr><tr><td style="text-align:left">Center</td><td style="text-align:left">Sequencing or characterization center that will receive the aliquot for analysis</td><td style="text-align:left">1</td><td style="text-align:left">The Broad InstituteGCC</td><td style="text-align:left">See Code Tables Report</td></tr><tr><td style="text-align:left">Participant</td><td style="text-align:left">Study participant</td><td style="text-align:left">1</td><td style="text-align:left">The first participant from MD Anderson for GBM study</td><td style="text-align:left">Any alpha-numeric value</td></tr><tr><td style="text-align:left">TSS</td><td style="text-align:left">Tissue source site</td><td style="text-align:left">2</td><td style="text-align:left">GBM (brain tumor) sample from MD Anderson</td><td style="text-align:left">See Code Tables Report</td></tr></tbody></table><p>So, the most important information for us is the sample type: <mark>Tumor types range from 01 - 09, normal types from 10 - 19 and control samples from 20 - 29. See Code Tables Report for a complete list of sample codes</mark></p><h2 id="Abbreviations-of-projects">Abbreviations of projects</h2><table><thead><tr><th style="text-align:left">Study Abbreviation</th><th style="text-align:left">Study Name</th></tr></thead><tbody><tr><td style="text-align:left">LAML</td><td style="text-align:left">Acute Myeloid Leukemia</td></tr><tr><td style="text-align:left">ACC</td><td style="text-align:left">Adrenocortical carcinoma</td></tr><tr><td style="text-align:left">BLCA</td><td style="text-align:left">Bladder Urothelial Carcinoma</td></tr><tr><td style="text-align:left">LGG</td><td style="text-align:left">Brain Lower Grade Glioma</td></tr><tr><td style="text-align:left">BRCA</td><td style="text-align:left">Breast invasive carcinoma</td></tr><tr><td style="text-align:left">CESC</td><td style="text-align:left">Cervical squamous cell carcinoma and endocervical adenocarcinoma</td></tr><tr><td style="text-align:left">CHOL</td><td style="text-align:left">Cholangiocarcinoma</td></tr><tr><td style="text-align:left">LCML</td><td style="text-align:left">Chronic Myelogenous Leukemia</td></tr><tr><td style="text-align:left">COAD</td><td style="text-align:left">Colon adenocarcinoma</td></tr><tr><td style="text-align:left">CNTL</td><td style="text-align:left">Controls</td></tr><tr><td style="text-align:left">ESCA</td><td style="text-align:left">Esophageal carcinoma</td></tr><tr><td style="text-align:left">FPPP</td><td style="text-align:left">FFPE Pilot Phase II</td></tr><tr><td style="text-align:left">GBM</td><td style="text-align:left">Glioblastoma multiforme</td></tr><tr><td style="text-align:left">HNSC</td><td style="text-align:left">Head and Neck squamous cell carcinoma</td></tr><tr><td style="text-align:left">KICH</td><td style="text-align:left">Kidney Chromophobe</td></tr><tr><td style="text-align:left">KIRC</td><td style="text-align:left">Kidney renal clear cell carcinoma</td></tr><tr><td style="text-align:left">KIRP</td><td style="text-align:left">Kidney renal papillary cell carcinoma</td></tr><tr><td style="text-align:left">LIHC</td><td style="text-align:left">Liver hepatocellular carcinoma</td></tr><tr><td style="text-align:left">LUAD</td><td style="text-align:left">Lung adenocarcinoma</td></tr><tr><td style="text-align:left">LUSC</td><td style="text-align:left">Lung squamous cell carcinoma</td></tr><tr><td style="text-align:left">DLBC</td><td style="text-align:left">Lymphoid Neoplasm Diffuse Large B-cell Lymphoma</td></tr><tr><td style="text-align:left">MESO</td><td style="text-align:left">Mesothelioma</td></tr><tr><td style="text-align:left">MISC</td><td style="text-align:left">Miscellaneous</td></tr><tr><td style="text-align:left">OV</td><td style="text-align:left">Ovarian serous cystadenocarcinoma</td></tr><tr><td style="text-align:left">PAAD</td><td style="text-align:left">Pancreatic adenocarcinoma</td></tr><tr><td style="text-align:left">PCPG</td><td style="text-align:left">Pheochromocytoma and Paraganglioma</td></tr><tr><td style="text-align:left">PRAD</td><td style="text-align:left">Prostate adenocarcinoma</td></tr><tr><td style="text-align:left">READ</td><td style="text-align:left">Rectum adenocarcinoma</td></tr><tr><td style="text-align:left">SARC</td><td style="text-align:left">Sarcoma</td></tr><tr><td style="text-align:left">SKCM</td><td style="text-align:left">Skin Cutaneous Melanoma</td></tr><tr><td style="text-align:left">STAD</td><td style="text-align:left">Stomach adenocarcinoma</td></tr><tr><td style="text-align:left">TGCT</td><td style="text-align:left">Testicular Germ Cell Tumors</td></tr><tr><td style="text-align:left">THYM</td><td style="text-align:left">Thymoma</td></tr><tr><td style="text-align:left">THCA</td><td style="text-align:left">Thyroid carcinoma</td></tr><tr><td style="text-align:left">UCS</td><td style="text-align:left">Uterine Carcinosarcoma</td></tr><tr><td style="text-align:left">UCEC</td><td style="text-align:left">Uterine Corpus Endometrial Carcinoma</td></tr><tr><td style="text-align:left">UVM</td><td style="text-align:left">Uveal Melanoma</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">TCGA Database usage. R packages, TCGA related API</summary>
    
    
    
    <category term="Biology" scheme="https://karobben.github.io/categories/Biology/"/>
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/"/>
    
    <category term="Database" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Database/"/>
    
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/tags/Bioinformatics/"/>
    
    <category term="api" scheme="https://karobben.github.io/tags/api/"/>
    
    <category term="TCGA" scheme="https://karobben.github.io/tags/TCGA/"/>
    
  </entry>
  
  <entry>
    <title>flybase api</title>
    <link href="https://karobben.github.io/2022/12/05/Python/flybase-api/"/>
    <id>https://karobben.github.io/2022/12/05/Python/flybase-api/</id>
    <published>2022-12-05T20:49:59.000Z</published>
    <updated>2023-02-12T01:24:00.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flybase-api">Flybase api</h2><p><a href="https://flybase.github.io/api/swagger-ui/#/Chado/getChadoXmlById">API documentation</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br><br>ID = <span class="hljs-string">&quot;FBgn0051624&quot;</span><br>url = <span class="hljs-string">&quot;https://api.flybase.org/api/v1.0/chadoxml/&quot;</span> + ID<br>html = urlopen(url)<br>soup = BeautifulSoup(html, features=<span class="hljs-string">&#x27;xml&#x27;</span>)<br><br>Orth_all = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span>  soup.find_all(<span class="hljs-string">&quot;feature_relationship&quot;</span>) <span class="hljs-keyword">if</span> i.find(<span class="hljs-string">&#x27;name&#x27;</span>).get_text() == <span class="hljs-string">&#x27;orthologous_to&#x27;</span>]<br>Orth_Homo = [i  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Orth_all <span class="hljs-keyword">if</span> i.find(<span class="hljs-string">&#x27;genus&#x27;</span>).get_text() == <span class="hljs-string">&#x27;Homo&#x27;</span>]<br>Gene_Syambol = [i.find_all(<span class="hljs-string">&#x27;name&#x27;</span>)[<span class="hljs-number">2</span>].get_text().split(<span class="hljs-string">&#x27;\\&#x27;</span>)[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Orth_Homo]<br>Gene_Ensembl = [[i.find(<span class="hljs-string">&#x27;accession&#x27;</span>).get_text() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ii.find_all(<span class="hljs-string">&quot;dbxref_id&quot;</span>) <span class="hljs-keyword">if</span> i.find(<span class="hljs-string">&#x27;name&#x27;</span>).get_text() == <span class="hljs-string">&quot;Ensembl_Homo_sapiens&quot;</span>][<span class="hljs-number">0</span>]  <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> Orth_Homo]<br></code></pre></td></tr></table></figure></div><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">flybase api</summary>
    
    
    
    <category term="Biology" scheme="https://karobben.github.io/categories/Biology/"/>
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/"/>
    
    <category term="Database" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Database/"/>
    
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/tags/Bioinformatics/"/>
    
    <category term="api" scheme="https://karobben.github.io/tags/api/"/>
    
    <category term="flybase" scheme="https://karobben.github.io/tags/flybase/"/>
    
  </entry>
  
  <entry>
    <title>Brownian Motion</title>
    <link href="https://karobben.github.io/2022/11/23/Python/brownian-motion/"/>
    <id>https://karobben.github.io/2022/11/23/Python/brownian-motion/</id>
    <published>2022-11-23T18:56:12.000Z</published>
    <updated>2023-03-02T19:51:56.590Z</updated>
    
    <content type="html"><![CDATA[<p>Codes from: <a href="https://towardsdatascience.com/brownian-motion-with-python-9083ebc46ff0">Tirthajyoti Sarkar</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Brownian</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    A Brownian motion class constructor</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,x0=<span class="hljs-number">0</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Init class</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">assert</span> (<span class="hljs-built_in">type</span>(x0)==<span class="hljs-built_in">float</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">type</span>(x0)==<span class="hljs-built_in">int</span> <span class="hljs-keyword">or</span> x0 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>), <span class="hljs-string">&quot;Expect a float or None for the initial value&quot;</span><br>        self.x0 = <span class="hljs-built_in">float</span>(x0)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_random_walk</span>(<span class="hljs-params">self,n_step=<span class="hljs-number">100</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Generate motion by random walk</span><br><span class="hljs-string">        Arguments:</span><br><span class="hljs-string">            n_step: Number of steps</span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            A NumPy array with `n_steps` points</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># Warning about the small number of steps</span><br>        <span class="hljs-keyword">if</span> n_step &lt; <span class="hljs-number">30</span>:<br>            print(<span class="hljs-string">&quot;WARNING! The number of steps is small. It may not generate a good stochastic process sequence!&quot;</span>)<br>        w = np.ones(n_step)*self.x0<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n_step):<br>            <span class="hljs-comment"># Sampling from the Normal distribution with probability 1/2</span><br>            yi = np.random.choice([<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>])<br>            <span class="hljs-comment"># Weiner process</span><br>            w[i] = w[i-<span class="hljs-number">1</span>]+(yi/np.sqrt(n_step))<br>        <span class="hljs-keyword">return</span> w<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_normal</span>(<span class="hljs-params">self,n_step=<span class="hljs-number">100</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Generate motion by drawing from the Normal distribution</span><br><span class="hljs-string">        Arguments:</span><br><span class="hljs-string">            n_step: Number of steps</span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            A NumPy array with `n_steps` points</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> n_step &lt; <span class="hljs-number">30</span>:<br>            print(<span class="hljs-string">&quot;WARNING! The number of steps is small. It may not generate a good stochastic process sequence!&quot;</span>)<br>        w = np.ones(n_step)*self.x0<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n_step):<br>            <span class="hljs-comment"># Sampling from the Normal distribution</span><br>            yi = np.random.normal()<br>            <span class="hljs-comment"># Weiner process</span><br>            w[i] = w[i-<span class="hljs-number">1</span>]+(yi/np.sqrt(n_step))<br>        <span class="hljs-keyword">return</span> w<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">stock_price</span>(<span class="hljs-params"></span></span><br><span class="hljs-function"><span class="hljs-params">                    self,</span></span><br><span class="hljs-function"><span class="hljs-params">                    s0=<span class="hljs-number">100</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                    mu=<span class="hljs-number">0.2</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                    sigma=<span class="hljs-number">0.68</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                    deltaT=<span class="hljs-number">52</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                    dt=<span class="hljs-number">0.1</span></span></span><br><span class="hljs-function"><span class="hljs-params">                    </span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Models a stock price S(t) using the Weiner process W(t) as</span><br><span class="hljs-string">        `S(t) = S(0).exp&#123;(mu-(sigma^2/2).t)+sigma.W(t)&#125;`</span><br><span class="hljs-string">        Arguments:</span><br><span class="hljs-string">            s0: Iniital stock price, default 100</span><br><span class="hljs-string">            mu: &#x27;Drift&#x27; of the stock (upwards or downwards), default 1</span><br><span class="hljs-string">            sigma: &#x27;Volatility&#x27; of the stock, default 1</span><br><span class="hljs-string">            deltaT: The time period for which the future prices are computed, default 52 (as in 52 weeks)</span><br><span class="hljs-string">            dt (optional): The granularity of the time-period, default 0.1</span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            s: A NumPy array with the simulated stock prices over the time-period deltaT</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        n_step = <span class="hljs-built_in">int</span>(deltaT/dt)<br>        time_vector = np.linspace(<span class="hljs-number">0</span>,deltaT,num=n_step)<br>        <span class="hljs-comment"># Stock variation</span><br>        stock_var = (mu-(sigma**<span class="hljs-number">2</span>/<span class="hljs-number">2</span>))*time_vector<br>        <span class="hljs-comment"># Forcefully set the initial value to zero for the stock price simulation</span><br>        self.x0=<span class="hljs-number">0</span><br>        <span class="hljs-comment"># Weiner process (calls the `gen_normal` method)</span><br>        weiner_process = sigma*self.gen_normal(n_step)<br>        <span class="hljs-comment"># Add two time series, take exponent, and multiply by the initial stock price</span><br>        s = s0*(np.exp(stock_var+weiner_process))<br><br>        <span class="hljs-keyword">return</span> s<br><br>b1 = Brownian()<br>b2 = Brownian()<br><br>x = b1.gen_normal(<span class="hljs-number">10000</span>)<br>y = b2.gen_normal(<span class="hljs-number">10000</span>)<br><br>colors = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(x))<br><br>plt.plot(x,y, color = <span class="hljs-string">&#x27;grey&#x27;</span>)<br>plt.scatter(x,y, c=colors, cmap=<span class="hljs-string">&#x27;viridis&#x27;</span>)<br>xmax,xmin,ymax,ymin = x.<span class="hljs-built_in">max</span>(),x.<span class="hljs-built_in">min</span>(),y.<span class="hljs-built_in">max</span>(),y.<span class="hljs-built_in">min</span>()<br>scale_factor = <span class="hljs-number">1.25</span><br>xmax,xmin,ymax,ymin = xmax*scale_factor,xmin*scale_factor,ymax*scale_factor,ymin*scale_factor<br>plt.xlim(xmin,xmax)<br>plt.ylim(ymin,ymax)<br>plt.show()<br></code></pre></td></tr></table></figure></div><p><img src="https://s1.ax1x.com/2023/03/02/ppFic0U.png" alt="network path find"></p><h1>Use Opencv to Show the Animation</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Position_update</span>(<span class="hljs-params">Point1</span>):</span><br>    yi1 = np.random.normal()*<span class="hljs-number">10</span><br>    yi2 = np.random.normal()*<span class="hljs-number">10</span><br>    Point1[<span class="hljs-number">0</span>] =  Point1[<span class="hljs-number">0</span>] + <span class="hljs-built_in">int</span>(yi1/np.sqrt(<span class="hljs-number">30</span>))<br>    Point1[<span class="hljs-number">1</span>] =  Point1[<span class="hljs-number">1</span>] + <span class="hljs-built_in">int</span>(yi2/np.sqrt(<span class="hljs-number">30</span>))<br>    <span class="hljs-keyword">return</span> Point1<br><br>MAP = np.zeros([<span class="hljs-number">1500</span>, <span class="hljs-number">1500</span>, <span class="hljs-number">3</span>], dtype=np.uint8)<br>MAP[MAP==<span class="hljs-number">0</span>] = <span class="hljs-number">255</span><br><br>Point = &#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>    Point.update(&#123;i:[<span class="hljs-number">750</span>,<span class="hljs-number">750</span>]&#125;)<br><br>b1 = Brownian(<span class="hljs-number">1</span>)<br>b2 = Brownian(<span class="hljs-number">1</span>)<br><br>fourcc = cv2.VideoWriter_fourcc(*<span class="hljs-string">&#x27;XVID&#x27;</span>)<br>out = cv2.VideoWriter(<span class="hljs-string">&#x27;output.avi&#x27;</span>,fourcc, <span class="hljs-number">20.0</span>, (<span class="hljs-number">1080</span>,<span class="hljs-number">1080</span>))<br><br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">True</span>):<br>    MAP = np.zeros([<span class="hljs-number">1080</span>, <span class="hljs-number">1080</span>, <span class="hljs-number">3</span>], dtype=np.uint8)<br>    MAP[MAP==<span class="hljs-number">0</span>] = <span class="hljs-number">255</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>        Point[i]=Position_update(Point[i])<br>        cv2.circle(MAP, Point[i], <span class="hljs-number">3</span>, [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>], <span class="hljs-number">2</span>)<br>    cv2.imshow(<span class="hljs-string">&quot;video&quot;</span>,MAP)<br>    out.write(MAP)<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">25</span>)&amp;<span class="hljs-number">0xFF</span>==<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>       cv2.destroyAllWindows()<br>       <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure></div><p>Detection</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-comment"># Map Edge detection</span><br><br><span class="hljs-comment"># Direction Reverse</span><br><br>Point1 = &#123;<br>    <span class="hljs-string">&quot;O&quot;</span>:[<span class="hljs-number">200</span>,<span class="hljs-number">200</span>],<br>    <span class="hljs-string">&quot;N&quot;</span>:[<span class="hljs-number">20</span>,<span class="hljs-number">10</span>],<br>    <span class="hljs-string">&quot;Dit&quot;</span>:[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],<br>    <span class="hljs-string">&quot;Sp&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Map_bonce</span>(<span class="hljs-params">Point, X, Y</span>):</span><br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] &lt;<span class="hljs-number">0</span>:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] *= -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] &lt;<span class="hljs-number">0</span>:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] *= -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] &gt; X:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] = X - (Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>]- X)<br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] &gt; Y:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] = Y - (Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>]- Y)<br><br>    <span class="hljs-keyword">return</span>(Point)<br><br>Point = &#123;&#125;<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    Point.update(&#123;i:&#123;<br>        <span class="hljs-string">&quot;O&quot;</span>:np.array([<span class="hljs-number">50</span>,<span class="hljs-number">50</span>]),<br>        <span class="hljs-string">&quot;N&quot;</span>:np.array([<span class="hljs-number">50</span>,<span class="hljs-number">50</span>]),<br>        <span class="hljs-string">&quot;Dit&quot;</span>:np.array([<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]),<br>        <span class="hljs-string">&quot;Sp&quot;</span>: <span class="hljs-number">1</span><br>    &#125;&#125;)<br><br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">True</span>):<br>    MAP = np.zeros([<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">3</span>], dtype=np.uint8)<br>    MAP[MAP==<span class="hljs-number">0</span>] = <span class="hljs-number">255</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        Point[i][<span class="hljs-string">&quot;O&quot;</span>] = np.array(Point[i][<span class="hljs-string">&quot;N&quot;</span>])<br>        Point[i][<span class="hljs-string">&quot;N&quot;</span>] = Position_update(Point[i][<span class="hljs-string">&quot;N&quot;</span>])<br>        Point[i]= Map_bonce(Point[i], <span class="hljs-built_in">len</span>(MAP[<span class="hljs-number">0</span>]), <span class="hljs-built_in">len</span>(MAP))<br>        <span class="hljs-comment"># update old position and direction</span><br>        Point[i][<span class="hljs-string">&quot;Dit&quot;</span>]=Point[i][<span class="hljs-string">&quot;N&quot;</span>] - Point[i][<span class="hljs-string">&quot;O&quot;</span>]<br>        cv2.circle(MAP, Point[i][<span class="hljs-string">&quot;N&quot;</span>], <span class="hljs-number">3</span>, [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>], <span class="hljs-number">2</span>)<br>        print(Point[i])<br><br>    cv2.imshow(<span class="hljs-string">&quot;video&quot;</span>,MAP)<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">25</span>)&amp;<span class="hljs-number">0xFF</span>==<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>       cv2.destroyAllWindows()<br>       <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure></div><p>Collision by the center point</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># Overlap detection</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Map_bonce</span>(<span class="hljs-params">Point, X, Y</span>):</span><br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] &lt;<span class="hljs-number">0</span>:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] *= -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] &lt;<span class="hljs-number">0</span>:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] *= -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] &gt; X:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] = X - (Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>]- X)<br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] &gt; Y:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] = Y - (Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>]- Y)<br><br>    <span class="hljs-keyword">return</span>(Point)<br><br>Point = &#123;&#125;<br>N_point = <span class="hljs-number">300</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N_point):<br>    Point.update(&#123;i:&#123;<br>        <span class="hljs-string">&quot;O&quot;</span>:np.array([<span class="hljs-number">50</span>,<span class="hljs-number">50</span>]),<br>        <span class="hljs-string">&quot;N&quot;</span>:np.array([<span class="hljs-number">50</span>,<span class="hljs-number">50</span>]),<br>        <span class="hljs-string">&quot;Dit&quot;</span>:np.array([<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]),<br>        <span class="hljs-string">&quot;Sp&quot;</span>: <span class="hljs-number">1</span><br>    &#125;&#125;)<br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">True</span>):<br>    MAP = np.zeros([<span class="hljs-number">500</span>, <span class="hljs-number">500</span>, <span class="hljs-number">3</span>], dtype=np.uint8)<br>    MAP[MAP==<span class="hljs-number">0</span>] = <span class="hljs-number">255</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N_point):<br>        Point[i][<span class="hljs-string">&quot;O&quot;</span>] = np.array(Point[i][<span class="hljs-string">&quot;N&quot;</span>])<br>        Point[i][<span class="hljs-string">&quot;N&quot;</span>] = Position_update(Point[i][<span class="hljs-string">&quot;N&quot;</span>])<br>        <span class="hljs-comment"># Check map-collision</span><br>        Point[i]= Map_bonce(Point[i], <span class="hljs-built_in">len</span>(MAP[<span class="hljs-number">0</span>]), <span class="hljs-built_in">len</span>(MAP))<br>        <span class="hljs-comment"># Particals Collision</span><br>        <span class="hljs-comment"># update old position and direction</span><br>        Point[i][<span class="hljs-string">&quot;Dit&quot;</span>]=Point[i][<span class="hljs-string">&quot;N&quot;</span>] - Point[i][<span class="hljs-string">&quot;O&quot;</span>]<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>  <span class="hljs-keyword">in</span> pd.DataFrame([Point[i][<span class="hljs-string">&#x27;N&#x27;</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Point]).duplicated().tolist():<br>        TMP = pd.DataFrame([Point[i][<span class="hljs-string">&#x27;N&#x27;</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Point])<br>        TMP2 = TMP[TMP.duplicated()]<br>        TMP == TMP2.iloc[<span class="hljs-number">0</span>,:]<br>        INDEX = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Point <span class="hljs-keyword">if</span> Point[i][<span class="hljs-string">&#x27;N&#x27;</span>].tolist() == Point[TMP2.index[<span class="hljs-number">0</span>]][<span class="hljs-string">&#x27;N&#x27;</span>].tolist()]<br>        print(INDEX)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(INDEX)/<span class="hljs-number">2</span>)):<br>            INDEX_1 = INDEX[i*<span class="hljs-number">2</span>]<br>            INDEX_2 = INDEX[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]<br>            Point[INDEX_1][<span class="hljs-string">&#x27;N&#x27;</span>] +=Point[INDEX_2][<span class="hljs-string">&#x27;Dit&#x27;</span>]<br>            Point[INDEX_2][<span class="hljs-string">&#x27;N&#x27;</span>] +=Point[INDEX_1][<span class="hljs-string">&#x27;Dit&#x27;</span>]<br>            Point[INDEX_1][<span class="hljs-string">&quot;O&quot;</span>] = np.array(Point[INDEX_1][<span class="hljs-string">&quot;N&quot;</span>])<br>            Point[INDEX_2][<span class="hljs-string">&quot;O&quot;</span>] = np.array(Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>])<br>            <span class="hljs-keyword">if</span> Point[INDEX_1][<span class="hljs-string">&quot;O&quot;</span>].tolist() == Point[INDEX_1][<span class="hljs-string">&quot;N&quot;</span>].tolist():<br>                Point[i][<span class="hljs-string">&quot;N&quot;</span>] = Position_update(Point[i][<span class="hljs-string">&quot;N&quot;</span>])<br>            <span class="hljs-keyword">if</span> Point[INDEX_2][<span class="hljs-string">&quot;O&quot;</span>].tolist() == Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>].tolist():<br>                Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>] = Position_update(Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>])<br>            Point[INDEX_1][<span class="hljs-string">&quot;Dit&quot;</span>]=Point[INDEX_1][<span class="hljs-string">&quot;N&quot;</span>] - Point[INDEX_1][<span class="hljs-string">&quot;O&quot;</span>]<br>            Point[INDEX_2][<span class="hljs-string">&quot;Dit&quot;</span>]=Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>] - Point[INDEX_2][<span class="hljs-string">&quot;O&quot;</span>]<br>        <span class="hljs-comment"># Check map-collision</span><br>        Point[INDEX_1]= Map_bonce(Point[INDEX_1], <span class="hljs-built_in">len</span>(MAP[<span class="hljs-number">0</span>]), <span class="hljs-built_in">len</span>(MAP))<br>        Point[INDEX_2]= Map_bonce(Point[INDEX_2], <span class="hljs-built_in">len</span>(MAP[<span class="hljs-number">0</span>]), <span class="hljs-built_in">len</span>(MAP))<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N_point):<br>        cv2.circle(MAP, Point[i][<span class="hljs-string">&quot;N&quot;</span>], <span class="hljs-number">3</span>, [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>], <span class="hljs-number">2</span>)<br>    print(Point[i])<br><br>    cv2.imshow(<span class="hljs-string">&quot;video&quot;</span>,MAP)<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">25</span>)&amp;<span class="hljs-number">0xFF</span>==<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>       cv2.destroyAllWindows()<br>       <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure></div><p>Collision based on the mask</p><p>mask circle</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Circle Mask</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Cir_mas</span>(<span class="hljs-params">Radian</span>):</span><br>    x = np.arange(<span class="hljs-number">0</span>, Radian *<span class="hljs-number">2</span> +<span class="hljs-number">1</span>)<br>    y = np.arange(<span class="hljs-number">0</span>, Radian *<span class="hljs-number">2</span> +<span class="hljs-number">1</span>)<br>    arr = np.zeros((y.size, x.size))<br><br>    cx = Radian +<span class="hljs-number">1</span><br>    cy = Radian +<span class="hljs-number">1</span><br>    r = Radian<br><br>    <span class="hljs-comment"># The two lines below could be merged, but I stored the mask</span><br>    <span class="hljs-comment"># for code clarity.</span><br>    mask = (x[np.newaxis,:]-cx)**<span class="hljs-number">2</span> + (y[:,np.newaxis]-cy)**<span class="hljs-number">2</span> &lt; r**<span class="hljs-number">2</span><br>    TMP = pd.melt(pd.DataFrame(mask).reset_index(), id_vars=<span class="hljs-string">&#x27;index&#x27;</span>)<br>    MASK = TMP.iloc[:,:<span class="hljs-number">2</span>][TMP.value==<span class="hljs-literal">True</span>].to_numpy()-[Radian+<span class="hljs-number">1</span>,Radian+<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Map_bonce</span>(<span class="hljs-params">Point, X, Y</span>):</span><br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] &lt;<span class="hljs-number">0</span>:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] *= -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] &lt;<span class="hljs-number">0</span>:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] *= -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] &gt; X:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] = X - (Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>]- X)<br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] &gt; Y:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] = Y - (Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>]- Y)<br><br>    <span class="hljs-keyword">return</span>(Point)<br><br><br>Point = &#123;&#125;<br>N_point = <span class="hljs-number">50</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N_point):<br>    X = np.random.choice(<span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>))<br>    Y = np.random.choice(<span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>))<br>    Point.update(&#123;i:&#123;<br>        <span class="hljs-string">&quot;O&quot;</span>:np.array([X,Y]),<br>        <span class="hljs-string">&quot;N&quot;</span>:np.array([X,Y]),<br>        <span class="hljs-string">&quot;Dit&quot;</span>:np.array([<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]),<br>        <span class="hljs-string">&quot;Ms&quot;</span>: Cir_mas(<span class="hljs-number">3</span>),<br>        <span class="hljs-string">&quot;Sp&quot;</span>: <span class="hljs-number">1</span><br>    &#125;&#125;)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Point_TB</span>(<span class="hljs-params">Point</span>):</span><br>    TB = pd.DataFrame()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Point:<br>        tmp = pd.DataFrame(Point[i][<span class="hljs-string">&#x27;Ms&#x27;</span>])  + Point[i][<span class="hljs-string">&#x27;N&#x27;</span>]<br>        tmp[<span class="hljs-string">&#x27;index&#x27;</span>] = i<br>        TB = pd.concat([TB, tmp])<br>    <span class="hljs-keyword">return</span> TB<br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">True</span>):<br>    MAP = np.zeros([<span class="hljs-number">500</span>, <span class="hljs-number">500</span>, <span class="hljs-number">3</span>], dtype=np.uint8)<br>    MAP[MAP==<span class="hljs-number">0</span>] = <span class="hljs-number">255</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N_point):<br>        Point[i][<span class="hljs-string">&quot;O&quot;</span>] = np.array(Point[i][<span class="hljs-string">&quot;N&quot;</span>])<br>        Point[i][<span class="hljs-string">&quot;N&quot;</span>] = Position_update(Point[i][<span class="hljs-string">&quot;N&quot;</span>])<br>        <span class="hljs-comment"># Check map-collision</span><br>        Point[i]= Map_bonce(Point[i], <span class="hljs-built_in">len</span>(MAP[<span class="hljs-number">0</span>]), <span class="hljs-built_in">len</span>(MAP))<br>        <span class="hljs-comment"># Particals Collision</span><br>        <span class="hljs-comment"># update old position and direction</span><br>        Point[i][<span class="hljs-string">&quot;Dit&quot;</span>]=Point[i][<span class="hljs-string">&quot;N&quot;</span>] - Point[i][<span class="hljs-string">&quot;O&quot;</span>]<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>  <span class="hljs-keyword">in</span> Point_TB(Point).iloc[:,:<span class="hljs-number">2</span>].duplicated().tolist():<br>        TMP = Point_TB(Point)<br>        TMP2 = TMP[TMP.iloc[:,:<span class="hljs-number">2</span>].duplicated()]<br>        INDEX = TMP[[i== TMP2.iloc[:,:<span class="hljs-number">2</span>].to_numpy().tolist()[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> TMP.iloc[:,:<span class="hljs-number">2</span>].to_numpy().tolist()]][<span class="hljs-string">&#x27;index&#x27;</span>].to_numpy()<br>        print(INDEX)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(INDEX)/<span class="hljs-number">2</span>)):<br>            INDEX_1 = INDEX[i*<span class="hljs-number">2</span>]<br>            INDEX_2 = INDEX[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]<br>            Point[INDEX_1][<span class="hljs-string">&#x27;N&#x27;</span>] +=Point[INDEX_2][<span class="hljs-string">&#x27;Dit&#x27;</span>]<br>            Point[INDEX_2][<span class="hljs-string">&#x27;N&#x27;</span>] +=Point[INDEX_1][<span class="hljs-string">&#x27;Dit&#x27;</span>]<br>            Point[INDEX_1][<span class="hljs-string">&quot;O&quot;</span>] = np.array(Point[INDEX_1][<span class="hljs-string">&quot;N&quot;</span>])<br>            Point[INDEX_2][<span class="hljs-string">&quot;O&quot;</span>] = np.array(Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>])<br>            <span class="hljs-keyword">if</span> Point[INDEX_1][<span class="hljs-string">&quot;O&quot;</span>].tolist() == Point[INDEX_1][<span class="hljs-string">&quot;N&quot;</span>].tolist():<br>                Point[i][<span class="hljs-string">&quot;N&quot;</span>] = Position_update(Point[i][<span class="hljs-string">&quot;N&quot;</span>])<br>            <span class="hljs-keyword">if</span> Point[INDEX_2][<span class="hljs-string">&quot;O&quot;</span>].tolist() == Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>].tolist():<br>                Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>] = Position_update(Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>])<br>            Point[INDEX_1][<span class="hljs-string">&quot;Dit&quot;</span>]=Point[INDEX_1][<span class="hljs-string">&quot;N&quot;</span>] - Point[INDEX_1][<span class="hljs-string">&quot;O&quot;</span>]<br>            Point[INDEX_2][<span class="hljs-string">&quot;Dit&quot;</span>]=Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>] - Point[INDEX_2][<span class="hljs-string">&quot;O&quot;</span>]<br>        <span class="hljs-comment"># Check map-collision</span><br>        Point[INDEX_1]= Map_bonce(Point[INDEX_1], <span class="hljs-built_in">len</span>(MAP[<span class="hljs-number">0</span>]), <span class="hljs-built_in">len</span>(MAP))<br>        Point[INDEX_2]= Map_bonce(Point[INDEX_2], <span class="hljs-built_in">len</span>(MAP[<span class="hljs-number">0</span>]), <span class="hljs-built_in">len</span>(MAP))<br>        print(Point)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N_point):<br>        cv2.circle(MAP, Point[i][<span class="hljs-string">&quot;N&quot;</span>], <span class="hljs-number">3</span>, [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>], <span class="hljs-number">1</span>)<br><br>    cv2.imshow(<span class="hljs-string">&quot;video&quot;</span>,MAP)<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">25</span>)&amp;<span class="hljs-number">0xFF</span>==<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>       cv2.destroyAllWindows()<br>       <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure></div><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">Brownian Motion</summary>
    
    
    
    <category term="Python" scheme="https://karobben.github.io/categories/Python/"/>
    
    <category term="Data" scheme="https://karobben.github.io/categories/Python/Data/"/>
    
    
    <category term="Python" scheme="https://karobben.github.io/tags/Python/"/>
    
    <category term="Data" scheme="https://karobben.github.io/tags/Data/"/>
    
  </entry>
  
  <entry>
    <title>RNA-structure and Prediction</title>
    <link href="https://karobben.github.io/2022/11/15/Bioinfor/rna-structure/"/>
    <id>https://karobben.github.io/2022/11/15/Bioinfor/rna-structure/</id>
    <published>2022-11-15T16:16:46.000Z</published>
    <updated>2023-02-12T01:22:34.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RNA-Structure-and-Prediction">RNA Structure and Prediction</h2><table><thead><tr><th style="text-align:left"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">Like protein, RNA also has secondary structure, tertiary structure, and quaternary stricture, too.</td><td style="text-align:center"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/DNA_RNA_structure_%28full%29.png/540px-DNA_RNA_structure_%28full%29.png" alt=""><br><a href="https://en.wikipedia.org/wiki/Nucleic_acid_sequence">Â© wiki</a>]</td></tr></tbody></table><p>In Secondary Structure, it could form:</p><ul><li>Double helix</li><li>Stem-loop structure</li><li>Pseudoknots</li></ul><p><a href="https://en.wikipedia.org/wiki/List_of_RNA_structure_prediction_software">wikipedia</a> listed a bunch of tools for RNA secondary structure prediction.</p><p>Online structure prediction servers:</p><ul><li><a href="https://rna.urmc.rochester.edu/RNAstructureWeb/Servers/Predict1/ResultsPages/20221115.114114-7c052f9f/Results.html">Mathews Lab</a></li><li><a href="http://rna.tbi.univie.ac.at/cgi-bin/RNAWebSuite/RNAfold.cgi">RNAfold</a></li></ul><h2 id="RAN-Secondary-Structure-Format">RAN Secondary Structure Format.</h2><ul><li>DB format (Dot bracket)<ul><li>Unpaired nucleotides are indicated with the . or : characters.</li><li>Matching pairs of parentheses indicate base pairs.</li><li>To indicate non-nested base pairs (pseudoknots), additional brackets may be used: [], {}, or &lt;&gt;.<br>Example:</li></ul></li></ul><pre>GGUGCAUGCCGAGGGGCGGUUGGCCUCGUAAAAAGCCGCAAAAAAUAGCAUGUAGUACC((((((((((((((.[[[[[[..))))).....]]]]]]........)))))...))))</pre><h2 id="Secondary-Structure-Predict">Secondary Structure Predict</h2><p>Seq:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="EBNF"><figure class="iseeu highlight /ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">UGAGUGGUGUUGUUGGCUGCAUUAUGAUGUUGGUUAUAUUCUGGUUUUCUUCCACUCAACAACAACAACAACACGCAGUAGUAGAAGCAACAACAAGCAUAUAACCAACAUCAUAAUGCAGCCAACAACACCACUCA</span><br></code></pre></td></tr></table></figure></div><p>Website: <a href="http://rna.tbi.univie.ac.at/cgi-bin/RNAWebSuite/RNAfold.cgi">RANfold</a><br>Result:<br><img src="https://s1.ax1x.com/2022/11/16/zVgb0H.png" alt=""></p><h2 id="RNA-Secondary-Structure-Plot">RNA Secondary Structure Plot</h2><h3 id="RNAplot-from-ViennaRNA">RNAplot from ViennaRNA</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">RNAplot tmp.db <span class="hljs-comment"># RNAfold results</span><br></code></pre></td></tr></table></figure></div><p><img src="https://s1.ax1x.com/2022/11/16/zV2KuF.png" alt=""></p><h3 id="RRNA-in-R">RRNA in R</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">install.package(<span class="hljs-string">&quot;RRNA&quot;</span>)<br>library(RRNA)<br>coord=ct2coord(ct)<br>ct=makeCt( <span class="hljs-string">&quot;(((((((((((((((((((((((((((((((((((((((.((.(((((((((.(((..((.................))))).)))).)).))).)).)))))))))))))))))))))))))))))))))))))))&quot;</span>, <span class="hljs-string">&quot;UGAGUGGUGUUGUUGGCUGCAUUAUGAUGUUGGUUAUAUUCUGGUUUUCUUCCACUCAACAACAACAACAACACGCAGUAGUAGAAGCAACAACAAGCAUAUAACCAACAUCAUAAUGCAGCCAACAACACCACUCA&quot;</span>)<br>RNAPlot(coord,hl=<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;GGGUUU&quot;</span>,<span class="hljs-string">&quot;AAAUUU&quot;</span>),seqcols=<span class="hljs-built_in">c</span>(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>),labTF=<span class="hljs-built_in">F</span>)<br></code></pre></td></tr></table></figure></div><p><img src="https://s1.ax1x.com/2022/11/16/zVg3Sf.png" alt=""></p><h2 id="Python">Python</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">pip install RNA forgi<br></code></pre></td></tr></table></figure></div><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">RNA-structure and Prediction</summary>
    
    
    
    <category term="Biology" scheme="https://karobben.github.io/categories/Biology/"/>
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/"/>
    
    <category term="Protocol" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Protocol/"/>
    
    <category term="miRNA" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Protocol/miRNA/"/>
    
    
    <category term="Software" scheme="https://karobben.github.io/tags/Software/"/>
    
    <category term="Protocol" scheme="https://karobben.github.io/tags/Protocol/"/>
    
    <category term="miRNA-Seq" scheme="https://karobben.github.io/tags/miRNA-Seq/"/>
    
  </entry>
  
  <entry>
    <title>Wet Lab Techs with Brief Explained</title>
    <link href="https://karobben.github.io/2022/11/09/LearnNotes/lab-techs/"/>
    <id>https://karobben.github.io/2022/11/09/LearnNotes/lab-techs/</id>
    <published>2022-11-09T19:54:20.000Z</published>
    <updated>2023-03-03T18:38:37.460Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Wet-Lab-Techs-with-Brief-Explained">Wet Lab Techs with Brief Explained</h2><h2 id="Gel-Shift-AssaysâEMSA">Gel Shift AssaysâEMSA</h2><div class="admonition note"><p class="admonition-title">What is EMSA</p><p>The interaction of proteins with DNA is central to the control of many cellular processes including DNA replication, recombination and repair, transcription, and viral assembly. One important technique for studying gene regulation and determining proteinâDNA interactions is the electrophoretic mobility shift assay (EMSA). An advantage of studying proteinâDNA interactions by an electrophoretic assay is the ability to resolve complexes of different stoichiometry or conformation. Another major advantage is that the source of the DNA-binding protein may be a crude nuclear or whole cell extract, in vitro transcription product or a purified preparation. EMSA can be used qualitatively to identify sequence-specific, DNA-binding proteins (such as transcription factors) in crude lysates and, in conjunction with mutagenesis, to identify the important binding sequences within the upstream regulatory region of a given gene. EMSA can also be utilized quantitatively to measure thermodynamic and kinetic parameters.<a href="https://www.thermofisher.com/us/en/home/life-science/protein-biology/protein-biology-learning-center/protein-biology-resource-library/pierce-protein-methods/gel-shift-assays-emsa.html">@ ThermoFisher 2022</a></p></div><p>Brief explained: During Gel electrophoration, if we add DNA (oligo) and protein together and the protein could interact with the DNA, the transfer speed of DNA is much slower because protein is dragging them.</p><p>One of a standard kit for EMSA:</p><table><thead><tr><th style="text-align:left"><a href="https://www.thermofisher.com/order/catalog/product/20148">LightShiftâ¢ Chemiluminescent EMSA Kit</a> from thermofisher. (<a href="https://www.thermofisher.com/document-connect/document-connect.html?url=https://assets.thermofisher.com/TFS-Assets%2FLSG%2Fmanuals%2FMAN0011409_LightShift_Chemiluminescent_EMSA_UG.pdf">documentation</a>)</th><th style="text-align:left"><img src="https://www.thermofisher.com/TFS-Assets/LSG/product-images/20148-DNA-EMSA-Kit-b.jpg-650.jpg" alt=""></th></tr></thead><tbody></tbody></table><table><thead><tr><th style="text-align:center"><img src="https://s1.ax1x.com/2022/11/10/zSvqbD.png" alt=""></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://www.thermofisher.com/order/catalog/product/20148">Â© ThermoFisher</a></td></tr></tbody></table><p>According its documentation, a group should have at least 3 tracks:</p><ol><li>labeled DNA: which works as negative control. It shows them band when there are no protein-DNA interaction.</li><li>labeled DNA + protein: The main track for results. The position of DNA shifts because proteins interact with them. The movement of DNA is hindered by proteins.</li><li>labeled DNA + protein + overload unlabeled DNA: By competition, most proteins interact with unlabeled DNA because the quantity of them is higher them labeled. As a result, we can see a dim-shifted band or no shifted band at all. The track could eliminate false positives brought by protein-label tag binding.</li></ol><p>Publication used:</p><ul><li>Shyamsunder, Pavithra, et al. âIdentification of a novel enhancer of CEBPE essential for granulocytic differentiation.â Blood, The Journal of the American Society of Hematology 133.23 (2019): 2507-2517.</li></ul><h3 id="Eamples-in-paper">Eamples in paper</h3><table><thead><tr><th style="text-align:center"><img src="https://s1.ax1x.com/2022/11/10/zSxCKf.png" alt=""></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://ashpublications.org/blood/article/133/23/2507/273839/Identification-of-a-novel-enhancer-of-CEBPE">Â© Shyamsunder, 2019</a></td></tr></tbody></table><p>In this paper, they showed the 4<sub>th</sub> track, which is protein + unlabeled DNA. In the panel right, there are weak shifted bind which could be the protein.</p><h2 id="Luciferase-Report-Assay">Luciferase Report Assay</h2><div class="admonition note"><p class="admonition-title">What is a Luciferase Report Assay?</p><p>A luciferase reporter assay is a test that investigates whether a protein can activate or repress the expression of a target gene using luciferase as a reporter protein (<a href="https://www.sciencedirect.com/science/article/pii/B9780128005118000150?via%3Dihub">Carter &amp; Shieh, 2015</a>). The synthesis of the reporter protein and the addition of a substrate results in a chemical reaction with bioluminescence (or the emission of photons) as a by-product. This bioluminescence directly corresponds with the effect of the protein on expression of the target gene.<a href="https://goldbio.com/articles/article/a-deep-dive-into-the-luciferase-assay-what-it-is-how-it-works-and-more">Â© GoldBio, 2022;</a></p></div><table><thead><tr><th style="text-align:center"><img src="https://www.jbc.org/cms/attachment/6d2ce07c-a367-4fc6-8d4f-c2e1efbe40b5/gr1.jpg" alt=""></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://www.sciencedirect.com/science/article/pii/S0021925820371155?via%3Dihub">Â© Scholl, et al., 2014</a></td></tr><tr><td style="text-align:center"><img src="https://commercio.nyc3.digitaloceanspaces.com/goldbio-2018/pages/Functional%20luc.png" alt=""></td></tr><tr><td style="text-align:center"><a href="https://goldbio.com/articles/article/a-deep-dive-into-the-luciferase-assay-what-it-is-how-it-works-and-more">Â© GoldBio, 2022;</a></td></tr></tbody></table><p>Scholl, Zackary &amp; Yang, Weitao &amp; Marszalek, Piotr. (2014). Chaperones Rescue Luciferase Folding by Separating Its Domains. The Journal of biological chemistry. 290. 10.1074/jbc.M114.582049.</p><p>After inserting the target DNA segment in the plasmid, the vector is transferred into cells. If proteins could interact with the segment, luciferase would express and cells could illuminate.</p><table><thead><tr><th style="text-align:center"><img src="https://www.researchgate.net/profile/Chrysostomos-Tornari/publication/44789832/figure/fig11/AS:906421684170753@1593119178226/pGL410luc2-vector-Schematic-diagram-of-the-pGL410luc2-luciferase-reporter-vector.jpg" alt=""></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://www.researchgate.net/figure/pGL410luc2-vector-Schematic-diagram-of-the-pGL410luc2-luciferase-reporter-vector_fig11_44789832">Â© Chrysostomos Tornari; 2010</a></td></tr></tbody></table><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">Wet Lab Techs with Brief Explained</summary>
    
    
    
    <category term="Biology" scheme="https://karobben.github.io/categories/Biology/"/>
    
    <category term="Wet Protocol" scheme="https://karobben.github.io/categories/Biology/Wet-Protocol/"/>
    
    
    <category term="Biology" scheme="https://karobben.github.io/tags/Biology/"/>
    
    <category term="Protocol" scheme="https://karobben.github.io/tags/Protocol/"/>
    
    <category term="Wet" scheme="https://karobben.github.io/tags/Wet/"/>
    
  </entry>
  
  <entry>
    <title>RNA Seq: Alternative Splicing</title>
    <link href="https://karobben.github.io/2022/11/07/Bioinfor/alternative-splicing/"/>
    <id>https://karobben.github.io/2022/11/07/Bioinfor/alternative-splicing/</id>
    <published>2022-11-07T20:44:12.000Z</published>
    <updated>2023-03-03T18:40:30.780Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://github.com/flemingtonlab/SpliceTools">SpliceTools</a></li><li><a href="https://github.com/tgen/bisbee">Bisbee</a>; <a href="https://www.nature.com/articles/s41598-021-89938-2">paper</a></li><li><a href="https://rnaseq-mats.sourceforge.net/">rMATS</a></li></ul><h2 id="Some-background">Some background</h2><p>In seminar recording form <a href="https://www.youtube.com/watch?v=LknDQw08P5w">OHSU Informatics</a>, they talked about how rMATS worked and the limits of rMATS in overlapped genes and complicated splicing events.<br>Julian</p><h2 id="rMARS">rMARS</h2><blockquote><p>rMATS (multivariate analysis of transcript splicing ) is a computational tool to detect differential alternative splicing events from RNA-Seq data. The statistical model of MATS calculates the P-value and false discovery rate that the difference in the isoform ratio of a gene between two conditions exceeds a given user-defined threshold. From the RNA-Seq data, MATS can automatically detect and analyze alternative splicing events corresponding to all major types of alternative splicing patterns. MATS handles replicate RNA-Seq data from both paired and unpaired study design. (<a href="https://rnaseq-mats.sourceforge.net/">Â© Xing Lab</a>)</p></blockquote><table><thead><tr><th style="text-align:center"><img src="https://rnaseq-mats.sourceforge.net/splicing.jpg" alt=""></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://rnaseq-mats.sourceforge.net/">Â© Xing Lab</a></td></tr></tbody></table><ol><li>Unpaired Replicates.</li></ol><h3 id="Other-Related-Tools">Other Related Tools</h3><blockquote><p>MISO, SpliceTrap, ALEXA- seq, and rSeqDiff are designed for two-sample com- parison and do not handle replicates. Cufflinks, FDM, and DiffSplice use the JensenâShannon divergence metric to detect differential isoform proportion while accounting for vari- ability among replicates. (rMATS)</p></blockquote><h3 id="Pipelines-form-the-paper">Pipelines form the paper</h3><p>SRS35482: â mapped into Ensembl transcripts (TopHat) â unmapped reads mapped into Genom h1g (TopHat) â rMATS</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo apt install libgsl-dev cmake cython<br>pip install Cython<br><br>git <span class="hljs-built_in">clone</span> https://github.com/Xinglab/rmats-turbo.git<br><span class="hljs-built_in">cd</span> rmats-turbo<br>./build_rmats<br><br><br>rmats.py --b1 path1 --b2 path2 --gtf ../Mutation/Yuwei_data/DATA/genes.gtf -t single --readLength 50 --nthread 4 --od output --tmp tmp_output<br><br>rmats.py --b1 path1 --b2 path2 --gtf ../DB/dmel-all-r6.39.gtf -t single --readLength 50 --nthread 4 --od output --tmp tmp_output<br><br></code></pre></td></tr></table></figure></div><h2 id="Aligner-Choose">Aligner Choose</h2><p>For aternative splicing, we have to use intron awareness aligners like tophat, hisat, stat, etc. Other well known aligners like bowtie and bwa should be avoided only you have significant reasons.</p><h3 id="Tophat">Tophat</h3><p>In the paper of rMATS, they choosed Tophat as the aligner.<br>You canât add parameters at the end of the commands. All arguments should following <code>tophat</code> and tha last three is index + reads</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">tophat -G *.gtf -p &lt;threads&gt; -o &lt;out_dir&gt; &lt;bowtie_index&gt; &lt;reads1,reads2,...&gt; &lt;reads1,reads2,...&gt;<br><br><br>hisat2 [options]* -x &lt;ht2-idx&gt; &#123;-1 &lt;m1&gt; -2 &lt;m2&gt; | -U &lt;r&gt;&#125; [-S &lt;sam&gt;]<br><br><span class="hljs-comment"># build index</span><br>hisat2-build -p 16 genome.fa genome<br>hisat2 -p 40 -x hisat2-index -U A.fq -S out.sam<br><br><span class="hljs-keyword">for</span> SAMPLE <span class="hljs-keyword">in</span> CF TF; <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> ../Merge_Tri_FQ/<span class="hljs-variable">$SAMPLE</span>*;<br>    sed <span class="hljs-string">&quot;s/Hi/ht2_<span class="hljs-variable">$SAMPLE</span>/;s/128/32/&quot;</span> ../Model.sh &gt; script/<span class="hljs-variable">$SAMPLE</span>\_ht2.sh<br>    <span class="hljs-built_in">echo</span> hisat2 -x ../DB/dmel-all-chromosome-r6.39 -p 40  -S ht2_<span class="hljs-variable">$SAMPLE</span>.sam -U $(ls ../Merge_Tri_FQ/<span class="hljs-variable">$SAMPLE</span>*| tr <span class="hljs-string">&quot;\n&quot;</span> <span class="hljs-string">&quot;,&quot;</span>| sed <span class="hljs-string">&#x27;s/,$/\n/&#x27;</span>)  &gt;&gt; script/<span class="hljs-variable">$SAMPLE</span>\_ht2.sh<br>    sbatch script/<span class="hljs-variable">$SAMPLE</span>\_ht2.sh<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure></div><p>PS: An interesting thing is you canât build âhisat indexâ with âgzâ file. So, we need to decompress it before building the index. Lol</p><div class="admonition note"><p class="admonition-title">Differential Expression and Differential Splicing.</p></div><table><thead><tr><th style="text-align:center"><img src="https://s1.ax1x.com/2022/11/11/zCFD2D.png" alt=""></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://aacrjournals.org/mcr/article/15/9/1206/268100/The-Landscape-of-Isoform-Switches-in-Human">Â© K. Vitting-Seerup; 2017</a></td></tr></tbody></table><h2 id="Run-with-test-data">Run with test data</h2><p>In the official documentation, they applied a small group of test data:</p><p>Thanks for <a href="https://www.jieandze1314.com/post/cnposts/169/">Yunze Liu</a>, I knwo that we just need to download the human gtf for tarting the test.<br>I tried two set of parameters and the results end the same. But I do have different number of results from genome compared with Yunze Liuâs result which means we used different gtf (Mine has less genes). The reference I used is from <a href="https://hgdownload.soe.ucsc.edu/goldenPath/hg19/bigZips/genes/">ucsc</a>: <a href="https://hgdownload.soe.ucsc.edu/goldenPath/hg19/bigZips/genes/hg19.ensGene.gtf.gz">hg19</a></p><p>GTF and <a href="https://sourceforge.net/projects/rnaseq-mats/files/MATS/testData.tgz/download">Test data</a> from <a href="https://rnaseq-mats.sourceforge.net/">documentation</a></p><pre>.âââ 231ESRP.25K.rep-1.bamâââ 231ESRP.25K.rep-1.bam.baiâââ 231ESRP.25K.rep-1.R1.fastqâââ 231ESRP.25K.rep-1.R2.fastqâââ 231ESRP.25K.rep-2.bamâââ 231ESRP.25K.rep-2.bam.baiâââ 231ESRP.25K.rep-2.R1.fastqâââ 231ESRP.25K.rep-2.R2.fastqâââ 231EV.25K.rep-1.bamâââ 231EV.25K.rep-1.bam.baiâââ 231EV.25K.rep-1.R1.fastqâââ 231EV.25K.rep-1.R2.fastqâââ 231EV.25K.rep-2.bamâââ 231EV.25K.rep-2.bam.baiâââ 231EV.25K.rep-2.R1.fastqâââ 231EV.25K.rep-2.R2.fastqâââ b1.txtâââ b2.txtâââ hg19.ensGene.gtfâââ s1.txtâââ s2.txt</pre><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">python ../Github/rmats-turbo/rmats.py  --b1 b1.txt --b2 b2.txt --gtf hg19.ensGene.gtf  --od bam_test --tmp bam_tmp -t paired --readLength 50 --cstat 0.0001 --libType fr-unstranded<br>python ../Github/rmats-turbo/rmats.py --b1 b1.txt  --b2 b2.txt  -t paired --readLength 50 --nthread 4 --od <span class="hljs-built_in">test</span> --tmp tmp_output --gtf hg19.ensGene.gtf<br></code></pre></td></tr></table></figure></div><pre>Done processing each gene from dictionary to compile AS eventsFound 39321 exon skipping eventsFound 2115 exon MX eventsFound 13456 alt SS eventsThere are 8337 alt 3 SS events and 5119 alt 5 SS events.Found 6244 RI events</pre><h2 id="Repeats-and-non-repeats-results">Repeats and non-repeats results</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">wc CFT*/*| awk <span class="hljs-string">&#x27;&#123;print $4,$1&#125;&#x27;</span>| tr <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-string">&#x27; &#x27;</span>| awk <span class="hljs-string">&#x27;&#123;print $2,$1,$3&#125;&#x27;</span>|sort | column -t -s<span class="hljs-string">&#x27; &#x27;</span><br></code></pre></td></tr></table></figure></div><pre>MXE.MATS.JCEC.txt             CFTF    350MXE.MATS.JCEC.txt             CFTF_s  109MXE.MATS.JC.txt               CFTF    349MXE.MATS.JC.txt               CFTF_s  109RI.MATS.JCEC.txt              CFTF    31RI.MATS.JCEC.txt              CFTF_s  17RI.MATS.JC.txt                CFTF    31RI.MATS.JC.txt                CFTF_s  17SE.MATS.JCEC.txt              CFTF    857SE.MATS.JCEC.txt              CFTF_s  334SE.MATS.JC.txt                CFTF    849SE.MATS.JC.txt                CFTF_s  333</pre><p>The first column is rMATS results. the second column is result folder. The last column is the number of row for each file.<br><code>CFTF</code> is triplicate result and <code>CFTF_s</code> is single result. We can find that triplicate result have more counts.</p><h2 id="Visualization">Visualization</h2><p>Tools: <a href="https://github.com/Xinglab/rmats2sashimiplot">Xinglab/rmats2sashimiplot</a></p><div class="admonition note"><p class="admonition-title">This tool is based ob python2, not python3!</p></div><p>An example of code could be: (<a href="https://evvail.com/2021/05/05/2400.html">Omics-Hunter</a>)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">rmats2sashimiplot --b1 231ESRP.25K.rep-1.bam,231ESRP.25K.rep-2.bam --b2  231EV.25K.rep-1.bam,231EV.25K.rep-2.bam -t SE -e bam_test/SE.MATS.JC.txt --l1 SampleOne --l2 SampleTwo --exon_s 1 --intron_s 5 -o test_events_output<br></code></pre></td></tr></table></figure></div><table><thead><tr><th style="text-align:center"><img src="https://s1.ax1x.com/2022/11/12/zPwasU.png" alt=""></th></tr></thead><tbody></tbody></table><div class="admonition info"><p class="admonition-title">Errors</p></div><pre>ImportError: No module named _bsddbmv: cannot stat '/mnt/cypress/kraken_RNA/asp2/plot/Sashimi_plot/2R:24671294:24688185:+.pdf': No such file or directory</pre><p>It is because you lack of</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">conda install -c conda-forge bsddb3<br></code></pre></td></tr></table></figure></div><h3 id="Plot-the-result-by-position">Plot the result by position</h3><p>By using the <code>rmats2sashimiplot</code> tool, you can create a plot of the output by specifying a region with the -c option. However, this can be prone to errors. Based on my experience, there are several factors that should be considered:</p><ul><li>It is recommended that each position should have its own directory, as the tool generates an index for that position which may not update even if the parameters are changed.</li><li>It is possible to assign a random position, but it is preferable to assign a position based on the position of exons.</li><li>If there are no genes located within the region that has been specified, an error will occur.</li></ul><div class="admonition info"><p class="admonition-title">png result</p><p>It appears that the <code>rmats2sashimiplot</code> tool is not capable of producing the result as a PNG image format. As a solution, we can use other tools such as <code>pdftoppm</code> to convert the generated PDF file to the PNG format. For instance, a command example to convert a file named p1.pdf to a PNG file named p1.png with a resolution of 1000 can be: <code>pdftoppm p1.pdf p1.png -png -r 1000</code>.</p></div><h2 id="Result-Explanation">Result Explanation</h2><div class="admonition note"><p class="admonition-title">result</p><ul><li>ESï¼Exon skippingï¼ï¼å¤æ¾å­è·³è·ãå¤æ¾å­å¨åä½mRNAåªæ¥å½¢ææçmRNAè¿ç¨ä¸­è¢«è·³è¿ï¼æç»æ²¡æåºç°å¨æäºæçmRNAä¸ãåçè·³è·çå¤æ¾å­åå¶ä¸¤ä¾§çåå«å­é½è¢«åªåæï¼ä¸æ¸¸åä¸æ¸¸çå¤æ¾å­è¢«ç´æ¥è¿çä¸èµ·ä¿çå¨åªååçäº§ç©ä¸­ã</li><li>RIï¼Retained intronï¼ï¼åå«å­ä¿çãåä½mRNAå¨åªæ¥å½¢ææçmRNAçè¿ç¨ä¸­ï¼é¨ååå«å­è¢«ä¿çä¸æ¥ãæä¸æ®µæ ¸è·é¸åºåå¨ä¸ä¸ªåªåä½ä¸­æ¯å¤æ¾å­çä¸é¨åï¼èå¨ä¸ä¹å¯¹ç§çåªåä½ä¸­å´æ¯åå«å­èè¢«åªåæã</li><li>ADï¼Alternate Donor siteï¼æA5SSï¼Alternative 5â splice siteï¼ï¼5âç«¯å¯ååªæ¥ãåä½mRNAå¨åªæ¥å½¢ææçmRNAçè¿ç¨ä¸­ï¼5âç«¯è¾¹çåçä¸åæ¹å¼çåªæ¥ï¼å¯¼è´5âç«¯å¤æ¾å­ææå»¶é¿</li><li>AAï¼Alternate acceptor siteï¼æA3SSï¼Alternative 3â splice siteï¼ï¼3âç«¯å¯ååªæ¥ãåä½mRNAå¨åªæ¥å½¢ææçmRNAçè¿ç¨ä¸­ï¼3âç«¯è¾¹çåçä¸åæ¹å¼çåªæ¥ï¼å¯¼è´3âç«¯å¤æ¾å­ææå»¶é¿</li><li>ATï¼Alternate terminatorï¼æAlternative last exonï¼ç¬¬ä¸ä¸ªå¤æ¾å­åçæ¹å</li><li>APï¼Alternate promoterï¼æAlternative first exonï¼æåä¸ä¸ªå¤æ¾å­åçæ¹å</li><li>MEï¼Mutually exclusive exonï¼ï¼å¤æ¾å­éæ©æ§è·³è·ãå½¢æçä¸¤ç§ä¸åçè½¬å½æ¬ä¸­ï¼ä¸¤è½¬å½æ¬ä¹é´ç¸åçå¤æ¾å­ç§°ä¸ºconstitutive exonï¼ ä¸åçå¤æ¾å­ç§°ä¸ºinclusive exonï¼inclusive exonä¸è½åæ¶å­å¨ä¸åä¸è½¬å½æ¬ä¸­ï¼ åªè½åå«å­å¨äºä¸åè½¬å½æ¬ä¸­from: <a href="https://www.jieandze1314.com/post/cnposts/169/">Yunze Liu</a></li></ul></div><p>An Example of âSEâ results</p><pre>IDGeneIDgeneSymbolchrstrandexonStart_0baseexonEndupstreamESupstreamEEdownstreamESdownstreamEEIDIJC_SAMPLE_1SJC_SAMPLE_1IJC_SAMPLE_2SJC_SAMPLE_2IncFormLenSkipFormLenPValueFDRIncLevel1IncLevel2IncLevelDifference2365"FBgn0283521""lola"chr2R-105158341051605110510524105110041053203810532119236569,54,772,0,67,63,1598493.09913051888e-086.84584054917e-070.945,1.0,0.8650.538,0.1670.5842366"FBgn0283521""lola"chr2R-10527065105272191052480410525862105320381053211923664,0,97,6,75,30,098491.0012167162e-072.0676289395e-060.222,0.0,0.3911.0,1.0-0.7962341"FBgn0250823""gish"chr3R+1628208016282408162749531627516916289630162898392341400,517,47557,86,8233,4040,43984900.00.778,0.75,0.7430.292,0.3170.4532358"FBgn0250823""gish"chr3R+16299590162996891629717416297345163018221630237223584,8,40,0,01,02,198491.12175272649e-062.04962226569e-051.0,1.0,1.00.2,0.00.92356"FBgn0250823""gish"chr3R+16299590162996891629717416297345163005681630086523561,0,00,1,01,00,0984911.01.0,0.0,NA1.0,NA-0.52359"FBgn0250823""gish"chr3R+1629959016299689162984691629855016301244163013512359486,567,539562,650,571113,12534,32984900.00.302,0.304,0.3210.624,0.661-0.334</pre><p>There are lotâs of columns. Letâs check them one by one.</p><ul><li><strong>ID</strong>: A ID for this specific events. Numeric.</li><li><strong>GeneID</strong>: The ID of the event-location. Comes from the gtf file you given</li><li><strong>geneSymbol</strong>: The name of the genes. âlolaâ for example.</li><li><strong>chr</strong>: chromosome name. It would add a chr at the head of each chromosomeâs name. Donât worry about this feature in <code>rmats2sashimiplot</code>. You just need the name as the same from gff file.</li><li><strong>strand</strong>: the direction of the gene.</li><li><strong>exonStart_0base</strong>:</li></ul><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">RNA Seq: Alternative Splicing</summary>
    
    
    
    <category term="Biology" scheme="https://karobben.github.io/categories/Biology/"/>
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/"/>
    
    <category term="Protocol" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Protocol/"/>
    
    <category term="Alternative Splicing" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Protocol/Alternative-Splicing/"/>
    
    
    <category term="Protocol" scheme="https://karobben.github.io/tags/Protocol/"/>
    
    <category term="NGS" scheme="https://karobben.github.io/tags/NGS/"/>
    
    <category term="RNA" scheme="https://karobben.github.io/tags/RNA/"/>
    
  </entry>
  
  <entry>
    <title>KEGG API</title>
    <link href="https://karobben.github.io/2022/10/28/Bioinfor/kegg-api/"/>
    <id>https://karobben.github.io/2022/10/28/Bioinfor/kegg-api/</id>
    <published>2022-10-28T21:00:41.000Z</published>
    <updated>2023-02-12T01:22:10.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="KEGG-API">KEGG API</h2><p>list of all pathways:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">curl https://rest.kegg.jp/list/pathway/dme<br></code></pre></td></tr></table></figure></div><pre>path:dme00010Glycolysis / Gluconeogenesis - Drosophila melanogaster (fruit fly)path:dme00020Citrate cycle (TCA cycle) - Drosophila melanogaster (fruit fly)path:dme00030Pentose phosphate pathway - Drosophila melanogaster (fruit fly)</pre><p>list of all organisms gene ID</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">curl https://rest.kegg.jp/list/dme<br></code></pre></td></tr></table></figure></div><pre>dme:Dmel_CG40494CDSX:127449..140340RhoGAP1A; Rho GTPase activating protein at 1A, isoform Adme:Dmel_CR43552miRNAX:133385..133502mir-4915-RAdme:Dmel_CG17131CDSX:140318..200663tyn; trynity, isoform Adme:Dmel_CG17707CDSX:complement(142731..148426)CG17707; uncharacterized protein, isoform Bdme:Dmel_CG3038CDSX:complement(243954..245856)CG3038; uncharacterized protein, isoform Cdme:Dmel_CG2995CDSX:245978..254650G9a; G9a, isoform Bdme:Dmel_CG42376CDSX:254876..255524CG42376; uncharacterized protein, isoform A</pre><p>pathway information</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><code class="hljs awk">curl https:<span class="hljs-regexp">//</span>rest.kegg.jp<span class="hljs-regexp">/get/</span>dme00010<br></code></pre></td></tr></table></figure></div><pre>ENTRY       dme00010                    PathwayNAME        Glycolysis / Gluconeogenesis - Drosophila melanogaster (fruit fly)DESCRIPTION Glycolysis is the process of converting glucose into pyruvate and generating small amounts of ATP (energy) and NADH (reducing power). It is a central pathway that produces important precursor metabolites: six-carbon compounds of glucose-6P and fructose-6P and three-carbon compounds of glycerone-P, glyceraldehyde-3P, glycerate-3P, phosphoenolpyruvate, and pyruvate [MD:M00001]. Acetyl-CoA, another important precursor metabolite, is produced by oxidative decarboxylation of pyruvate [MD:M00307]. When the enzyme genes of this pathway are examined in completely sequenced genomes, the reaction steps of three-carbon compounds from glycerone-P to pyruvate form a conserved core module [MD:M00002], which is found in almost all organisms and which sometimes contains operon structures in bacterial genomes. Gluconeogenesis is a synthesis pathway of glucose from noncarbohydrate precursors. It is essentially a reversal of glycolysis with minor variations of alternative paths [MD:M00003].CLASS       Metabolism; Carbohydrate metabolismPATHWAY_MAP dme00010  Glycolysis / GluconeogenesisMODULE      dme_M00001  Glycolysis (Embden-Meyerhof pathway), glucose => pyruvate [PATH:dme00010]            dme_M00002  Glycolysis, core module involving three-carbon compounds [PATH:dme00010]            dme_M00003  Gluconeogenesis, oxaloacetate => fructose-6P [PATH:dme00010]            dme_M00307  Pyruvate oxidation, pyruvate => acetyl-CoA [PATH:dme00010]DBLINKS     GO: 0006096 0006094ORGANISM    Drosophila melanogaster (fruit fly) [GN:dme]GENE        Dmel_CG8094  Hex-C; hexokinase C [KO:K00844] [EC:2.7.1.1]            Dmel_CG32849  Hex-t2; Hex-t2 [KO:K00844] [EC:2.7.1.1]            Dmel_CG3001  Hex-A; hexokinase A, isoform C [KO:K00844] [EC:2.7.1.1]            Dmel_CG33102  Hex-t1; Hex-t1 [KO:K00844] [EC:2.7.1.1]</pre><p>KEGG modules</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">curl https://rest.kegg.jp/list/md<br></code></pre></td></tr></table></figure></div><pre>md:M00951Cremeomycin biosynthesis, aspartate/3,4-AHBA => cremeomycinmd:M00952Benzoxazinoid biosynthesis, indoleglycerol phosphate => DIMBOA-glucosidemd:M00953Mugineic acid biosynthesis, methionine => 3-epihydroxymugineic acidmd:M00956Lysine degradation, bacteria, L-lysine => succinatemd:M00957Lysine degradation, bacteria, L-lysine => glutarate => succinate/acetyl-CoAmd:M00958Adenine ribonucleotide degradation, AMP => Uratemd:M00959Guanine ribonucleotide degradation, GMP => Uratemd:M00960Lysine degradation, bacteria, L-lysine => D-lysine => succinatemd:M00961Betacyanin biosynthesis, L-tyrosine => amaranthinmd:M00962Psilocybin biosynthesis, tryptophan => psilocybinmd:M00963Chanoclavine aldehyde biosynthesis, tryptophan => chanoclavine-I aldehydemd:M00964Fumigaclavine biosynthesis, chanoclavine-I aldehyde => fumigaclavine Cmd:M00965Vindoline biosynthesis, tabersonine => vindoline</pre><h2 id="Another-Project">Another Project</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">curl https://rest.kegg.jp/get/hsa05130/image --output test.png<br>curl https://rest.kegg.jp/get/hsa05130/conf --output <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;test.png&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">title</span> =<span class="hljs-string">&quot;123&quot;</span>; <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: #0075eb; width: 50px;position: absolute;  left: 485px; top: 959px;&quot;</span>&gt;</span>ITGB1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: #eb0027; width: 50px;position: absolute;  left: 750px; top: 1788px;&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropbtn&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: #eb0027&quot;</span>&gt;</span>NAIP<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-content&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> &gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> &gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> &gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    .dropbtn &#123;<br><span class="css">        <span class="hljs-attribute">background-color</span>: black;</span><br><span class="css">        <span class="hljs-attribute">color</span>: white;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: #px;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: #px;</span><br><span class="css">        <span class="hljs-attribute">border</span>: none;</span><br>    &#125;<br><br>    .dropdown &#123;<br><span class="css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">        <span class="hljs-attribute">display</span>: inline-block;</span><br>    &#125;<br><br>    .dropdown-content &#123;<br><span class="css">        <span class="hljs-attribute">display</span>: none;</span><br><span class="css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: lightgrey;</span><br><span class="css">        <span class="hljs-attribute">min-width</span>: #px;</span><br><span class="css">        <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;</span><br>    &#125;<br><br><span class="css">    <span class="hljs-selector-class">.dropdown-content</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">color</span>: black;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: #px #px;</span><br><span class="css">        <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="css">        <span class="hljs-attribute">display</span>: block;</span><br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.dropdown-content</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">background-color</span>: white;&#125;</span><br><span class="css">    <span class="hljs-selector-class">.dropdown</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.dropdown-content</span> &#123;<span class="hljs-attribute">display</span>: block;&#125;</span><br><span class="css">    <span class="hljs-selector-class">.dropdown</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.dropbtn</span> &#123;<span class="hljs-attribute">background-color</span>: grey;&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></div><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">KEGG API</summary>
    
    
    
    <category term="Biology" scheme="https://karobben.github.io/categories/Biology/"/>
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/"/>
    
    <category term="Database" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Database/"/>
    
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/tags/Bioinformatics/"/>
    
    <category term="Database" scheme="https://karobben.github.io/tags/Database/"/>
    
    <category term="api" scheme="https://karobben.github.io/tags/api/"/>
    
    <category term="KEGG" scheme="https://karobben.github.io/tags/KEGG/"/>
    
  </entry>
  
  <entry>
    <title>Venn Plot in R</title>
    <link href="https://karobben.github.io/2022/10/17/R/venn/"/>
    <id>https://karobben.github.io/2022/10/17/R/venn/</id>
    <published>2022-10-17T15:13:58.000Z</published>
    <updated>2023-02-12T01:22:15.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ggvenn">ggvenn</h2><p>Reference: <a href="https://statisticsglobe.com/ggvenn-r-package">statisticsglobe.com</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">library(ggvenn)<br><br>set.seed(<span class="hljs-number">654925</span>)                          <span class="hljs-comment"># Create example list</span><br>list_venn &lt;- <span class="hljs-built_in">list</span>(A = sort(sample(<span class="hljs-number">1</span>:<span class="hljs-number">100</span>, <span class="hljs-number">20</span>)),<br>                  B = sort(sample(<span class="hljs-number">1</span>:<span class="hljs-number">100</span>, <span class="hljs-number">20</span>)),<br>                  C = sort(sample(<span class="hljs-number">1</span>:<span class="hljs-number">100</span>, <span class="hljs-number">20</span>)),<br>                  D = sort(sample(<span class="hljs-number">1</span>:<span class="hljs-number">100</span>, <span class="hljs-number">20</span>)))<br>list_venn<br></code></pre></td></tr></table></figure></div><pre>list_venn                                                                                         $A[1]  1  3  4 11 19 20 22 32 34 36 47 48 58 59 60 64 69 72 97 98$B[1]  4 17 18 23 32 33 34 41 45 52 53 56 58 59 66 67 74 78 91 92$C[1]  3 10 28 31 34 38 46 47 51 57 58 65 67 70 72 74 80 89 94 97$D[1]  8 11 14 15 17 18 19 33 34 47 51 59 66 68 73 77 78 82 86 87</pre><table><thead><tr><th style="text-align:center"><img src="https://statisticsglobe.com/wp-content/uploads/2021/01/figure-1-plot-ggvenn-r-package-programming-language.png" alt=""></th><th style="text-align:center"><img src="https://statisticsglobe.com/wp-content/uploads/2021/01/figure-2-plot-ggvenn-r-package-programming-language.png" alt=""></th><th style="text-align:center"><img src="https://statisticsglobe.com/wp-content/uploads/2021/01/figure-3-plot-ggvenn-r-package-programming-language.png" alt=""></th></tr></thead><tbody><tr><td style="text-align:center"><code>ggvenn(list_venn, c(&quot;A&quot;, &quot;C&quot;))</code></td><td style="text-align:center"><code>ggvenn(list_venn, c(&quot;A&quot;, &quot;C&quot;, &quot;D&quot;))</code></td><td style="text-align:center"><code>ggvenn(list_venn)  </code></td></tr></tbody></table><div class="admonition note"><p class="admonition-title">Change the fill color</p><p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">ggvenn(list_venn, <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)) + scale_fill_brewer( palette = <span class="hljs-string">'Set1'</span>)<br></code></pre></td></tr></table></figure></div></p></div><p>Other related Posts:</p><ul><li><a href="https://www.datanovia.com/en/blog/venn-diagram-with-r-or-rstudio-a-million-ways/">Alboukadel</a><ul><li><a href="https://www.datanovia.com/en/blog/venn-diagram-with-r-or-rstudio-a-million-ways/"><img src="https://www.datanovia.com/en/wp-content/uploads/dn-tutorials/r-tutorial/figures/venn-diagram-in-r-or-rstudio-ggVennDiagram-1.png" alt=""></a></li></ul></li></ul><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">Venn Plot in R</summary>
    
    
    
    <category term="R" scheme="https://karobben.github.io/categories/R/"/>
    
    <category term="Plot" scheme="https://karobben.github.io/categories/R/Plot/"/>
    
    <category term="GGPLOT" scheme="https://karobben.github.io/categories/R/Plot/GGPLOT/"/>
    
    
    <category term="Plot" scheme="https://karobben.github.io/tags/Plot/"/>
    
    <category term="ggplot" scheme="https://karobben.github.io/tags/ggplot/"/>
    
  </entry>
  
</feed>
