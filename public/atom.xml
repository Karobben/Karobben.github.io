<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Karobben</title>
  
  <subtitle>Engjoy~</subtitle>
  <link href="https://karobben.github.io/atom.xml" rel="self"/>
  
  <link href="https://karobben.github.io/"/>
  <updated>2023-02-26T22:58:16.300Z</updated>
  <id>https://karobben.github.io/</id>
  
  <author>
    <name>Karobben</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>path find in a network plot</title>
    <link href="https://karobben.github.io/2023/02/26/Python/net-path/"/>
    <id>https://karobben.github.io/2023/02/26/Python/net-path/</id>
    <published>2023-02-26T17:22:57.000Z</published>
    <updated>2023-02-26T22:58:16.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="path-find-in-a-network-plot">path find in a network plot</h2><p>Here’s an example code for a more complicated network graph using NetworkX and finding a path from one node to another node:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> networkx <span class="hljs-keyword">as</span> nx<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment"># Create a graph</span><br>G = nx.DiGraph()<br><br><span class="hljs-comment"># Add nodes</span><br>G.add_nodes_from([<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>])<br><br><span class="hljs-comment"># Add edges</span><br>G.add_edges_from([(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>), (<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>), (<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>), (<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>), (<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>),<br>                  (<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>), (<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>), (<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>), (<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>)])<br><br><span class="hljs-comment"># Plot the graph</span><br>pos = nx.spring_layout(G, seed=<span class="hljs-number">123</span>)<br>nx.draw_networkx(G, pos, with_labels=<span class="hljs-literal">True</span>)<br>edge_labels = nx.get_edge_attributes(G, <span class="hljs-string">&#x27;weight&#x27;</span>)<br>nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)<br>plt.show()<br><br><span class="hljs-comment"># Find a path from node &#x27;A&#x27; to node &#x27;H&#x27;</span><br>path = nx.shortest_path(G, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>)<br>print(path)<br></code></pre></td></tr></table></figure></div><p>In this code, we create a directed graph <code>G</code> using <code>nx.DiGraph()</code>. We add nodes to the graph using <code>G.add_nodes_from()</code>, and add edges to the graph using <code>G.add_edges_from()</code>. We can assign a weight to each edge using a dictionary, but in this example we don’t do that.</p><p>We then use the <code>nx.spring_layout()</code> function to generate node positions for the graph. This function positions nodes using the Fruchterman-Reingold force-directed algorithm. In this example, we set the random seed to 123 using the <code>seed</code> parameter of <code>nx.spring_layout()</code>. This ensures that the initial conditions of the spring layout algorithm are the same each time you run the code, and the layout of the graph remains the same.</p><p>We then use <code>nx.draw_networkx()</code> to draw nodes and edges of the graph with labels. We also use <code>nx.get_edge_attributes()</code> and <code>nx.draw_networkx_edge_labels()</code> to add labels to the edges of the graph. Finally, we use <code>plt.show()</code> to display the plot.</p><p>After displaying the graph, we use <code>nx.shortest_path()</code> to find the shortest path from node ‘A’ to node ‘H’. The function returns a list of nodes that form the path. We print the path to the console.</p><p>Note that you can modify the graph and the path-finding algorithms according to your specific needs using the functions available in the NetworkX library.</p><h2 id="How-does-nx-shortest-path-works">How does <strong>nx.shortest_path</strong> works</h2><p>The <code>nx.shortest_path()</code> function in NetworkX is used to find the shortest path between two nodes in a graph. It uses the <em><strong>Dijkstra’s algorithm</strong></em>, which is an algorithm for finding the shortest paths between nodes in a graph.</p><p>The <code>nx.shortest_path()</code> function takes three parameters:</p><ul><li><code>G</code>: the graph to search for shortest path in.</li><li><code>source</code>: the starting node for the path.</li><li><code>target</code>: the ending node for the path.<br>The function returns a list of nodes in the shortest path from the <code>source</code> node to the <code>target</code> node.</li></ul><h2 id="what-is-Dijkstra’s-algorithm">what is <em><strong>Dijkstra’s algorithm</strong></em></h2><p><em><strong>Dijkstra’s algorithm</strong></em> is a graph search algorithm that works by finding the shortest path from a starting node to all other nodes in the graph. The algorithm maintains a set of visited nodes and a set of unvisited nodes, with the distance from the starting node to each unvisited node initialized to infinity. At each step, the algorithm selects the unvisited node with the smallest distance from the starting node and adds it to the visited set. It then updates the distances of all adjacent nodes that are still in the unvisited set, setting their distance to the sum of the distance to the current node and the weight of the edge between them. The algorithm continues until the target node is reached, or until all nodes have been visited.</p><p>Once the shortest path has been found, <code>nx.shortest_path()</code> returns a list of nodes in the path, in the order that they appear in the path.</p><h2 id="What-is-“bellman-ford”">What is “bellman-ford”?</h2><p>Bellman-Ford is an algorithm for finding the shortest paths between nodes in a weighted graph. The algorithm can handle negative edge weights, whereas Dijkstra’s algorithm, which we discussed in a previous question, cannot. However, Bellman-Ford is slower than Dijkstra’s algorithm and has a higher time complexity of O(V*E), where V is the number of vertices and E is the number of edges in the graph.</p><p>The Bellman-Ford algorithm works by relaxing all edges in the graph V-1 times, where V is the number of vertices in the graph. During each iteration, the algorithm checks if the distance to a node can be improved by going through another node. If so, it updates the distance to the node. The algorithm repeats this process V-1 times to ensure that all possible paths have been explored.</p><p>After the V-1 iterations, the algorithm performs one more check to see if there are any negative weight cycles in the graph. If there are, then the algorithm cannot find a shortest path because the distance to the node can be decreased indefinitely by traversing the negative cycle. In this case, the algorithm returns a message indicating that a negative cycle has been detected.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> networkx <span class="hljs-keyword">as</span> nx<br><br><span class="hljs-comment"># Create a graph</span><br>G = nx.DiGraph()<br><br><span class="hljs-comment"># Add nodes</span><br>G.add_nodes_from([<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>])<br><br><span class="hljs-comment"># Add edges with weights</span><br>G.add_weighted_edges_from([(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">3</span>), (<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">8</span>), (<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, -<span class="hljs-number">4</span>),<br>                           (<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-number">7</span>), (<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-number">2</span>),<br>                           (<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">2</span>), (<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, -<span class="hljs-number">5</span>)])<br><br><span class="hljs-comment"># Find the shortest paths using Bellman-Ford algorithm</span><br>distances, predecessors = nx.bellman_ford(G, <span class="hljs-string">&#x27;A&#x27;</span>)<br><br><span class="hljs-comment"># Print the distances</span><br>print(distances)<br><br><span class="hljs-comment"># Print the predecessors</span><br>print(predecessors)<br></code></pre></td></tr></table></figure></div><p>In this example, we create a directed graph with five nodes and eight edges, with some edges having negative weights. We then use <code>nx.bellman_ford()</code> to find the shortest paths from the node ‘A’ to all other nodes in the graph. The function returns two dictionaries: one with the shortest distance from the starting node to each node, and another with the predecessor node in the shortest path for each node. We print these dictionaries to the console.</p><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">path find in a network plot</summary>
    
    
    
    <category term="Python" scheme="https://karobben.github.io/categories/Python/"/>
    
    
    <category term="Network" scheme="https://karobben.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>Fruchterman Reingold layout</title>
    <link href="https://karobben.github.io/2023/02/20/LearnNotes/fruchterman-reingold/"/>
    <id>https://karobben.github.io/2023/02/20/LearnNotes/fruchterman-reingold/</id>
    <published>2023-02-21T03:44:24.000Z</published>
    <updated>2023-02-23T23:04:40.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Fruchterman–Reingold">Fruchterman–Reingold</h2><blockquote><p>Fruchterman-Reingold is an algorithm used for force-directed graph drawing, which is a way of visualizing graph structures in a 2D or 3D space. The algorithm was first introduced by Thomas M. Fruchterman and Edward M. Reingold in 1991.</p><p>The Fruchterman-Reingold algorithm works by simulating a physical system in which the nodes of a graph are treated as objects with electrical charges and the edges of the graph are treated as springs. The nodes are initially placed at random positions in the 2D or 3D space, and then the algorithm iteratively adjusts the position of the nodes based on the repulsion between the nodes and the attraction between the connected nodes. The nodes that are connected by an edge are pulled closer together, while the nodes that are not connected are pushed apart.</p><p>The Fruchterman-Reingold algorithm aims to minimize the total energy of the system by finding an equilibrium state where the forces between the nodes and edges are balanced. The algorithm iteratively adjusts the positions of the nodes until it reaches the equilibrium state. The result is a visually pleasing graph layout that allows the viewer to easily see the connections and relationships between the nodes.</p><p>The Fruchterman-Reingold algorithm is widely used in many fields such as social network analysis, information visualization, and bioinformatics. It has been implemented in many software packages, including Gephi, Cytoscape, and NetworkX.<br>Fruchterman–Reingold is a type of layout which widely be used in the network, social network and protein-protein interaction network for instance, analysis.<br><a title='ChatGPT'> Who sad this?</a></p></blockquote><p>So, imagine that all the nodes are electrons that carry the same charge. As a result, they prefer to stay away from each other and distribute evenly in a limited space. However, the connections (edges) work like springs that pull two nodes together. If two groups have connections that frequently occur within the group, those nodes would prefer to be close to each other and form two large clusters because of the “springs”. The two groups would be away from each other because no/or a few of spring pulls them together, and the two huge groups of nodes would push the nodes outside the cluster. If a new node is added that has connections to both clusters and the number is significant enough, it could form an hourglass-like structure. And if there are a few other connections between two clusters at the same time, it would merge the two groups into a single one.</p><p>Harel–Koren Fast Multiscaling layout</p><h2 id="Want-to-know-more">Want to know more?</h2><p>This algorithm was published in 1991 by Fruchterman &amp; Reingold<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>. It is a undirected layout and modified from the spring-embedder model and VLSI technique called force-directed placement.</p><p>By this methoud, it is mainly concerned about:</p><ol><li>Distribute the vertices evenly in the frame.</li><li>Minimize edge crossings.</li><li>Make  edge lengths uniform.</li><li>Reflect inherent symmetry.</li><li>Conform to the  frame.</li></ol><ul><li><p>Repulsive forces<br>$<br>f _{rep}(u,v) = \frac{c _{rep}}{||p _v - p _u||^ 2} × \overrightarrow{p _vp _u}<br>$</p></li><li><p>Attractive forces<br>$<br>f _{spring}(u,v) = c _{spring} × log\frac{||p _v - p _u||}{\ell} × \overrightarrow{p _vp _u}<br>$</p></li></ul><p>$<br>f_{attr}(u,v) = f _spring(u,v)-f _{rep}(u,v)<br>$</p><ul><li>Resulting displacement vector<br>$<br>F _u =  \sum _{v \in V} f _{rep}(u, v) + \sum _{uv \in E} f _{attr} (u,v)<br>$</li></ul><p>More Details and example you can find at <a href="https://www.youtube.com/watch?v=JAe7Oscsp98">Philipp Kindermann’s Youtobe Video (2021) </a></p><style>pre {  background-color:#38393d;  color: #5fd381;}</style><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Fruchterman, Thomas MJ, and Edward M. Reingold. “Graph drawing by force‐directed placement.” Software: Practice and experience 21.11 (1991): 1129-1164. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">Fruchterman Reingold</summary>
    
    
    
    <category term="Notes" scheme="https://karobben.github.io/categories/Notes/"/>
    
    <category term="Statistic" scheme="https://karobben.github.io/categories/Notes/Statistic/"/>
    
    <category term="others" scheme="https://karobben.github.io/categories/Notes/Statistic/others/"/>
    
    
    <category term="Statistic" scheme="https://karobben.github.io/tags/Statistic/"/>
    
    <category term="network" scheme="https://karobben.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>Overlap calculation in R</title>
    <link href="https://karobben.github.io/2023/02/14/R/r-overlap/"/>
    <id>https://karobben.github.io/2023/02/14/R/r-overlap/</id>
    <published>2023-02-14T07:25:30.000Z</published>
    <updated>2023-02-23T23:05:37.180Z</updated>
    
    <content type="html"><![CDATA[<h2 id="overlap">overlap</h2><p><code>overlap</code>: The overlap package provides functions to calculate and visualize the overlap of two or more density distributions. The <code>overlapEst</code> function can be used to calculate the overlap of two density distributions, while the <code>overlapPlot</code> function can be used to visualize the overlap.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">library(overlap)<br>library(ggplot2)<br><br><span class="hljs-comment"># Generate two random lists of numbers</span><br>set.seed(<span class="hljs-number">123</span>)<br>list1 &lt;- rnorm(<span class="hljs-number">100</span>, mean = <span class="hljs-number">5</span>, sd = <span class="hljs-number">1</span>)<br>list2 &lt;- rnorm(<span class="hljs-number">100</span>, mean = <span class="hljs-number">8</span>, sd = <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Calculate overlap density</span><br>overlapEst(list1, list2)<br><br>ggplot() + geom_density(aes(list1, fill = <span class="hljs-string">&quot;list1&quot;</span>), alpha = <span class="hljs-number">.5</span>) + <br>  geom_density(aes(list2, fill = <span class="hljs-string">&quot;list2&quot;</span>), alpha = <span class="hljs-number">.5</span>) + theme_bw()<br><br></code></pre></td></tr></table></figure></div><pre>    Dhat1     Dhat4     Dhat5 0.2460298        NA        NA </pre><p><img src="https://s1.ax1x.com/2023/02/14/pSTf79K.png" alt="Density overlapping estimate 1"></p><h2 id="overlapping">overlapping</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">library(overlapping)<br><br><span class="hljs-comment"># Generate two random lists of numbers</span><br>set.seed(<span class="hljs-number">123</span>)<br>list1 &lt;- rnorm(<span class="hljs-number">100</span>, mean = <span class="hljs-number">5</span>, sd = <span class="hljs-number">1</span>)<br>list2 &lt;- rnorm(<span class="hljs-number">100</span>, mean = <span class="hljs-number">8</span>, sd = <span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Calculate overlap density</span><br>overlap(<span class="hljs-built_in">list</span>(list1, list2))<br></code></pre></td></tr></table></figure></div><pre>$OV[1] 0.1431085</pre><p>I personally believe that this result is more reliable.</p><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">Overlap calculation in R with library overlap and kerndwd</summary>
    
    
    
    <category term="Data" scheme="https://karobben.github.io/categories/Data/"/>
    
    <category term="Statistic" scheme="https://karobben.github.io/categories/Data/Statistic/"/>
    
    
    <category term="R" scheme="https://karobben.github.io/tags/R/"/>
    
    <category term="Data" scheme="https://karobben.github.io/tags/Data/"/>
    
  </entry>
  
  <entry>
    <title>From igraph to ggplot2</title>
    <link href="https://karobben.github.io/2023/02/07/R/igraph-ggplot2/"/>
    <id>https://karobben.github.io/2023/02/07/R/igraph-ggplot2/</id>
    <published>2023-02-07T18:44:28.000Z</published>
    <updated>2023-02-12T01:22:27.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Turn-igraph-result-to-ggplot2-plot">Turn igraph result to ggplot2 plot</h2><div class="admonition note"><p class="admonition-title">Why you want to turn igraph network polot to ggplot?</p><ul><li>Flexibility: ggplot is a very flexible and customizable plotting package that allows you to create high-quality, publication-ready plots with a high degree of control over the visual aesthetics of your plots. You can easily modify various aspects of the plot, such as the color, shape, and size of the nodes and edges, and the placement of the labels.</li><li>Integration with igraph: ggplot works seamlessly with igraph, making it easy to create complex and informative visualizations of your network data. You can use ggplot to visualize network data in a variety of ways, including heatmaps, scatterplots, and bar charts.</li><li>Consistency: ggplot provides a consistent grammar for building plots, which makes it easy to create plots with a consistent style and look across different datasets. This can be particularly useful if you are working with multiple datasets and want to create a consistent visual language for your plots.</li><li>Reproducibility: ggplot produces code that can be easily reproduced, making it easier to share and collaborate on your work. You can also easily modify and update your plots as your data or analysis changes.Overall, using ggplot to plot igraph results can help you create informative, visually appealing, and reproducible visualizations of your network data.</li></ul></div><p>Basic idea of this post is from <a href="https://chrischizinski.github.io/rstats/igraph-ggplotll/">© Christopher Chizinski, 2014</a>. It is an old post but all codes work just fine!</p><h2 id="Example-data-for-igraph">Example data for igraph</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">library(stringr)<br>library(reshape2)<br>library(ggplot2)<br>library(igraph)<br>library(RColorBrewer)<br>library(qgraph)<br>library(ggthemes)<br><br><br><span class="hljs-comment"># data clean</span><br>dataUU &lt;- read.table(<span class="hljs-string">&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/13_AdjacencyUndirectedUnweighted.csv&quot;</span>, header=<span class="hljs-literal">TRUE</span>)<br>TB &lt;- na.omit(melt(dataUU))<br>TB$from &lt;- str_replace_all(TB$from, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>)<br><span class="hljs-comment"># width of the edges</span><br>set.seed(<span class="hljs-number">3</span>)<br>TB$value = runif(nrow(TB), <span class="hljs-built_in">min</span>=<span class="hljs-number">0</span>, <span class="hljs-built_in">max</span>=<span class="hljs-number">10</span>)<br><span class="hljs-comment"># size of pointsd</span><br>TB_size &lt;- as.data.frame(table(<span class="hljs-built_in">c</span>(as.matrix(TB[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]))))<br><br>network=graph_from_data_frame(TB[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>] )<br><br>set.seed(<span class="hljs-number">1</span>)<br>e &lt;- get.edgelist(network,<span class="hljs-built_in">names</span>=<span class="hljs-literal">FALSE</span>)<br>l &lt;- qgraph.layout.fruchtermanreingold(e,vcount=vcount(network),  <br>    area=<span class="hljs-number">30</span>*(vcount(network)^<span class="hljs-number">2</span>), repulse.rad=(vcount(network)^<span class="hljs-number">4</span>))  <br>plot(network,  <br>    layout=l, <br>    vertex.size=<span class="hljs-number">4</span>, vertex.label=<span class="hljs-literal">NA</span>,  <br>    edge.arrow.size= <span class="hljs-number">0</span>, <br>)<br></code></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r"><span class="hljs-comment">## convert the layout to a data.frame</span><br>fr.all.df &lt;- as.data.frame(l)<br><span class="hljs-comment">## add in the species codes</span><br>fr.all.df$species &lt;- V(network)$name<br><span class="hljs-comment">## add size for each nodes</span><br>fr.all.df$size &lt;- TB_size$Freq[match(fr.all.df$species, TB_size$Var1)]<br><br>g &lt;- TB[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]<br>colnames(g) &lt;-<span class="hljs-built_in">c</span>(<span class="hljs-string">&#x27;from&#x27;</span>, <span class="hljs-string">&#x27;to&#x27;</span>)<br>g$weight = TB[[<span class="hljs-number">3</span>]]<br>g$from.x &lt;- fr.all.df$V1[match(g$from, fr.all.df$species)]  <span class="hljs-comment">#  match the from locations from the node data.frame we previously connected</span><br>g$from.y &lt;- fr.all.df$V2[match(g$from, fr.all.df$species)]<br>g$to.x &lt;- fr.all.df$V1[match(g$to, fr.all.df$species)]  <span class="hljs-comment">#  match the to locations from the node data.frame we previously connected</span><br>g$to.y &lt;- fr.all.df$V2[match(g$to, fr.all.df$species)]<br><br>P &lt;-ggplot() +<br>        geom_segment(data=g,aes(x=from.x,xend = to.x, y=from.y,yend = to.y, size = weight),colour=<span class="hljs-string">&quot;black&quot;</span>, alpha =<span class="hljs-number">.1</span> ) +<br>        geom_point(data=fr.all.df,aes(x=V1,y=V2)) +<br>        geom_text(data=fr.all.df,aes(x=V1,y=V2,label=<span class="hljs-string">&quot;&quot;</span>)) +<br>        theme_map()   + coord_fixed(ratio = <span class="hljs-number">1</span>) + coord_fixed(ratio = <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></div><table><thead><tr><th style="text-align:center"><img src="https://s1.ax1x.com/2023/02/08/pS2NQED.png" alt=""></th><th style="text-align:center"><img src="https://s1.ax1x.com/2023/02/08/pS2N14H.png" alt=""></th></tr></thead><tbody></tbody></table><h2 id="include-size-of-the-dots-and-the-weight-of-edges">include size of the dots and the weight of edges</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">ggplot() +<br>  geom_segment(data=g,aes(x=from.x,xend = to.x, y=from.y,yend = to.y, size = weight), size = <span class="hljs-built_in">log</span>(g$weight + <span class="hljs-number">1</span>)/<span class="hljs-number">2</span>, colour=<span class="hljs-string">&quot;black&quot;</span>, alpha =<span class="hljs-number">.1</span> ) +<br>  geom_point(data=fr.all.df,aes(x=V1,y=V2, size = size, color = size), alpha = <span class="hljs-number">.8</span>) +<br>  geom_text(data=fr.all.df,aes(x=V1,y=V2,label=<span class="hljs-string">&quot;&quot;</span>)) +<br>  theme_map()   + coord_fixed(ratio = <span class="hljs-number">1</span>) + coord_fixed(ratio = <span class="hljs-number">1</span>) + scale_color_gradient(high = <span class="hljs-string">&#x27;red&#x27;</span>, low = <span class="hljs-string">&#x27;steelblue&#x27;</span>)<br></code></pre></td></tr></table></figure></div><p><img src="https://s1.ax1x.com/2023/02/08/pS2UVIg.png" alt=""></p><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">Turn igraph result to ggplot2 and more</summary>
    
    
    
    <category term="R" scheme="https://karobben.github.io/categories/R/"/>
    
    <category term="Plot" scheme="https://karobben.github.io/categories/R/Plot/"/>
    
    <category term="GGPLOT" scheme="https://karobben.github.io/categories/R/Plot/GGPLOT/"/>
    
    
    <category term="ggplot2" scheme="https://karobben.github.io/tags/ggplot2/"/>
    
    <category term="network" scheme="https://karobben.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>How to set a static IP address for Linux</title>
    <link href="https://karobben.github.io/2023/01/31/Linux/linux-static-ip/"/>
    <id>https://karobben.github.io/2023/01/31/Linux/linux-static-ip/</id>
    <published>2023-01-31T16:40:12.000Z</published>
    <updated>2023-02-12T16:08:19.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="How-to-set-a-static-ip-for-Pop-os">How to set a static ip for Pop os</h2><ol><li>Find <code>Gateway</code> and the <code>DNS</code> for your network</li></ol><p><img src="https://s1.ax1x.com/2023/02/01/pS0LD5n.png" alt=""><br>Setting → Network → Check the details of your network.<br>Here, <code>Default Route</code> is the <code>Gateway</code>,<br><code>DNS</code> is the <code>DNS</code></p><ol start="2"><li>Find the Netmask for your network by <code>ifconfig</code></li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">ifconfig<br></code></pre></td></tr></table></figure></div><pre>eno1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500        inet 192.168.3.1  netmask 255.255.255.0  broadcast 192.168.3.255...</pre><ol start="3"><li>fill them in IPv4 setting</li></ol><p>Fill the address you want and rest of other infor you jut get from above.<br>||<img src="https://s1.ax1x.com/2023/02/01/pS0L62V.png" alt=""></p><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">How to set a static IP address for Linux</summary>
    
    
    
    <category term="Linux" scheme="https://karobben.github.io/categories/Linux/"/>
    
    <category term="System" scheme="https://karobben.github.io/categories/Linux/System/"/>
    
    
    <category term="Linux" scheme="https://karobben.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>IdTrackerAI</title>
    <link href="https://karobben.github.io/2023/01/24/Bioinfor/idtracker/"/>
    <id>https://karobben.github.io/2023/01/24/Bioinfor/idtracker/</id>
    <published>2023-01-24T22:41:05.000Z</published>
    <updated>2023-02-12T01:23:31.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Set-up-Install">Set up/Install</h2><p><a href="http://localhost:4000/2023/01/24/Bioinfor/idtracker/">Documentation</a></p><p>how to install correct pytorch and cuda: <a href="https://pytorch.org/get-started/previous-versions/">https://pytorch.org/get-started/previous-versions/</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">conda create -y --name idtrackerai python=3.7 Tensorflow=2.0.0 cudatoolkit=11.3.1 pytorch=1.10.0<br>conda activate idtrackerai<br>pip install <span class="hljs-string">&quot;idtrackerai[gui]&quot;</span><br></code></pre></td></tr></table></figure></div><h2 id="Idtracker-Data-analysis">Idtracker Data analysis</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> trajectorytools <span class="hljs-keyword">as</span> tt<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>trajectories_file_path = <span class="hljs-string">&#x27;trajectories_wo_gaps/trajectories_wo_gaps.npy&#x27;</span><br>trajectories_dict = np.load(trajectories_file_path, allow_pickle=<span class="hljs-literal">True</span>).item()<br>trajectories = trajectories_dict[<span class="hljs-string">&#x27;trajectories&#x27;</span>]<br>tr = tt.Trajectories.from_positions(trajectories)<br><br><br>fig, ax_trajectories = plt.subplots(figsize=(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br>frame_range = <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>*<span class="hljs-number">30</span>) <br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(tr.number_of_individuals):<br>    ax_trajectories.plot(tr.s[frame_range,i,<span class="hljs-number">0</span>], tr.s[frame_range,i,<span class="hljs-number">1</span>])<br>    ax_trajectories.set_aspect(<span class="hljs-string">&#x27;equal&#x27;</span>,<span class="hljs-string">&#x27;box&#x27;</span>)<br>    ax_trajectories.set_title(<span class="hljs-string">&#x27;Trajectories&#x27;</span>,fontsize=<span class="hljs-number">24</span>)<br>    ax_trajectories.set_xlabel(<span class="hljs-string">&#x27;X (BL)&#x27;</span>,fontsize=<span class="hljs-number">24</span>)<br>    ax_trajectories.set_ylabel(<span class="hljs-string">&#x27;Y (BL)&#x27;</span>,fontsize=<span class="hljs-number">24</span>)<br>fig.savefig(<span class="hljs-string">&quot;trajectory2.png&quot;</span>)<br></code></pre></td></tr></table></figure></div><p><img src="https://s1.ax1x.com/2023/01/25/pSt1TnH.png" alt="Trajectory"></p><p>With video</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> colors<br><br>Palette = [<span class="hljs-string">&quot;#B03D3B&quot;</span>, <span class="hljs-string">&quot;#B86C3D&quot;</span>, <span class="hljs-string">&quot;#BF8040&quot;</span>, <span class="hljs-string">&quot;#ACC144&quot;</span>, <span class="hljs-string">&quot;#78C144&quot;</span>, <span class="hljs-string">&quot;#47C291&quot;</span>, <span class="hljs-string">&quot;#478BC2&quot;</span>, <span class="hljs-string">&quot;#4760C2&quot;</span>, <span class="hljs-string">&quot;#574BC3&quot;</span>, <span class="hljs-string">&quot;#834BC3&quot;</span>, <span class="hljs-string">&quot;#C34BAB&quot;</span>, <span class="hljs-string">&quot;#C14465&quot;</span>, <span class="hljs-string">&quot;#DEB59C&quot;</span>, <span class="hljs-string">&quot;#D7DF9F&quot;</span>, <span class="hljs-string">&quot;#A7DF9F&quot;</span>, <span class="hljs-string">&quot;#9FDFD9&quot;</span>, <span class="hljs-string">&quot;#A3B3E0&quot;</span>, <span class="hljs-string">&quot;#D0A3E0&quot;</span>, <span class="hljs-string">&quot;#E2A7CD&quot;</span>, <span class="hljs-string">&quot;#361712&quot;</span>, <span class="hljs-string">&quot;#1A3913&quot;</span>, <span class="hljs-string">&quot;#132B39&quot;</span>, <span class="hljs-string">&quot;#2D1339&quot;</span>, <span class="hljs-string">&quot;#391330&quot;</span>]<br>Num = <span class="hljs-number">0</span><br><span class="hljs-comment">#V_loc = &#x27;/mnt/Ken_lap/Vlog/upload/promE-GFP/20210622_promE-GFP_C0074_Trim.mp4&#x27;</span><br>V_loc = <span class="hljs-string">&#x27;/mnt/Ken_lap/Vlog/upload/promE-fru-IR-v330035/20220116-promE-v330035-298d-C0379_Trim-2.mp4&#x27;</span><br><span class="hljs-comment">#V_loc = &#x27;/mnt/Ken_lap/Vlog/upload/elav-GS-fru-IR-V330035/20220123C0394_Trim.mp4&#x27;</span><br><br>cap=cv2.VideoCapture(V_loc)<br>fourcc = cv2.VideoWriter_fourcc(*<span class="hljs-string">&#x27;XVID&#x27;</span>)<br>out = cv2.VideoWriter(<span class="hljs-string">&#x27;output.avi&#x27;</span>,fourcc, <span class="hljs-number">20.0</span>, (<span class="hljs-number">1920</span>,<span class="hljs-number">1080</span>))<br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">True</span>):<br>  ret,frame=cap.read()<br>  <span class="hljs-keyword">for</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(trajectories[<span class="hljs-number">0</span>])):<br>    XY = np.array(trajectories[Num][<span class="hljs-built_in">id</span>], dtype = <span class="hljs-built_in">int</span>)<br>    C = np.array(colors.to_rgba(Palette[<span class="hljs-built_in">id</span>]))[:-<span class="hljs-number">1</span>] * <span class="hljs-number">225</span><br>    cv2.putText(frame, <span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>) ,(XY[<span class="hljs-number">0</span>], XY[<span class="hljs-number">1</span>]), cv2.FONT_HERSHEY_COMPLEX, <span class="hljs-number">1</span>, C, <span class="hljs-number">2</span>)<br><br>  cv2.imshow(<span class="hljs-string">&quot;video&quot;</span>,frame)<br>  Num +=<span class="hljs-number">1</span> <br>  out.write(frame)<br>  <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">30</span>)&amp;<span class="hljs-number">0xFF</span>==<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>      cv2.destroyAllWindows()<br>      <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> trajectorytools <span class="hljs-keyword">as</span> tt<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> json<br><br><br>F = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data/csv/20220116-promE-v330035-298d-C0379_Trim-2.mp4_.json&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br>Dict = json.loads(F)<br>trajectories = np.array([[Dict[i][ii][<span class="hljs-string">&#x27;body&#x27;</span>][:<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> np.sort([ii <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> Dict[<span class="hljs-string">&#x27;12&#x27;</span>].keys()])] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Dict.keys()])<br>tr = tt.Trajectories.from_positions(trajectories)<br><br>fig, ax_trajectories = plt.subplots(figsize=(<span class="hljs-number">5</span>,<span class="hljs-number">5</span>))<br>frame_range = <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>*<span class="hljs-number">30</span>) <br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(tr.number_of_individuals):<br>    ax_trajectories.plot(tr.s[frame_range,i,<span class="hljs-number">0</span>], tr.s[frame_range,i,<span class="hljs-number">1</span>])<br>    ax_trajectories.set_aspect(<span class="hljs-string">&#x27;equal&#x27;</span>,<span class="hljs-string">&#x27;box&#x27;</span>)<br>    ax_trajectories.set_title(<span class="hljs-string">&#x27;Trajectories&#x27;</span>,fontsize=<span class="hljs-number">24</span>)<br>    ax_trajectories.set_xlabel(<span class="hljs-string">&#x27;X (BL)&#x27;</span>,fontsize=<span class="hljs-number">24</span>)<br>    ax_trajectories.set_ylabel(<span class="hljs-string">&#x27;Y (BL)&#x27;</span>,fontsize=<span class="hljs-number">24</span>)<br>    ax_trajectories.set_aspect(<span class="hljs-number">.5</span>)<br><br><br>fig.savefig(<span class="hljs-string">&quot;20220123C0394_Trim_30.png&quot;</span>)<br><br><br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> colors<br><br>Palette = [<span class="hljs-string">&quot;#B03D3B&quot;</span>, <span class="hljs-string">&quot;#B86C3D&quot;</span>, <span class="hljs-string">&quot;#BF8040&quot;</span>, <span class="hljs-string">&quot;#ACC144&quot;</span>, <span class="hljs-string">&quot;#78C144&quot;</span>, <span class="hljs-string">&quot;#47C291&quot;</span>, <span class="hljs-string">&quot;#478BC2&quot;</span>, <span class="hljs-string">&quot;#4760C2&quot;</span>, <span class="hljs-string">&quot;#574BC3&quot;</span>, <span class="hljs-string">&quot;#834BC3&quot;</span>, <span class="hljs-string">&quot;#C34BAB&quot;</span>, <span class="hljs-string">&quot;#C14465&quot;</span>, <span class="hljs-string">&quot;#DEB59C&quot;</span>, <span class="hljs-string">&quot;#D7DF9F&quot;</span>, <span class="hljs-string">&quot;#A7DF9F&quot;</span>, <span class="hljs-string">&quot;#9FDFD9&quot;</span>, <span class="hljs-string">&quot;#A3B3E0&quot;</span>, <span class="hljs-string">&quot;#D0A3E0&quot;</span>, <span class="hljs-string">&quot;#E2A7CD&quot;</span>, <span class="hljs-string">&quot;#361712&quot;</span>, <span class="hljs-string">&quot;#1A3913&quot;</span>, <span class="hljs-string">&quot;#132B39&quot;</span>, <span class="hljs-string">&quot;#2D1339&quot;</span>, <span class="hljs-string">&quot;#391330&quot;</span>]<br>V_list = &#123;<span class="hljs-string">&quot;20210622_promE-GFP_C0074_Trim.mp4&quot;</span>: <span class="hljs-string">&#x27;/mnt/8A26661926660713/Vlog/upload/promE-GFP/20210622_promE-GFP_C0074_Trim.mp4&#x27;</span>,<br>    <span class="hljs-string">&quot;20220116-promE-v330035-298d-C0379_Trim-2.mp4&quot;</span>: <span class="hljs-string">&#x27;/mnt/8A26661926660713/Vlog/upload/promE-fru-IR-v330035/20220116-promE-v330035-298d-C0379_Trim-2.mp4&#x27;</span>,<br>    <span class="hljs-string">&quot;20220123C0394_Trim.mp4&quot;</span>: <span class="hljs-string">&#x27;/mnt/8A26661926660713/Vlog/upload/elav-GS-fru-IR-V330035/20220123C0394_Trim.mp4&#x27;</span>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Video_output</span>(<span class="hljs-params">Video, V_loc</span>):</span><br>  loc = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> os.listdir(<span class="hljs-string">&quot;data/csv&quot;</span>) <span class="hljs-keyword">if</span> Video <span class="hljs-keyword">in</span> i <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;json&quot;</span> <span class="hljs-keyword">in</span> i][<span class="hljs-number">0</span>]<br>  F = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data/csv/&quot;</span> + loc , <span class="hljs-string">&#x27;r&#x27;</span>).read()<br>  Dict = json.loads(F)<br>  trajectories = np.array([[Dict[i][ii][<span class="hljs-string">&#x27;body&#x27;</span>][:<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> np.sort([ii <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> Dict[<span class="hljs-string">&#x27;12&#x27;</span>].keys()])] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Dict.keys()])<br>  tr = tt.Trajectories.from_positions(trajectories)<br><br>  Num = <span class="hljs-number">0</span><br>  cap=cv2.VideoCapture(V_loc)<br>  fourcc = cv2.VideoWriter_fourcc(*<span class="hljs-string">&#x27;XVID&#x27;</span>)<br>  out = cv2.VideoWriter(Video + <span class="hljs-string">&quot;_30.avi&quot;</span>, fourcc, <span class="hljs-number">20.0</span>, (<span class="hljs-number">1920</span>,<span class="hljs-number">1080</span>))<br>  <br>  List = []<br>  <span class="hljs-keyword">while</span> Num &lt;= <span class="hljs-number">900</span>:<br>    ret,frame=cap.read()<br>    List += [trajectories[Num]]<br>    List = List[-<span class="hljs-number">100</span>:]<br>    <span class="hljs-keyword">for</span> Trace <span class="hljs-keyword">in</span> List:<br>      <span class="hljs-keyword">for</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Trace)):<br>        XY = np.array(Trace[<span class="hljs-built_in">id</span>]  * (<span class="hljs-number">1920</span>, <span class="hljs-number">1080</span>), dtype = <span class="hljs-built_in">int</span>)<br>        C = np.array(colors.to_rgba(Palette[<span class="hljs-built_in">id</span>]))[:-<span class="hljs-number">1</span>] * <span class="hljs-number">225</span><br>        cv2.putText(frame, <span class="hljs-string">&quot;.&quot;</span> ,(XY[<span class="hljs-number">0</span>], XY[<span class="hljs-number">1</span>]), cv2.FONT_HERSHEY_COMPLEX, <span class="hljs-number">1</span>, C, <span class="hljs-number">2</span>)<br><br>    Trace = List[-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Trace)):<br>      XY = np.array(Trace[<span class="hljs-built_in">id</span>]  * (<span class="hljs-number">1920</span>, <span class="hljs-number">1080</span>), dtype = <span class="hljs-built_in">int</span>)<br>      C = np.array(colors.to_rgba(Palette[<span class="hljs-built_in">id</span>]))[:-<span class="hljs-number">1</span>] * <span class="hljs-number">225</span><br>      cv2.putText(frame, <span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>) ,(XY[<span class="hljs-number">0</span>], XY[<span class="hljs-number">1</span>]), cv2.FONT_HERSHEY_COMPLEX, <span class="hljs-number">1</span>, C, <span class="hljs-number">2</span>)<br><br>    cv2.imshow(<span class="hljs-string">&quot;video&quot;</span>,frame)<br>    Num +=<span class="hljs-number">1</span> <br>    out.write(frame)<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">30</span>)&amp;<span class="hljs-number">0xFF</span>==<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>        cv2.destroyAllWindows()<br>        out.write(frame)<br>        <span class="hljs-keyword">break</span><br>  cv2.destroyAllWindows()<br>  out.write(frame)<br><br><br><br><span class="hljs-keyword">for</span> Video <span class="hljs-keyword">in</span> V_list.keys():<br>    Video_output(Video, V_list[Video])<br></code></pre></td></tr></table></figure></div><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">IdTrackerAI</summary>
    
    
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/categories/Bioinformatics/"/>
    
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/tags/Bioinformatics/"/>
    
    <category term="Machine Learning" scheme="https://karobben.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>VS code</title>
    <link href="https://karobben.github.io/2023/01/13/Linux/vscode/"/>
    <id>https://karobben.github.io/2023/01/13/Linux/vscode/</id>
    <published>2023-01-13T20:31:21.000Z</published>
    <updated>2023-02-12T01:23:35.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VS-code">VS code</h2><p>I am a loyal Atom user. But Atom has died and I have to move on.</p><h2 id="Hotkeys">Hotkeys</h2><p><a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf">Keyboard shortcuts for Linux</a></p><ul><li>Fold all: <code>ctrl+k</code> <code>ctrl+0</code></li><li>Release all: <code>ctrl+k</code> <code>ctrl+j</code></li><li>wrap text: <code>Alt+z</code></li></ul><h2 id="Plugins-List">Plugins List</h2><p><code>ctrl+shift+x</code>  to open and search plugins.</p><ul><li>Markdown Preview Enhance</li><li>R</li><li>Code Spell Checker</li></ul><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">VS code, ide for all</summary>
    
    
    
    <category term="Linux" scheme="https://karobben.github.io/categories/Linux/"/>
    
    <category term="Software" scheme="https://karobben.github.io/categories/Linux/Software/"/>
    
    
    <category term="Linux" scheme="https://karobben.github.io/tags/Linux/"/>
    
    <category term="Software" scheme="https://karobben.github.io/tags/Software/"/>
    
    <category term="IDE" scheme="https://karobben.github.io/tags/IDE/"/>
    
    <category term="vscode" scheme="https://karobben.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>String DB</title>
    <link href="https://karobben.github.io/2023/01/09/Bioinfor/string-db/"/>
    <id>https://karobben.github.io/2023/01/09/Bioinfor/string-db/</id>
    <published>2023-01-10T03:01:48.000Z</published>
    <updated>2023-02-12T01:23:41.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="String-Database">String Database</h2><h3 id="Download-Specious-Network">Download Specious Network</h3><p><a href="https://string-db.org/cgi/download?sessionId=byDJhSpQeXPo&amp;species_text=Drosophila+melanogaster">Link to downloading the networks</a></p><p>An example of download files:</p><ul><li>Link file: <code>7227.protein.physical.links.full.v11.5.txt</code></li><li>Protein annotation: <code>7227.protein.info.v11.5.txt.gz</code></li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">TB &lt;- read.table(<span class="hljs-string">&quot;7227.protein.links.detailed.v11.5.txt&quot;</span>, header = <span class="hljs-built_in">T</span>)<br><br><span class="hljs-built_in">dim</span>(TB)<br>str(TB)<br></code></pre></td></tr></table></figure></div><pre>[1] 4343798      10'data.frame':4343798 obs. of  10 variables: $ protein1      : chr  "7227.FBpp0070001" "7227.FBpp0070001" "7227.FBpp0070001" "7227.FBpp0070001" ... $ protein2      : chr  "7227.FBpp0293850" "7227.FBpp0087873" "7227.FBpp0079990" "7227.FBpp0080090" ... $ neighborhood  : int  0 0 0 0 0 0 0 0 0 0 ... $ fusion        : int  0 0 0 0 0 0 0 0 0 0 ... $ cooccurence   : int  0 0 0 0 0 0 0 0 0 0 ... $ coexpression  : int  151 153 167 298 446 371 242 371 373 238 ... $ experimental  : int  0 0 0 0 0 0 0 0 0 0 ... $ database      : int  0 0 0 0 0 0 0 0 0 0 ... $ textmining    : int  0 0 0 0 0 0 0 0 0 0 ... $ combined_score: int  150 152 167 298 446 371 241 371 373 237 ...</pre><ul><li>Protein 1: Start protein</li><li>Protein 2: Connections from Protein 1 to protein 2</li><li>neighborhood: Physical neighborhood on the Genome</li><li>fusion: raw fusion score for COG mode (deprecated).</li><li>cooccurence: raw cooccurence score for COG mode (deprecated).</li><li>coexpression: expression patterns in a group of RNA-Seq are similar</li><li>experimental: experimental score (derived from experimental data, such as, affinity chromatography).</li><li>database: database score (derived from curated data of various databases).</li><li>textmining:  textmining score (derived from co-occurring mentioning of gene/protein names in abstracts).</li><li>combined_score: scores in total</li></ul><p>From:</p><ul><li><a href="https://string-db.org/help/database/#table-networkscore_types">Table: network.score_types</a></li><li><a href="https://string-db.org/help/getting_started/">Starting Point</a></li></ul><div class="admonition question"><p class="admonition-title">How do I select a reasonable score cut-off value for my analysis?</p><p>You can use the score cut-off to limit the number of interactions to those that have higher confidence and are more likely to be true positives. Setting the cutoff lower will increase coverage but also a fraction of false positives. You have to choose some <strong>arbitrary number</strong> based on the number of interactions you need for your analysis.</p></div><div class="admonition question"><p class="admonition-title">What is co-occurrence</p><p>A type of phylogenetic profile – the patterns of the presence or absence of orthologs across many organisms<a href="https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1002340">© Pan-Jun Kim, 2011</a></p></div><h3 id="Example-in-R">Example in R</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">library(ggplot2)<br>library(stringr)<br>library(igraph)<br>library(reshape2)<br><br>Anno &lt;-  read.csv(<span class="hljs-string">&quot;7227.protein.info.v11.5.txt&quot;</span>, sep =<span class="hljs-string">&#x27;\t&#x27;</span>, header = <span class="hljs-built_in">T</span>, <span class="hljs-built_in">quote</span> = <span class="hljs-string">&quot;&quot;</span>)<br>Anno[[<span class="hljs-number">1</span>]] &lt;- str_remove(Anno[[<span class="hljs-number">1</span>]], <span class="hljs-string">&quot;7227.&quot;</span>)<br><br>TB &lt;- read.table(<span class="hljs-string">&quot;7227.protein.links.detailed.v11.5.txt&quot;</span>, header = <span class="hljs-built_in">T</span>)<br>TB2 &lt;- TB[<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;protein1&quot;</span>, <span class="hljs-string">&quot;protein2&quot;</span>, <span class="hljs-string">&quot;fusion&quot;</span>, <span class="hljs-string">&quot;cooccurence&quot;</span>, <span class="hljs-string">&quot;coexpression&quot;</span>, <span class="hljs-string">&quot;experimental&quot;</span>)]<br>TB2$protein1 &lt;- str_remove(TB2$protein1, <span class="hljs-string">&quot;7227.&quot;</span>)<br>TB2$protein2 &lt;- str_remove(TB2$protein2, <span class="hljs-string">&quot;7227.&quot;</span>)<br><br>TB_df &lt;- apply(TB2[-<span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">2</span>)], <span class="hljs-number">1</span>, <span class="hljs-built_in">sum</span>)<br><br>N = <span class="hljs-number">18</span>+ which.max(density(TB_df[which(TB_df&gt;<span class="hljs-number">0</span>)])$y[-<span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">18</span>)])<br>X = density(TB_df[which(TB_df&gt;<span class="hljs-number">0</span>)])$x[N]<br>Y = density(TB_df[which(TB_df&gt;<span class="hljs-number">0</span>)])$y[N]<br><br>ggplot() + geom_density(aes(x= TB_df[which(TB_df&gt;<span class="hljs-number">0</span>)])) + theme_bw() +<br>    geom_vline(xintercept =  X) +<br>    geom_text(aes(x= X, y = Y, label= <span class="hljs-built_in">round</span>(X, <span class="hljs-number">2</span>)), hjust = <span class="hljs-number">0</span>, vjust = <span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># LIST</span><br><br>LIST &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;FBpp0070483&quot;</span>, <span class="hljs-string">&quot;FBpp0288697&quot;</span>, <span class="hljs-string">&quot;FBpp0304573&quot;</span>, <span class="hljs-string">&quot;FBpp0305946&quot;</span>, <span class="hljs-string">&quot;FBpp0300852&quot;</span>, <span class="hljs-string">&quot;FBpp0083503&quot;</span>, <span class="hljs-string">&quot;FBpp0297544&quot;</span>, <span class="hljs-string">&quot;FBpp0085082&quot;</span>, <span class="hljs-string">&quot;FBpp0288660&quot;</span>, <span class="hljs-string">&quot;FBpp0077739&quot;</span>, <span class="hljs-string">&quot;FBpp0081139&quot;</span>, <span class="hljs-string">&quot;FBpp0293081&quot;</span>, <span class="hljs-string">&quot;FBpp0079676&quot;</span>, <span class="hljs-string">&quot;FBpp0288515&quot;</span>, <span class="hljs-string">&quot;FBpp0297890&quot;</span>, <span class="hljs-string">&quot;FBpp0304299&quot;</span>, <span class="hljs-string">&quot;FBpp0306192&quot;</span>, <span class="hljs-string">&quot;FBpp0074686&quot;</span>, <span class="hljs-string">&quot;FBpp0070417&quot;</span>, <span class="hljs-string">&quot;FBpp0086911&quot;</span>, <span class="hljs-string">&quot;FBpp0289616&quot;</span>)<br><br><span class="hljs-comment"># Try threshold at 2000</span><br><span class="hljs-comment"># TB3 &lt;- TB2[which(TB_df&gt;1000),]</span><br>TB3 &lt;- rbind(TB2[TB2$protein1 %in% LIST,], TB2[TB2$protein2 %in% LIST,])<br>TB_df &lt;- apply(TB3[-<span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">2</span>)], <span class="hljs-number">1</span>, <span class="hljs-built_in">sum</span>)<br>TB3 &lt;- TB3[which(TB_df&gt;<span class="hljs-number">150</span>),]<br><span class="hljs-built_in">length</span>(unique(<span class="hljs-built_in">c</span>(TB3$protein1, TB3$protein2 )))<br><span class="hljs-comment"># 173; we have 173 unique proteins</span><br><br><br><span class="hljs-comment"># plot it with igraph</span><br>TB3$CN = <span class="hljs-number">1</span><br>TB4 &lt;- reshape(TB3[<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;protein1&quot;</span>, <span class="hljs-string">&quot;protein2&quot;</span>, <span class="hljs-string">&quot;CN&quot;</span>)], idvar = <span class="hljs-string">&quot;protein1&quot;</span>, timevar = <span class="hljs-string">&quot;protein2&quot;</span>, direction = <span class="hljs-string">&quot;wide&quot;</span>)<br>rownames(TB4) &lt;- TB4[[<span class="hljs-number">1</span>]]<br>TB4 &lt;- TB4[-<span class="hljs-number">1</span>]<br>colnames(TB4) &lt;- str_remove(colnames(TB4), <span class="hljs-string">&quot;CN.&quot;</span>)<br>TB4[<span class="hljs-built_in">is.na</span>(TB4)] &lt;- <span class="hljs-number">0</span><br><br>network=graph_from_adjacency_matrix(as.matrix(TB4) , mode=<span class="hljs-string">&#x27;undirected&#x27;</span>, diag=<span class="hljs-built_in">T</span> )<br><br>TB4.Size &lt;- as.data.frame(table(<span class="hljs-built_in">c</span>(TB3$protein1, TB3$protein2 )))<br>TB4.Size &lt;- TB4.Size[match(colnames(TB4),TB4.Size$Var1),]<br>TB4.Size$Anno &lt;- Anno[[<span class="hljs-number">2</span>]][match(TB4.Size$Var1,Anno[[<span class="hljs-number">1</span>]])]<br>TB4.Size$Anno2 = <span class="hljs-string">&quot;&quot;</span><br>TB4.Size$Anno2[which(TB4.Size$Freq&gt;=<span class="hljs-number">100</span>)] &lt;- TB4.Size$Anno[which(TB4.Size$Freq&gt;=<span class="hljs-number">100</span>)]<br><span class="hljs-comment">##DefauTB4.Size$Anno2 = &quot;&quot;</span><br>set.seed(<span class="hljs-number">1</span>)<br>par(mar=<span class="hljs-built_in">c</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>plot(network,    <br>    vertex.size= <span class="hljs-built_in">log</span>(TB4.Size$Freq +<span class="hljs-number">1</span>),<br>    vertex.label = TB4.Size$Anno2 ,<br>    vertex.label.size= <span class="hljs-built_in">log</span>(TB4.Size$Freq +<span class="hljs-number">1</span>) ,<br>    vertex.frame.color= adjustcolor(<span class="hljs-string">&quot;salmon&quot;</span>, alpha.f = <span class="hljs-number">.5</span>),<br>    vertex.color = adjustcolor(<span class="hljs-string">&quot;salmon&quot;</span>, alpha.f = <span class="hljs-number">.5</span>),<br>    edge.color = adjustcolor(<span class="hljs-string">&quot;grey&quot;</span>, alpha.f = <span class="hljs-number">.1</span>), layout = layout_nicely)<br><br>lay = layout_with_graphopt(network)<br>R = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">abs</span>(lay))<br>lay_Y = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">asin</span>(<span class="hljs-built_in">sin</span>(lay[,<span class="hljs-number">2</span>]/<span class="hljs-built_in">sqrt</span>(lay[,<span class="hljs-number">1</span>]^<span class="hljs-number">2</span> + lay[,<span class="hljs-number">2</span>]^<span class="hljs-number">2</span>))) * R)<br>lay_X = <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">acos</span>(<span class="hljs-built_in">cos</span>(lay[,<span class="hljs-number">1</span>]/<span class="hljs-built_in">sqrt</span>(lay[,<span class="hljs-number">1</span>]^<span class="hljs-number">2</span> + lay[,<span class="hljs-number">2</span>]^<span class="hljs-number">2</span>))) * R)<br>lay_X[lay[,<span class="hljs-number">1</span>]&lt;<span class="hljs-number">0</span>] &lt;- lay_X[lay[,<span class="hljs-number">1</span>]&lt;<span class="hljs-number">0</span>] * -<span class="hljs-number">1</span><br>lay_Y[lay[,<span class="hljs-number">2</span>]&lt;<span class="hljs-number">0</span>] &lt;- lay_Y[lay[,<span class="hljs-number">2</span>]&lt;<span class="hljs-number">0</span>] * -<span class="hljs-number">1</span><br><br>LX &lt;- 2*(lay_X -lay[,<span class="hljs-number">1</span>]) <span class="hljs-comment">#+ lay[,1]</span><br>LY &lt;- 2*(lay_Y -lay[,<span class="hljs-number">2</span>]) <span class="hljs-comment">#+ lay[,2]</span><br><br>LAY &lt;- matrix(<span class="hljs-built_in">c</span>(LX, LY) , ncol = <span class="hljs-number">2</span>)<br><span class="hljs-comment">#layout_with_mds</span><br><span class="hljs-comment">#layout_nicely</span><br><span class="hljs-comment">#layout_with_graphopt</span><br></code></pre></td></tr></table></figure></div><table><thead><tr><th style="text-align:center"><img src="https://s1.ax1x.com/2023/01/10/pSejUfS.png" alt="string-db Density plot"></th></tr></thead><tbody></tbody></table><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">STRING database is a web-based tool that provides information on protein-protein interactions, including physical and functional associations. It consolidates and scores data from multiple sources, making it a valuable resource for functional annotation and network analysis in the life sciences. &lt;a title=&#39;ChatGPT&#39;&gt;Who sad this?&lt;/a&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Cellpose</title>
    <link href="https://karobben.github.io/2022/12/21/Bioinfor/cellpose/"/>
    <id>https://karobben.github.io/2022/12/21/Bioinfor/cellpose/</id>
    <published>2022-12-21T23:55:36.000Z</published>
    <updated>2023-02-12T01:23:46.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CellPose">CellPose</h2><p>CellPose is an awesome machine learning-based tool that could segment cells very easily. The pre-trained model could suit multiple scenarios and fit the basic usages. And it can do more than cell segmentation (Though the cell pose looks fancy, I still didn’t know who to work with the results.) To learn more, please read the <a href="https://cellpose.readthedocs.io/en/latest/index.html">documentation</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> cellpose <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">from</span> cellpose.io <span class="hljs-keyword">import</span> imread<br><br><span class="hljs-comment"># model_type=&#x27;cyto&#x27; or model_type=&#x27;nuclei&#x27;</span><br>model = models.Cellpose(gpu=<span class="hljs-literal">False</span>, model_type=<span class="hljs-string">&#x27;cyto&#x27;</span>)<br><br>files = [<span class="hljs-string">&#x27;img0.tif&#x27;</span>, <span class="hljs-string">&#x27;img1.tif&#x27;</span>]<br>imgs = [imread(f) <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> files]<br>masks, flows, styles, diams = model.<span class="hljs-built_in">eval</span>(imgs, diameter=<span class="hljs-literal">None</span>, channels=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>                                         flow_threshold=<span class="hljs-number">0.4</span>, do_3D=<span class="hljs-literal">False</span>)<br><br><br><br></code></pre></td></tr></table></figure></div><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">A quick note of how to use the cellpose to do cell segmentation</summary>
    
    
    
    <category term="Bioinfor" scheme="https://karobben.github.io/categories/Bioinfor/"/>
    
    
    <category term="Bioinfor" scheme="https://karobben.github.io/tags/Bioinfor/"/>
    
    <category term="Machine Learning" scheme="https://karobben.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>TCGA Database with R</title>
    <link href="https://karobben.github.io/2022/12/06/Bioinfor/tcga/"/>
    <id>https://karobben.github.io/2022/12/06/Bioinfor/tcga/</id>
    <published>2022-12-06T19:02:44.000Z</published>
    <updated>2023-02-12T01:24:43.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCGA-Database">TCGA Database</h2><p>Reference:</p><ul><li><a href="https://bioconductor.org/packages/release/bioc/vignettes/TCGAbiolinks/inst/doc/download_prepare.html#Downloading_and_preparing_data_for_analysis">Documentation</a></li><li><a href="https://support.bioconductor.org/p/133576/">Bioconductor</a></li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">library(TCGAbiolinks)<br>library(SummarizedExperiment)<br>library(dplyr)<br>library(DT)<br><br>projects &lt;- TCGAbiolinks:::getGDCprojects()$project_id<br>projects &lt;- projects[grepl(<span class="hljs-string">&#x27;^TCGA&#x27;</span>,projects,perl=<span class="hljs-built_in">T</span>)]<br><br>query &lt;- GDCquery(project = projects,<br>                  data.category = <span class="hljs-string">&quot;Transcriptome Profiling&quot;</span>,  <br>                  data.type = <span class="hljs-string">&quot;Gene Expression Quantification&quot;</span>,  <br>                  workflow.type = <span class="hljs-string">&quot;STAR - Counts&quot;</span>)<br><span class="hljs-comment"># counts &lt;- GDCprepare(query,save = TRUE, save.filename = &quot;all_tumor_htseq_raw_counts.rda&quot;)</span><br>data &lt;- GDCprepare(query = query)<br><br><span class="hljs-comment"># download and fetch the data from local</span><br>GDCdownload(query = query,<br>              method = <span class="hljs-string">&quot;api&quot;</span>,<br>              files.per.chunk = <span class="hljs-number">60</span>,<br>              directory = <span class="hljs-string">&quot;mRNA&quot;</span>)<br><br>expdat &lt;- GDCprepare(query = query,<br>                       directory = <span class="hljs-string">&quot;mRNA&quot;</span>)<br></code></pre></td></tr></table></figure></div><p>If you download successfully, you would see the red codes below.</p><code><pre style="background-color:white; color:red">--------------------------------------o GDCquery: Searching in GDC database--------------------------------------Genome of reference: hg38--------------------------------------------oo Accessing GDC. This might take a while...--------------------------------------------ooo Project: TCGA-ESCAooo Project: TCGA-SARCooo Project: TCGA-CESCooo Project: TCGA-UCEC--------------------oo Filtering results--------------------ooo By data.typeooo By workflow.type----------------oo Checking data----------------ooo Checking if there are duplicated casesooo Checking if there are results for the query-------------------o Preparing output-------------------</pre></code><div class="admonition note"><p class="admonition-title">Check the group and counts information</p></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r"><span class="hljs-comment"># Check the mate information</span><br>as.data.frame(colData(data))<br><span class="hljs-comment"># Check Exression counts</span><br>assay(data)[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>,<span class="hljs-number">1</span>:<span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure></div><pre>TCGA-DX-A6Z0-01A-13R-A36F-07 TCGA-X2-A95T-01A-11R-A37L-07 TCGA-DX-A6BF-01A-11R-A30C-07 TCGA-DX-A1L1-01A-11R-A24X-07ENSG00000000003.15                         3415                          861                          316                         4004ENSG00000000005.6                           340                            4                           14                            0ENSG00000000419.13                         2296                          905                          938                         3935ENSG00000000457.14                          594                          454                           85                          595ENSG00000000460.17                          626                          318                           62                          458ENSG00000000938.13                          259                          138                          271                          381</pre><style>pre {  background-color:#38393d;  color: #5fd381;}</style><div class="admonition note"><p class="admonition-title">why download data</p></div><p>Sometimes, you may receive errors:</p><pre>Error in GDCquery(project = projects[3], data.category = "Transcriptome Profiling",  :  Please set a valid workflow.type argument from the list below:  => STAR - Counts</pre><p>You can’t turn the “GDCprepare” results into data directly. You need to download it first and convert it by “GDCprepare”. See details in <a href="https://github.com/BioinformaticsFMRP/TCGAbiolinks/issues/153">github</a></p><h2 id="Differential-Expression-Genes">Differential Expression Genes</h2><p>Reference: <a href="https://rdrr.io/bioc/TCGAbiolinks/f/vignettes/analysis.Rmd">rdrr.io</a></p><p>I am failed to get the expression matrix by using <code>GDCprepare</code>. According to [© g27182818, 2022], it caused by STAR-Count files has more infor than <code>GDCprepare</code> need. What ever, a modified solution could be like codes below:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">library(<span class="hljs-string">&#x27;TCGAbiolinks&#x27;</span>)<br>library(stringr)<br><br>project_name &lt;- <span class="hljs-string">&quot;TCGA-CHOL&quot;</span><br><br><span class="hljs-comment"># Defines the query to the GDC</span><br>query &lt;- GDCquery(project = project_name,<br>                  data.category = <span class="hljs-string">&quot;Transcriptome Profiling&quot;</span>,<br>                  data.type = <span class="hljs-string">&quot;Gene Expression Quantification&quot;</span>,<br>                  experimental.strategy = <span class="hljs-string">&quot;RNA-Seq&quot;</span>,<br>                  workflow.type = <span class="hljs-string">&quot;STAR - Counts&quot;</span>)<br><br><span class="hljs-comment"># Get metadata matrix</span><br>metadata &lt;- query[[<span class="hljs-number">1</span>]][[<span class="hljs-number">1</span>]]<br><br><span class="hljs-comment"># Get main directory where data is stored</span><br>main_dir &lt;- file.path(<span class="hljs-string">&quot;mRNA&quot;</span>, project_name)<br><span class="hljs-comment"># Get file list of downloaded files</span><br>file_list &lt;- file.path(<span class="hljs-string">&quot;mRNA&quot;</span>, project_name,list.files(main_dir,recursive = <span class="hljs-literal">TRUE</span>)) <br><br><span class="hljs-comment"># Read first downloaded to get gene names</span><br>test_tab &lt;- read.table(file = file_list[<span class="hljs-number">1</span>], sep = <span class="hljs-string">&#x27;\t&#x27;</span>, header = <span class="hljs-literal">TRUE</span>)<br><span class="hljs-comment"># Delete header lines that don&#x27;t contain usefull information</span><br>test_tab &lt;- test_tab[-<span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">4</span>),]<br><span class="hljs-comment"># STAR counts and tpm datasets</span><br>tpm_data_frame &lt;- data.frame(test_tab[,<span class="hljs-number">1</span>])<br>count_data_frame &lt;- data.frame(test_tab[,<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># Append cycle to get the complete matrix</span><br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(file_list))) &#123;<br>  <span class="hljs-comment"># Read table</span><br>  test_tab &lt;- read.table(file = file_list[i], sep = <span class="hljs-string">&#x27;\t&#x27;</span>, header = <span class="hljs-literal">TRUE</span>)<br>  <span class="hljs-comment"># Delete not useful lines</span><br>  test_tab &lt;- test_tab[-<span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">4</span>),]<br>  <span class="hljs-comment"># Column bind of tpm and counts data</span><br>  tpm_data_frame &lt;- cbind(tpm_data_frame, test_tab[,<span class="hljs-number">7</span>])<br>  count_data_frame &lt;- cbind(count_data_frame, test_tab[,<span class="hljs-number">4</span>])<br>  <span class="hljs-comment"># Print progres from 0 to 1</span><br>  print(i/<span class="hljs-built_in">length</span>(file_list))<br>&#125;<br><br>ID_list &lt;- as.data.frame(str_split_fixed(file_list, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">7</span>))[[<span class="hljs-number">6</span>]]<br><br>row.names(count_data_frame) &lt;- count_data_frame[[<span class="hljs-number">1</span>]]<br>count_data_frame &lt;- count_data_frame[-<span class="hljs-number">1</span>]<br>colnames(count_data_frame) &lt;- metadata$cases[match(ID_list, metadata$id)]<br><br>N_control = <span class="hljs-built_in">length</span>(which(<span class="hljs-built_in">as.numeric</span>(gsub(<span class="hljs-string">&quot;[^0-9.-]&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, as.data.frame(str_split_fixed(metadata$cases, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-number">5</span>))[[<span class="hljs-number">4</span>]])) &gt;= <span class="hljs-number">10</span>))<br><br></code></pre></td></tr></table></figure></div><h2 id="The-meaning-of-the-barcode">The meaning of the barcode</h2><table><thead><tr><th style="text-align:center"><img src="https://docs.gdc.cancer.gov/Encyclopedia/pages/images/barcode.png" alt=""></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://docs.gdc.cancer.gov/Encyclopedia/pages/TCGA_Barcode/">© NIH, GDC</a></td></tr></tbody></table><table><thead><tr><th style="text-align:left">Label</th><th style="text-align:left">Identifier for</th><th style="text-align:left">Value</th><th style="text-align:left">Value Description</th><th style="text-align:left">Possible Values</th></tr></thead><tbody><tr><td style="text-align:left">Analyte</td><td style="text-align:left">Molecular type of analyte for analysis</td><td style="text-align:left">D</td><td style="text-align:left">The analyte is a DNA sample</td><td style="text-align:left">See Code Tables Report</td></tr><tr><td style="text-align:left">Plate</td><td style="text-align:left">Order of plate in a sequence of 96-well plates</td><td style="text-align:left">182</td><td style="text-align:left">The 182nd plate</td><td style="text-align:left">4-digit alphanumeric value</td></tr><tr><td style="text-align:left">Portion</td><td style="text-align:left">Order of portion in a sequence of 100 - 120 mg sample portions</td><td style="text-align:left">1</td><td style="text-align:left">The first portion of the sample</td><td style="text-align:left">01-99</td></tr><tr><td style="text-align:left">Vial</td><td style="text-align:left">Order of sample in a sequence of samples</td><td style="text-align:left">C</td><td style="text-align:left">The third vial</td><td style="text-align:left">A to Z</td></tr><tr><td style="text-align:left">Project</td><td style="text-align:left">Project name</td><td style="text-align:left">TCGA</td><td style="text-align:left">TCGA project</td><td style="text-align:left">TCGA</td></tr><tr><td style="text-align:left">Sample</td><td style="text-align:left">Sample type</td><td style="text-align:left">1</td><td style="text-align:left">A solid tumor</td><td style="text-align:left">Tumor types range from 01 - 09, normal types from 10 - 19 and control samples from 20 - 29. See Code Tables Report for a complete list of sample codes</td></tr><tr><td style="text-align:left">Center</td><td style="text-align:left">Sequencing or characterization center that will receive the aliquot for analysis</td><td style="text-align:left">1</td><td style="text-align:left">The Broad InstituteGCC</td><td style="text-align:left">See Code Tables Report</td></tr><tr><td style="text-align:left">Participant</td><td style="text-align:left">Study participant</td><td style="text-align:left">1</td><td style="text-align:left">The first participant from MD Anderson for GBM study</td><td style="text-align:left">Any alpha-numeric value</td></tr><tr><td style="text-align:left">TSS</td><td style="text-align:left">Tissue source site</td><td style="text-align:left">2</td><td style="text-align:left">GBM (brain tumor) sample from MD Anderson</td><td style="text-align:left">See Code Tables Report</td></tr></tbody></table><p>So, the most important information for us is the sample type: <mark>Tumor types range from 01 - 09, normal types from 10 - 19 and control samples from 20 - 29. See Code Tables Report for a complete list of sample codes</mark></p><h2 id="Abbreviations-of-projects">Abbreviations of projects</h2><table><thead><tr><th style="text-align:left">Study Abbreviation</th><th style="text-align:left">Study Name</th></tr></thead><tbody><tr><td style="text-align:left">LAML</td><td style="text-align:left">Acute Myeloid Leukemia</td></tr><tr><td style="text-align:left">ACC</td><td style="text-align:left">Adrenocortical carcinoma</td></tr><tr><td style="text-align:left">BLCA</td><td style="text-align:left">Bladder Urothelial Carcinoma</td></tr><tr><td style="text-align:left">LGG</td><td style="text-align:left">Brain Lower Grade Glioma</td></tr><tr><td style="text-align:left">BRCA</td><td style="text-align:left">Breast invasive carcinoma</td></tr><tr><td style="text-align:left">CESC</td><td style="text-align:left">Cervical squamous cell carcinoma and endocervical adenocarcinoma</td></tr><tr><td style="text-align:left">CHOL</td><td style="text-align:left">Cholangiocarcinoma</td></tr><tr><td style="text-align:left">LCML</td><td style="text-align:left">Chronic Myelogenous Leukemia</td></tr><tr><td style="text-align:left">COAD</td><td style="text-align:left">Colon adenocarcinoma</td></tr><tr><td style="text-align:left">CNTL</td><td style="text-align:left">Controls</td></tr><tr><td style="text-align:left">ESCA</td><td style="text-align:left">Esophageal carcinoma</td></tr><tr><td style="text-align:left">FPPP</td><td style="text-align:left">FFPE Pilot Phase II</td></tr><tr><td style="text-align:left">GBM</td><td style="text-align:left">Glioblastoma multiforme</td></tr><tr><td style="text-align:left">HNSC</td><td style="text-align:left">Head and Neck squamous cell carcinoma</td></tr><tr><td style="text-align:left">KICH</td><td style="text-align:left">Kidney Chromophobe</td></tr><tr><td style="text-align:left">KIRC</td><td style="text-align:left">Kidney renal clear cell carcinoma</td></tr><tr><td style="text-align:left">KIRP</td><td style="text-align:left">Kidney renal papillary cell carcinoma</td></tr><tr><td style="text-align:left">LIHC</td><td style="text-align:left">Liver hepatocellular carcinoma</td></tr><tr><td style="text-align:left">LUAD</td><td style="text-align:left">Lung adenocarcinoma</td></tr><tr><td style="text-align:left">LUSC</td><td style="text-align:left">Lung squamous cell carcinoma</td></tr><tr><td style="text-align:left">DLBC</td><td style="text-align:left">Lymphoid Neoplasm Diffuse Large B-cell Lymphoma</td></tr><tr><td style="text-align:left">MESO</td><td style="text-align:left">Mesothelioma</td></tr><tr><td style="text-align:left">MISC</td><td style="text-align:left">Miscellaneous</td></tr><tr><td style="text-align:left">OV</td><td style="text-align:left">Ovarian serous cystadenocarcinoma</td></tr><tr><td style="text-align:left">PAAD</td><td style="text-align:left">Pancreatic adenocarcinoma</td></tr><tr><td style="text-align:left">PCPG</td><td style="text-align:left">Pheochromocytoma and Paraganglioma</td></tr><tr><td style="text-align:left">PRAD</td><td style="text-align:left">Prostate adenocarcinoma</td></tr><tr><td style="text-align:left">READ</td><td style="text-align:left">Rectum adenocarcinoma</td></tr><tr><td style="text-align:left">SARC</td><td style="text-align:left">Sarcoma</td></tr><tr><td style="text-align:left">SKCM</td><td style="text-align:left">Skin Cutaneous Melanoma</td></tr><tr><td style="text-align:left">STAD</td><td style="text-align:left">Stomach adenocarcinoma</td></tr><tr><td style="text-align:left">TGCT</td><td style="text-align:left">Testicular Germ Cell Tumors</td></tr><tr><td style="text-align:left">THYM</td><td style="text-align:left">Thymoma</td></tr><tr><td style="text-align:left">THCA</td><td style="text-align:left">Thyroid carcinoma</td></tr><tr><td style="text-align:left">UCS</td><td style="text-align:left">Uterine Carcinosarcoma</td></tr><tr><td style="text-align:left">UCEC</td><td style="text-align:left">Uterine Corpus Endometrial Carcinoma</td></tr><tr><td style="text-align:left">UVM</td><td style="text-align:left">Uveal Melanoma</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">TCGA Database usage. R packages, TCGA related API</summary>
    
    
    
    <category term="Biology" scheme="https://karobben.github.io/categories/Biology/"/>
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/"/>
    
    <category term="Database" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Database/"/>
    
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/tags/Bioinformatics/"/>
    
    <category term="api" scheme="https://karobben.github.io/tags/api/"/>
    
    <category term="TCGA" scheme="https://karobben.github.io/tags/TCGA/"/>
    
  </entry>
  
  <entry>
    <title>flybase api</title>
    <link href="https://karobben.github.io/2022/12/05/Python/flybase-api/"/>
    <id>https://karobben.github.io/2022/12/05/Python/flybase-api/</id>
    <published>2022-12-05T20:49:59.000Z</published>
    <updated>2023-02-12T01:24:00.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flybase-api">Flybase api</h2><p><a href="https://flybase.github.io/api/swagger-ui/#/Chado/getChadoXmlById">API documentation</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br><br>ID = <span class="hljs-string">&quot;FBgn0051624&quot;</span><br>url = <span class="hljs-string">&quot;https://api.flybase.org/api/v1.0/chadoxml/&quot;</span> + ID<br>html = urlopen(url)<br>soup = BeautifulSoup(html, features=<span class="hljs-string">&#x27;xml&#x27;</span>)<br><br>Orth_all = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span>  soup.find_all(<span class="hljs-string">&quot;feature_relationship&quot;</span>) <span class="hljs-keyword">if</span> i.find(<span class="hljs-string">&#x27;name&#x27;</span>).get_text() == <span class="hljs-string">&#x27;orthologous_to&#x27;</span>]<br>Orth_Homo = [i  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Orth_all <span class="hljs-keyword">if</span> i.find(<span class="hljs-string">&#x27;genus&#x27;</span>).get_text() == <span class="hljs-string">&#x27;Homo&#x27;</span>]<br>Gene_Syambol = [i.find_all(<span class="hljs-string">&#x27;name&#x27;</span>)[<span class="hljs-number">2</span>].get_text().split(<span class="hljs-string">&#x27;\\&#x27;</span>)[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Orth_Homo]<br>Gene_Ensembl = [[i.find(<span class="hljs-string">&#x27;accession&#x27;</span>).get_text() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ii.find_all(<span class="hljs-string">&quot;dbxref_id&quot;</span>) <span class="hljs-keyword">if</span> i.find(<span class="hljs-string">&#x27;name&#x27;</span>).get_text() == <span class="hljs-string">&quot;Ensembl_Homo_sapiens&quot;</span>][<span class="hljs-number">0</span>]  <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> Orth_Homo]<br></code></pre></td></tr></table></figure></div><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">flybase api</summary>
    
    
    
    <category term="Biology" scheme="https://karobben.github.io/categories/Biology/"/>
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/"/>
    
    <category term="Database" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Database/"/>
    
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/tags/Bioinformatics/"/>
    
    <category term="api" scheme="https://karobben.github.io/tags/api/"/>
    
    <category term="flybase" scheme="https://karobben.github.io/tags/flybase/"/>
    
  </entry>
  
  <entry>
    <title>Brownian Motion</title>
    <link href="https://karobben.github.io/2022/11/23/Python/brownian-motion/"/>
    <id>https://karobben.github.io/2022/11/23/Python/brownian-motion/</id>
    <published>2022-11-23T18:56:12.000Z</published>
    <updated>2023-02-26T23:01:47.710Z</updated>
    
    <content type="html"><![CDATA[<p>Codes from: <a href="https://towardsdatascience.com/brownian-motion-with-python-9083ebc46ff0">Tirthajyoti Sarkar</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Brownian</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    A Brownian motion class constructor</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,x0=<span class="hljs-number">0</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Init class</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">assert</span> (<span class="hljs-built_in">type</span>(x0)==<span class="hljs-built_in">float</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">type</span>(x0)==<span class="hljs-built_in">int</span> <span class="hljs-keyword">or</span> x0 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>), <span class="hljs-string">&quot;Expect a float or None for the initial value&quot;</span><br><br>        self.x0 = <span class="hljs-built_in">float</span>(x0)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_random_walk</span>(<span class="hljs-params">self,n_step=<span class="hljs-number">100</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Generate motion by random walk</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Arguments:</span><br><span class="hljs-string">            n_step: Number of steps</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            A NumPy array with `n_steps` points</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># Warning about the small number of steps</span><br>        <span class="hljs-keyword">if</span> n_step &lt; <span class="hljs-number">30</span>:<br>            print(<span class="hljs-string">&quot;WARNING! The number of steps is small. It may not generate a good stochastic process sequence!&quot;</span>)<br><br>        w = np.ones(n_step)*self.x0<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n_step):<br>            <span class="hljs-comment"># Sampling from the Normal distribution with probability 1/2</span><br>            yi = np.random.choice([<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>])<br>            <span class="hljs-comment"># Weiner process</span><br>            w[i] = w[i-<span class="hljs-number">1</span>]+(yi/np.sqrt(n_step))<br><br>        <span class="hljs-keyword">return</span> w<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_normal</span>(<span class="hljs-params">self,n_step=<span class="hljs-number">100</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Generate motion by drawing from the Normal distribution</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Arguments:</span><br><span class="hljs-string">            n_step: Number of steps</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            A NumPy array with `n_steps` points</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> n_step &lt; <span class="hljs-number">30</span>:<br>            print(<span class="hljs-string">&quot;WARNING! The number of steps is small. It may not generate a good stochastic process sequence!&quot;</span>)<br><br>        w = np.ones(n_step)*self.x0<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n_step):<br>            <span class="hljs-comment"># Sampling from the Normal distribution</span><br>            yi = np.random.normal()<br>            <span class="hljs-comment"># Weiner process</span><br>            w[i] = w[i-<span class="hljs-number">1</span>]+(yi/np.sqrt(n_step))<br><br>        <span class="hljs-keyword">return</span> w<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">stock_price</span>(<span class="hljs-params"></span></span><br><span class="hljs-function"><span class="hljs-params">                    self,</span></span><br><span class="hljs-function"><span class="hljs-params">                    s0=<span class="hljs-number">100</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                    mu=<span class="hljs-number">0.2</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                    sigma=<span class="hljs-number">0.68</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                    deltaT=<span class="hljs-number">52</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                    dt=<span class="hljs-number">0.1</span></span></span><br><span class="hljs-function"><span class="hljs-params">                    </span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Models a stock price S(t) using the Weiner process W(t) as</span><br><span class="hljs-string">        `S(t) = S(0).exp&#123;(mu-(sigma^2/2).t)+sigma.W(t)&#125;`</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Arguments:</span><br><span class="hljs-string">            s0: Iniital stock price, default 100</span><br><span class="hljs-string">            mu: &#x27;Drift&#x27; of the stock (upwards or downwards), default 1</span><br><span class="hljs-string">            sigma: &#x27;Volatility&#x27; of the stock, default 1</span><br><span class="hljs-string">            deltaT: The time period for which the future prices are computed, default 52 (as in 52 weeks)</span><br><span class="hljs-string">            dt (optional): The granularity of the time-period, default 0.1</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            s: A NumPy array with the simulated stock prices over the time-period deltaT</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        n_step = <span class="hljs-built_in">int</span>(deltaT/dt)<br>        time_vector = np.linspace(<span class="hljs-number">0</span>,deltaT,num=n_step)<br>        <span class="hljs-comment"># Stock variation</span><br>        stock_var = (mu-(sigma**<span class="hljs-number">2</span>/<span class="hljs-number">2</span>))*time_vector<br>        <span class="hljs-comment"># Forcefully set the initial value to zero for the stock price simulation</span><br>        self.x0=<span class="hljs-number">0</span><br>        <span class="hljs-comment"># Weiner process (calls the `gen_normal` method)</span><br>        weiner_process = sigma*self.gen_normal(n_step)<br>        <span class="hljs-comment"># Add two time series, take exponent, and multiply by the initial stock price</span><br>        s = s0*(np.exp(stock_var+weiner_process))<br><br>        <span class="hljs-keyword">return</span> s<br><br>b1 = Brownian()<br>b2 = Brownian()<br><br>x = b1.gen_normal(<span class="hljs-number">1000</span>)<br>y = b2.gen_normal(<span class="hljs-number">1000</span>)<br><br>plt.plot(x,y,c=<span class="hljs-string">&#x27;b&#x27;</span>)<br>xmax,xmin,ymax,ymin = x.<span class="hljs-built_in">max</span>(),x.<span class="hljs-built_in">min</span>(),y.<span class="hljs-built_in">max</span>(),y.<span class="hljs-built_in">min</span>()<br>scale_factor = <span class="hljs-number">1.25</span><br>xmax,xmin,ymax,ymin = xmax*scale_factor,xmin*scale_factor,ymax*scale_factor,ymin*scale_factor<br>plt.xlim(xmin,xmax)<br>plt.ylim(ymin,ymax)<br>plt.show()<br></code></pre></td></tr></table></figure></div><p>Show it in openCV animation</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Position_update</span>(<span class="hljs-params">Point1</span>):</span><br>    yi1 = np.random.normal()*<span class="hljs-number">10</span><br>    yi2 = np.random.normal()*<span class="hljs-number">10</span><br>    Point1[<span class="hljs-number">0</span>] =  Point1[<span class="hljs-number">0</span>] + <span class="hljs-built_in">int</span>(yi1/np.sqrt(<span class="hljs-number">30</span>))<br>    Point1[<span class="hljs-number">1</span>] =  Point1[<span class="hljs-number">1</span>] + <span class="hljs-built_in">int</span>(yi2/np.sqrt(<span class="hljs-number">30</span>))<br>    <span class="hljs-keyword">return</span> Point1<br><br>MAP = np.zeros([<span class="hljs-number">1500</span>, <span class="hljs-number">1500</span>, <span class="hljs-number">3</span>], dtype=np.uint8)<br>MAP[MAP==<span class="hljs-number">0</span>] = <span class="hljs-number">255</span><br><br>Point = &#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>    Point.update(&#123;i:[<span class="hljs-number">750</span>,<span class="hljs-number">750</span>]&#125;)<br><br>b1 = Brownian(<span class="hljs-number">1</span>)<br>b2 = Brownian(<span class="hljs-number">1</span>)<br><br>fourcc = cv2.VideoWriter_fourcc(*<span class="hljs-string">&#x27;XVID&#x27;</span>)<br>out = cv2.VideoWriter(<span class="hljs-string">&#x27;output.avi&#x27;</span>,fourcc, <span class="hljs-number">20.0</span>, (<span class="hljs-number">1080</span>,<span class="hljs-number">1080</span>))<br><br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">True</span>):<br>    MAP = np.zeros([<span class="hljs-number">1080</span>, <span class="hljs-number">1080</span>, <span class="hljs-number">3</span>], dtype=np.uint8)<br>    MAP[MAP==<span class="hljs-number">0</span>] = <span class="hljs-number">255</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>        Point[i]=Position_update(Point[i])<br>        cv2.circle(MAP, Point[i], <span class="hljs-number">3</span>, [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>], <span class="hljs-number">2</span>)<br>    cv2.imshow(<span class="hljs-string">&quot;video&quot;</span>,MAP)<br>    out.write(MAP)<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">25</span>)&amp;<span class="hljs-number">0xFF</span>==<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>       cv2.destroyAllWindows()<br>       <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure></div><p>Detection</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-comment"># Map Edge detection</span><br><br><span class="hljs-comment"># Direction Reverse</span><br><br>Point1 = &#123;<br>    <span class="hljs-string">&quot;O&quot;</span>:[<span class="hljs-number">200</span>,<span class="hljs-number">200</span>],<br>    <span class="hljs-string">&quot;N&quot;</span>:[<span class="hljs-number">20</span>,<span class="hljs-number">10</span>],<br>    <span class="hljs-string">&quot;Dit&quot;</span>:[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],<br>    <span class="hljs-string">&quot;Sp&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Map_bonce</span>(<span class="hljs-params">Point, X, Y</span>):</span><br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] &lt;<span class="hljs-number">0</span>:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] *= -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] &lt;<span class="hljs-number">0</span>:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] *= -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] &gt; X:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] = X - (Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>]- X)<br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] &gt; Y:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] = Y - (Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>]- Y)<br><br>    <span class="hljs-keyword">return</span>(Point)<br><br>Point = &#123;&#125;<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    Point.update(&#123;i:&#123;<br>        <span class="hljs-string">&quot;O&quot;</span>:np.array([<span class="hljs-number">50</span>,<span class="hljs-number">50</span>]),<br>        <span class="hljs-string">&quot;N&quot;</span>:np.array([<span class="hljs-number">50</span>,<span class="hljs-number">50</span>]),<br>        <span class="hljs-string">&quot;Dit&quot;</span>:np.array([<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]),<br>        <span class="hljs-string">&quot;Sp&quot;</span>: <span class="hljs-number">1</span><br>    &#125;&#125;)<br><br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">True</span>):<br>    MAP = np.zeros([<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">3</span>], dtype=np.uint8)<br>    MAP[MAP==<span class="hljs-number">0</span>] = <span class="hljs-number">255</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        Point[i][<span class="hljs-string">&quot;O&quot;</span>] = np.array(Point[i][<span class="hljs-string">&quot;N&quot;</span>])<br>        Point[i][<span class="hljs-string">&quot;N&quot;</span>] = Position_update(Point[i][<span class="hljs-string">&quot;N&quot;</span>])<br>        Point[i]= Map_bonce(Point[i], <span class="hljs-built_in">len</span>(MAP[<span class="hljs-number">0</span>]), <span class="hljs-built_in">len</span>(MAP))<br>        <span class="hljs-comment"># update old position and direction</span><br>        Point[i][<span class="hljs-string">&quot;Dit&quot;</span>]=Point[i][<span class="hljs-string">&quot;N&quot;</span>] - Point[i][<span class="hljs-string">&quot;O&quot;</span>]<br>        cv2.circle(MAP, Point[i][<span class="hljs-string">&quot;N&quot;</span>], <span class="hljs-number">3</span>, [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>], <span class="hljs-number">2</span>)<br>        print(Point[i])<br><br>    cv2.imshow(<span class="hljs-string">&quot;video&quot;</span>,MAP)<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">25</span>)&amp;<span class="hljs-number">0xFF</span>==<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>       cv2.destroyAllWindows()<br>       <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure></div><p>Collision by the center point</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Overlap detection</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Map_bonce</span>(<span class="hljs-params">Point, X, Y</span>):</span><br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] &lt;<span class="hljs-number">0</span>:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] *= -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] &lt;<span class="hljs-number">0</span>:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] *= -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] &gt; X:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] = X - (Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>]- X)<br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] &gt; Y:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] = Y - (Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>]- Y)<br><br>    <span class="hljs-keyword">return</span>(Point)<br><br>Point = &#123;&#125;<br>N_point = <span class="hljs-number">300</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N_point):<br>    Point.update(&#123;i:&#123;<br>        <span class="hljs-string">&quot;O&quot;</span>:np.array([<span class="hljs-number">50</span>,<span class="hljs-number">50</span>]),<br>        <span class="hljs-string">&quot;N&quot;</span>:np.array([<span class="hljs-number">50</span>,<span class="hljs-number">50</span>]),<br>        <span class="hljs-string">&quot;Dit&quot;</span>:np.array([<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]),<br>        <span class="hljs-string">&quot;Sp&quot;</span>: <span class="hljs-number">1</span><br>    &#125;&#125;)<br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">True</span>):<br>    MAP = np.zeros([<span class="hljs-number">500</span>, <span class="hljs-number">500</span>, <span class="hljs-number">3</span>], dtype=np.uint8)<br>    MAP[MAP==<span class="hljs-number">0</span>] = <span class="hljs-number">255</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N_point):<br>        Point[i][<span class="hljs-string">&quot;O&quot;</span>] = np.array(Point[i][<span class="hljs-string">&quot;N&quot;</span>])<br>        Point[i][<span class="hljs-string">&quot;N&quot;</span>] = Position_update(Point[i][<span class="hljs-string">&quot;N&quot;</span>])<br>        <span class="hljs-comment"># Check map-collision</span><br>        Point[i]= Map_bonce(Point[i], <span class="hljs-built_in">len</span>(MAP[<span class="hljs-number">0</span>]), <span class="hljs-built_in">len</span>(MAP))<br>        <span class="hljs-comment"># Particals Collision</span><br>        <span class="hljs-comment"># update old position and direction</span><br>        Point[i][<span class="hljs-string">&quot;Dit&quot;</span>]=Point[i][<span class="hljs-string">&quot;N&quot;</span>] - Point[i][<span class="hljs-string">&quot;O&quot;</span>]<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>  <span class="hljs-keyword">in</span> pd.DataFrame([Point[i][<span class="hljs-string">&#x27;N&#x27;</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Point]).duplicated().tolist():<br>        TMP = pd.DataFrame([Point[i][<span class="hljs-string">&#x27;N&#x27;</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Point])<br>        TMP2 = TMP[TMP.duplicated()]<br>        TMP == TMP2.iloc[<span class="hljs-number">0</span>,:]<br>        INDEX = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Point <span class="hljs-keyword">if</span> Point[i][<span class="hljs-string">&#x27;N&#x27;</span>].tolist() == Point[TMP2.index[<span class="hljs-number">0</span>]][<span class="hljs-string">&#x27;N&#x27;</span>].tolist()]<br>        print(INDEX)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(INDEX)/<span class="hljs-number">2</span>)):<br>            INDEX_1 = INDEX[i*<span class="hljs-number">2</span>]<br>            INDEX_2 = INDEX[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]<br>            Point[INDEX_1][<span class="hljs-string">&#x27;N&#x27;</span>] +=Point[INDEX_2][<span class="hljs-string">&#x27;Dit&#x27;</span>]<br>            Point[INDEX_2][<span class="hljs-string">&#x27;N&#x27;</span>] +=Point[INDEX_1][<span class="hljs-string">&#x27;Dit&#x27;</span>]<br>            Point[INDEX_1][<span class="hljs-string">&quot;O&quot;</span>] = np.array(Point[INDEX_1][<span class="hljs-string">&quot;N&quot;</span>])<br>            Point[INDEX_2][<span class="hljs-string">&quot;O&quot;</span>] = np.array(Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>])<br>            <span class="hljs-keyword">if</span> Point[INDEX_1][<span class="hljs-string">&quot;O&quot;</span>].tolist() == Point[INDEX_1][<span class="hljs-string">&quot;N&quot;</span>].tolist():<br>                Point[i][<span class="hljs-string">&quot;N&quot;</span>] = Position_update(Point[i][<span class="hljs-string">&quot;N&quot;</span>])<br>            <span class="hljs-keyword">if</span> Point[INDEX_2][<span class="hljs-string">&quot;O&quot;</span>].tolist() == Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>].tolist():<br>                Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>] = Position_update(Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>])<br>            Point[INDEX_1][<span class="hljs-string">&quot;Dit&quot;</span>]=Point[INDEX_1][<span class="hljs-string">&quot;N&quot;</span>] - Point[INDEX_1][<span class="hljs-string">&quot;O&quot;</span>]<br>            Point[INDEX_2][<span class="hljs-string">&quot;Dit&quot;</span>]=Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>] - Point[INDEX_2][<span class="hljs-string">&quot;O&quot;</span>]<br>        <span class="hljs-comment"># Check map-collision</span><br>        Point[INDEX_1]= Map_bonce(Point[INDEX_1], <span class="hljs-built_in">len</span>(MAP[<span class="hljs-number">0</span>]), <span class="hljs-built_in">len</span>(MAP))<br>        Point[INDEX_2]= Map_bonce(Point[INDEX_2], <span class="hljs-built_in">len</span>(MAP[<span class="hljs-number">0</span>]), <span class="hljs-built_in">len</span>(MAP))<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N_point):<br>        cv2.circle(MAP, Point[i][<span class="hljs-string">&quot;N&quot;</span>], <span class="hljs-number">3</span>, [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>], <span class="hljs-number">2</span>)<br>    print(Point[i])<br><br>    cv2.imshow(<span class="hljs-string">&quot;video&quot;</span>,MAP)<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">25</span>)&amp;<span class="hljs-number">0xFF</span>==<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>       cv2.destroyAllWindows()<br>       <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure></div><p>Collision based on the mask</p><p>mask circle</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Circle Mask</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Cir_mas</span>(<span class="hljs-params">Radian</span>):</span><br>    x = np.arange(<span class="hljs-number">0</span>, Radian *<span class="hljs-number">2</span> +<span class="hljs-number">1</span>)<br>    y = np.arange(<span class="hljs-number">0</span>, Radian *<span class="hljs-number">2</span> +<span class="hljs-number">1</span>)<br>    arr = np.zeros((y.size, x.size))<br><br>    cx = Radian +<span class="hljs-number">1</span><br>    cy = Radian +<span class="hljs-number">1</span><br>    r = Radian<br><br>    <span class="hljs-comment"># The two lines below could be merged, but I stored the mask</span><br>    <span class="hljs-comment"># for code clarity.</span><br>    mask = (x[np.newaxis,:]-cx)**<span class="hljs-number">2</span> + (y[:,np.newaxis]-cy)**<span class="hljs-number">2</span> &lt; r**<span class="hljs-number">2</span><br>    TMP = pd.melt(pd.DataFrame(mask).reset_index(), id_vars=<span class="hljs-string">&#x27;index&#x27;</span>)<br>    MASK = TMP.iloc[:,:<span class="hljs-number">2</span>][TMP.value==<span class="hljs-literal">True</span>].to_numpy()-[Radian+<span class="hljs-number">1</span>,Radian+<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Map_bonce</span>(<span class="hljs-params">Point, X, Y</span>):</span><br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] &lt;<span class="hljs-number">0</span>:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] *= -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] &lt;<span class="hljs-number">0</span>:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] *= -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] &gt; X:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>] = X - (Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">0</span>]- X)<br>    <span class="hljs-keyword">if</span> Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] &gt; Y:<br>        Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>] = Y - (Point[<span class="hljs-string">&#x27;N&#x27;</span>][<span class="hljs-number">1</span>]- Y)<br><br>    <span class="hljs-keyword">return</span>(Point)<br><br><br>Point = &#123;&#125;<br>N_point = <span class="hljs-number">50</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N_point):<br>    X = np.random.choice(<span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>))<br>    Y = np.random.choice(<span class="hljs-built_in">range</span>(<span class="hljs-number">500</span>))<br>    Point.update(&#123;i:&#123;<br>        <span class="hljs-string">&quot;O&quot;</span>:np.array([X,Y]),<br>        <span class="hljs-string">&quot;N&quot;</span>:np.array([X,Y]),<br>        <span class="hljs-string">&quot;Dit&quot;</span>:np.array([<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]),<br>        <span class="hljs-string">&quot;Ms&quot;</span>: Cir_mas(<span class="hljs-number">3</span>),<br>        <span class="hljs-string">&quot;Sp&quot;</span>: <span class="hljs-number">1</span><br>    &#125;&#125;)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Point_TB</span>(<span class="hljs-params">Point</span>):</span><br>    TB = pd.DataFrame()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Point:<br>        tmp = pd.DataFrame(Point[i][<span class="hljs-string">&#x27;Ms&#x27;</span>])  + Point[i][<span class="hljs-string">&#x27;N&#x27;</span>]<br>        tmp[<span class="hljs-string">&#x27;index&#x27;</span>] = i<br>        TB = pd.concat([TB, tmp])<br>    <span class="hljs-keyword">return</span> TB<br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">True</span>):<br>    MAP = np.zeros([<span class="hljs-number">500</span>, <span class="hljs-number">500</span>, <span class="hljs-number">3</span>], dtype=np.uint8)<br>    MAP[MAP==<span class="hljs-number">0</span>] = <span class="hljs-number">255</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N_point):<br>        Point[i][<span class="hljs-string">&quot;O&quot;</span>] = np.array(Point[i][<span class="hljs-string">&quot;N&quot;</span>])<br>        Point[i][<span class="hljs-string">&quot;N&quot;</span>] = Position_update(Point[i][<span class="hljs-string">&quot;N&quot;</span>])<br>        <span class="hljs-comment"># Check map-collision</span><br>        Point[i]= Map_bonce(Point[i], <span class="hljs-built_in">len</span>(MAP[<span class="hljs-number">0</span>]), <span class="hljs-built_in">len</span>(MAP))<br>        <span class="hljs-comment"># Particals Collision</span><br>        <span class="hljs-comment"># update old position and direction</span><br>        Point[i][<span class="hljs-string">&quot;Dit&quot;</span>]=Point[i][<span class="hljs-string">&quot;N&quot;</span>] - Point[i][<span class="hljs-string">&quot;O&quot;</span>]<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>  <span class="hljs-keyword">in</span> Point_TB(Point).iloc[:,:<span class="hljs-number">2</span>].duplicated().tolist():<br>        TMP = Point_TB(Point)<br>        TMP2 = TMP[TMP.iloc[:,:<span class="hljs-number">2</span>].duplicated()]<br>        INDEX = TMP[[i== TMP2.iloc[:,:<span class="hljs-number">2</span>].to_numpy().tolist()[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> TMP.iloc[:,:<span class="hljs-number">2</span>].to_numpy().tolist()]][<span class="hljs-string">&#x27;index&#x27;</span>].to_numpy()<br>        print(INDEX)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(INDEX)/<span class="hljs-number">2</span>)):<br>            INDEX_1 = INDEX[i*<span class="hljs-number">2</span>]<br>            INDEX_2 = INDEX[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]<br>            Point[INDEX_1][<span class="hljs-string">&#x27;N&#x27;</span>] +=Point[INDEX_2][<span class="hljs-string">&#x27;Dit&#x27;</span>]<br>            Point[INDEX_2][<span class="hljs-string">&#x27;N&#x27;</span>] +=Point[INDEX_1][<span class="hljs-string">&#x27;Dit&#x27;</span>]<br>            Point[INDEX_1][<span class="hljs-string">&quot;O&quot;</span>] = np.array(Point[INDEX_1][<span class="hljs-string">&quot;N&quot;</span>])<br>            Point[INDEX_2][<span class="hljs-string">&quot;O&quot;</span>] = np.array(Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>])<br>            <span class="hljs-keyword">if</span> Point[INDEX_1][<span class="hljs-string">&quot;O&quot;</span>].tolist() == Point[INDEX_1][<span class="hljs-string">&quot;N&quot;</span>].tolist():<br>                Point[i][<span class="hljs-string">&quot;N&quot;</span>] = Position_update(Point[i][<span class="hljs-string">&quot;N&quot;</span>])<br>            <span class="hljs-keyword">if</span> Point[INDEX_2][<span class="hljs-string">&quot;O&quot;</span>].tolist() == Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>].tolist():<br>                Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>] = Position_update(Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>])<br>            Point[INDEX_1][<span class="hljs-string">&quot;Dit&quot;</span>]=Point[INDEX_1][<span class="hljs-string">&quot;N&quot;</span>] - Point[INDEX_1][<span class="hljs-string">&quot;O&quot;</span>]<br>            Point[INDEX_2][<span class="hljs-string">&quot;Dit&quot;</span>]=Point[INDEX_2][<span class="hljs-string">&quot;N&quot;</span>] - Point[INDEX_2][<span class="hljs-string">&quot;O&quot;</span>]<br>        <span class="hljs-comment"># Check map-collision</span><br>        Point[INDEX_1]= Map_bonce(Point[INDEX_1], <span class="hljs-built_in">len</span>(MAP[<span class="hljs-number">0</span>]), <span class="hljs-built_in">len</span>(MAP))<br>        Point[INDEX_2]= Map_bonce(Point[INDEX_2], <span class="hljs-built_in">len</span>(MAP[<span class="hljs-number">0</span>]), <span class="hljs-built_in">len</span>(MAP))<br>        print(Point)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N_point):<br>        cv2.circle(MAP, Point[i][<span class="hljs-string">&quot;N&quot;</span>], <span class="hljs-number">3</span>, [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>], <span class="hljs-number">1</span>)<br><br>    cv2.imshow(<span class="hljs-string">&quot;video&quot;</span>,MAP)<br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">25</span>)&amp;<span class="hljs-number">0xFF</span>==<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;q&#x27;</span>):<br>       cv2.destroyAllWindows()<br>       <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure></div><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">Brownian Motion</summary>
    
    
    
    <category term="Python" scheme="https://karobben.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://karobben.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>RNA-structure and Prediction</title>
    <link href="https://karobben.github.io/2022/11/15/Bioinfor/rna-structure/"/>
    <id>https://karobben.github.io/2022/11/15/Bioinfor/rna-structure/</id>
    <published>2022-11-15T16:16:46.000Z</published>
    <updated>2023-02-12T01:22:34.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RNA-Structure-and-Prediction">RNA Structure and Prediction</h2><table><thead><tr><th style="text-align:left"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:left">Like protein, RNA also has secondary structure, tertiary structure, and quaternary stricture, too.</td><td style="text-align:center"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/DNA_RNA_structure_%28full%29.png/540px-DNA_RNA_structure_%28full%29.png" alt=""><br><a href="https://en.wikipedia.org/wiki/Nucleic_acid_sequence">© wiki</a>]</td></tr></tbody></table><p>In Secondary Structure, it could form:</p><ul><li>Double helix</li><li>Stem-loop structure</li><li>Pseudoknots</li></ul><p><a href="https://en.wikipedia.org/wiki/List_of_RNA_structure_prediction_software">wikipedia</a> listed a bunch of tools for RNA secondary structure prediction.</p><p>Online structure prediction servers:</p><ul><li><a href="https://rna.urmc.rochester.edu/RNAstructureWeb/Servers/Predict1/ResultsPages/20221115.114114-7c052f9f/Results.html">Mathews Lab</a></li><li><a href="http://rna.tbi.univie.ac.at/cgi-bin/RNAWebSuite/RNAfold.cgi">RNAfold</a></li></ul><h2 id="RAN-Secondary-Structure-Format">RAN Secondary Structure Format.</h2><ul><li>DB format (Dot bracket)<ul><li>Unpaired nucleotides are indicated with the . or : characters.</li><li>Matching pairs of parentheses indicate base pairs.</li><li>To indicate non-nested base pairs (pseudoknots), additional brackets may be used: [], {}, or &lt;&gt;.<br>Example:</li></ul></li></ul><pre>GGUGCAUGCCGAGGGGCGGUUGGCCUCGUAAAAAGCCGCAAAAAAUAGCAUGUAGUACC((((((((((((((.[[[[[[..))))).....]]]]]]........)))))...))))</pre><h2 id="Secondary-Structure-Predict">Secondary Structure Predict</h2><p>Seq:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="EBNF"><figure class="iseeu highlight /ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">UGAGUGGUGUUGUUGGCUGCAUUAUGAUGUUGGUUAUAUUCUGGUUUUCUUCCACUCAACAACAACAACAACACGCAGUAGUAGAAGCAACAACAAGCAUAUAACCAACAUCAUAAUGCAGCCAACAACACCACUCA</span><br></code></pre></td></tr></table></figure></div><p>Website: <a href="http://rna.tbi.univie.ac.at/cgi-bin/RNAWebSuite/RNAfold.cgi">RANfold</a><br>Result:<br><img src="https://s1.ax1x.com/2022/11/16/zVgb0H.png" alt=""></p><h2 id="RNA-Secondary-Structure-Plot">RNA Secondary Structure Plot</h2><h3 id="RNAplot-from-ViennaRNA">RNAplot from ViennaRNA</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">RNAplot tmp.db <span class="hljs-comment"># RNAfold results</span><br></code></pre></td></tr></table></figure></div><p><img src="https://s1.ax1x.com/2022/11/16/zV2KuF.png" alt=""></p><h3 id="RRNA-in-R">RRNA in R</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">install.package(<span class="hljs-string">&quot;RRNA&quot;</span>)<br>library(RRNA)<br>coord=ct2coord(ct)<br>ct=makeCt( <span class="hljs-string">&quot;(((((((((((((((((((((((((((((((((((((((.((.(((((((((.(((..((.................))))).)))).)).))).)).)))))))))))))))))))))))))))))))))))))))&quot;</span>, <span class="hljs-string">&quot;UGAGUGGUGUUGUUGGCUGCAUUAUGAUGUUGGUUAUAUUCUGGUUUUCUUCCACUCAACAACAACAACAACACGCAGUAGUAGAAGCAACAACAAGCAUAUAACCAACAUCAUAAUGCAGCCAACAACACCACUCA&quot;</span>)<br>RNAPlot(coord,hl=<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;GGGUUU&quot;</span>,<span class="hljs-string">&quot;AAAUUU&quot;</span>),seqcols=<span class="hljs-built_in">c</span>(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>),labTF=<span class="hljs-built_in">F</span>)<br></code></pre></td></tr></table></figure></div><p><img src="https://s1.ax1x.com/2022/11/16/zVg3Sf.png" alt=""></p><h2 id="Python">Python</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">pip install RNA forgi<br></code></pre></td></tr></table></figure></div><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">RNA-structure and Prediction</summary>
    
    
    
    <category term="Biology" scheme="https://karobben.github.io/categories/Biology/"/>
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/"/>
    
    <category term="Protocol" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Protocol/"/>
    
    <category term="miRNA" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Protocol/miRNA/"/>
    
    
    <category term="Software" scheme="https://karobben.github.io/tags/Software/"/>
    
    <category term="Protocol" scheme="https://karobben.github.io/tags/Protocol/"/>
    
    <category term="miRNA-Seq" scheme="https://karobben.github.io/tags/miRNA-Seq/"/>
    
  </entry>
  
  <entry>
    <title>Wet Lab Techs with Brief Explained</title>
    <link href="https://karobben.github.io/2022/11/09/LearnNotes/lab-techs/"/>
    <id>https://karobben.github.io/2022/11/09/LearnNotes/lab-techs/</id>
    <published>2022-11-09T19:54:20.000Z</published>
    <updated>2023-02-11T19:20:05.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Wet-Lab-Techs-with-Brief-Explained">Wet Lab Techs with Brief Explained</h2><h2 id="Gel-Shift-Assays–EMSA">Gel Shift Assays–EMSA</h2><div class="admonition note"><p class="admonition-title">What is EMSA</p><p>The interaction of proteins with DNA is central to the control of many cellular processes including DNA replication, recombination and repair, transcription, and viral assembly. One important technique for studying gene regulation and determining protein–DNA interactions is the electrophoretic mobility shift assay (EMSA). An advantage of studying protein–DNA interactions by an electrophoretic assay is the ability to resolve complexes of different stoichiometry or conformation. Another major advantage is that the source of the DNA-binding protein may be a crude nuclear or whole cell extract, in vitro transcription product or a purified preparation. EMSA can be used qualitatively to identify sequence-specific, DNA-binding proteins (such as transcription factors) in crude lysates and, in conjunction with mutagenesis, to identify the important binding sequences within the upstream regulatory region of a given gene. EMSA can also be utilized quantitatively to measure thermodynamic and kinetic parameters.<a href="https://www.thermofisher.com/us/en/home/life-science/protein-biology/protein-biology-learning-center/protein-biology-resource-library/pierce-protein-methods/gel-shift-assays-emsa.html">@ ThermoFisher 2022</a></p></div><p>Brief explained: During Gel electrophoration, if we add DNA (oligo) and protein together and the protein could interact with the DNA, the transfer speed of DNA is much slower because protein is dragging them.</p><p>One of a standard kit for EMSA:</p><table><thead><tr><th style="text-align:left"><a href="https://www.thermofisher.com/order/catalog/product/20148">LightShift™ Chemiluminescent EMSA Kit</a> from thermofisher. (<a href="https://www.thermofisher.com/document-connect/document-connect.html?url=https://assets.thermofisher.com/TFS-Assets%2FLSG%2Fmanuals%2FMAN0011409_LightShift_Chemiluminescent_EMSA_UG.pdf">documentation</a>)</th><th style="text-align:left"><img src="https://www.thermofisher.com/TFS-Assets/LSG/product-images/20148-DNA-EMSA-Kit-b.jpg-650.jpg" alt=""></th></tr></thead><tbody></tbody></table><table><thead><tr><th style="text-align:center"><img src="https://s1.ax1x.com/2022/11/10/zSvqbD.png" alt=""></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://www.thermofisher.com/order/catalog/product/20148">© ThermoFisher</a></td></tr></tbody></table><p>According its documentation, a group should have at least 3 tracks:</p><ol><li>labeled DNA: which works as negative control. It shows them band when there are no protein-DNA interaction.</li><li>labeled DNA + protein: The main track for results. The position of DNA shifts because proteins interact with them. The movement of DNA is hindered by proteins.</li><li>labeled DNA + protein + overload unlabeled DNA: By competition, most proteins interact with unlabeled DNA because the quantity of them is higher them labeled. As a result, we can see a dim-shifted band or no shifted band at all. The track could eliminate false positives brought by protein-label tag binding.</li></ol><p>Publication used:</p><ul><li>Shyamsunder, Pavithra, et al. “Identification of a novel enhancer of CEBPE essential for granulocytic differentiation.” Blood, The Journal of the American Society of Hematology 133.23 (2019): 2507-2517.</li></ul><h3 id="Eamples-in-paper">Eamples in paper</h3><table><thead><tr><th style="text-align:center"><img src="https://s1.ax1x.com/2022/11/10/zSxCKf.png" alt=""></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://ashpublications.org/blood/article/133/23/2507/273839/Identification-of-a-novel-enhancer-of-CEBPE">© Shyamsunder, 2019</a></td></tr></tbody></table><p>In this paper, they showed the 4<sub>th</sub> track, which is protein + unlabeled DNA. In the panel right, there are weak shifted bind which could be the protein.</p><h2 id="Luciferase-Report-Assay">Luciferase Report Assay</h2><div class="admonition note"><p class="admonition-title">What is a Luciferase Report Assay?</p><p>A luciferase reporter assay is a test that investigates whether a protein can activate or repress the expression of a target gene using luciferase as a reporter protein (<a href="https://www.sciencedirect.com/science/article/pii/B9780128005118000150?via%3Dihub">Carter &amp; Shieh, 2015</a>). The synthesis of the reporter protein and the addition of a substrate results in a chemical reaction with bioluminescence (or the emission of photons) as a by-product. This bioluminescence directly corresponds with the effect of the protein on expression of the target gene.<a href="https://goldbio.com/articles/article/a-deep-dive-into-the-luciferase-assay-what-it-is-how-it-works-and-more">© GoldBio, 2022;</a></p></div><table><thead><tr><th style="text-align:center"><img src="https://www.jbc.org/cms/attachment/6d2ce07c-a367-4fc6-8d4f-c2e1efbe40b5/gr1.jpg" alt=""></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://www.sciencedirect.com/science/article/pii/S0021925820371155?via%3Dihub">© Scholl, et al., 2014</a></td></tr><tr><td style="text-align:center"><img src="https://commercio.nyc3.digitaloceanspaces.com/goldbio-2018/pages/Functional%20luc.png" alt=""></td></tr><tr><td style="text-align:center"><a href="https://goldbio.com/articles/article/a-deep-dive-into-the-luciferase-assay-what-it-is-how-it-works-and-more">© GoldBio, 2022;</a></td></tr></tbody></table><p>Scholl, Zackary &amp; Yang, Weitao &amp; Marszalek, Piotr. (2014). Chaperones Rescue Luciferase Folding by Separating Its Domains. The Journal of biological chemistry. 290. 10.1074/jbc.M114.582049.</p><p>After inserting the target DNA segment in the plasmid, the vector is transferred into cells. If proteins could interact with the segment, luciferase would express and cells could illuminate.</p><table><thead><tr><th style="text-align:center"><img src="https://www.researchgate.net/profile/Chrysostomos-Tornari/publication/44789832/figure/fig11/AS:906421684170753@1593119178226/pGL410luc2-vector-Schematic-diagram-of-the-pGL410luc2-luciferase-reporter-vector.jpg" alt=""></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://www.researchgate.net/figure/pGL410luc2-vector-Schematic-diagram-of-the-pGL410luc2-luciferase-reporter-vector_fig11_44789832">© Chrysostomos Tornari; 2010</a></td></tr></tbody></table><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">Wet Lab Techs with Brief Explained</summary>
    
    
    
    <category term="Biology" scheme="https://karobben.github.io/categories/Biology/"/>
    
    <category term="Wet Protocol" scheme="https://karobben.github.io/categories/Biology/Wet-Protocol/"/>
    
    
    <category term="Biology" scheme="https://karobben.github.io/tags/Biology/"/>
    
  </entry>
  
  <entry>
    <title>RNA Seq: Alternative Splicing</title>
    <link href="https://karobben.github.io/2022/11/07/Bioinfor/alternative-splicing/"/>
    <id>https://karobben.github.io/2022/11/07/Bioinfor/alternative-splicing/</id>
    <published>2022-11-07T20:44:12.000Z</published>
    <updated>2023-02-12T01:21:54.210Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://github.com/flemingtonlab/SpliceTools">SpliceTools</a></li><li><a href="https://github.com/tgen/bisbee">Bisbee</a>; <a href="https://www.nature.com/articles/s41598-021-89938-2">paper</a></li><li><a href="https://rnaseq-mats.sourceforge.net/">rMATS</a></li></ul><h2 id="Some-background">Some background</h2><p>In seminar recording form <a href="https://www.youtube.com/watch?v=LknDQw08P5w">OHSU Informatics</a>, they talked about how rMATS worked and the limits of rMATS in overlapped genes and complicated splicing events.<br>Julian</p><h2 id="rMARS">rMARS</h2><blockquote><p>rMATS (multivariate analysis of transcript splicing ) is a computational tool to detect differential alternative splicing events from RNA-Seq data. The statistical model of MATS calculates the P-value and false discovery rate that the difference in the isoform ratio of a gene between two conditions exceeds a given user-defined threshold. From the RNA-Seq data, MATS can automatically detect and analyze alternative splicing events corresponding to all major types of alternative splicing patterns. MATS handles replicate RNA-Seq data from both paired and unpaired study design. (<a href="https://rnaseq-mats.sourceforge.net/">© Xing Lab</a>)</p></blockquote><table><thead><tr><th style="text-align:center"><img src="https://rnaseq-mats.sourceforge.net/splicing.jpg" alt=""></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://rnaseq-mats.sourceforge.net/">© Xing Lab</a></td></tr></tbody></table><ol><li>Unpaired Replicates.</li></ol><h3 id="Other-Related-Tools">Other Related Tools</h3><blockquote><p>MISO, SpliceTrap, ALEXA- seq, and rSeqDiff are designed for two-sample com- parison and do not handle replicates. Cufflinks, FDM, and DiffSplice use the Jensen–Shannon divergence metric to detect differential isoform proportion while accounting for vari- ability among replicates. (rMATS)</p></blockquote><h3 id="Pipelines-form-the-paper">Pipelines form the paper</h3><p>SRS35482: → mapped into Ensembl transcripts (TopHat) → unmapped reads mapped into Genom h1g (TopHat) → rMATS</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo apt install libgsl-dev cmake cython<br>pip install Cython<br><br>git <span class="hljs-built_in">clone</span> https://github.com/Xinglab/rmats-turbo.git<br><span class="hljs-built_in">cd</span> rmats-turbo<br>./build_rmats<br><br><br>rmats.py --b1 path1 --b2 path2 --gtf ../Mutation/Yuwei_data/DATA/genes.gtf -t single --readLength 50 --nthread 4 --od output --tmp tmp_output<br><br>rmats.py --b1 path1 --b2 path2 --gtf ../DB/dmel-all-r6.39.gtf -t single --readLength 50 --nthread 4 --od output --tmp tmp_output<br><br></code></pre></td></tr></table></figure></div><h2 id="Aligner-Choose">Aligner Choose</h2><p>For aternative splicing, we have to use intron awareness aligners like tophat, hisat, stat, etc. Other well known aligners like bowtie and bwa should be avoided only you have significant reasons.</p><h3 id="Tophat">Tophat</h3><p>In the paper of rMATS, they choosed Tophat as the aligner.<br>You can’t add parameters at the end of the commands. All arguments should following <code>tophat</code> and tha last three is index + reads</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">tophat -G *.gtf -p &lt;threads&gt; -o &lt;out_dir&gt; &lt;bowtie_index&gt; &lt;reads1,reads2,...&gt; &lt;reads1,reads2,...&gt;<br><br><br>hisat2 [options]* -x &lt;ht2-idx&gt; &#123;-1 &lt;m1&gt; -2 &lt;m2&gt; | -U &lt;r&gt;&#125; [-S &lt;sam&gt;]<br><br><span class="hljs-comment"># build index</span><br>hisat2-build -p 16 genome.fa genome<br>hisat2 -p 40 -x hisat2-index -U A.fq -S out.sam<br><br><span class="hljs-keyword">for</span> SAMPLE <span class="hljs-keyword">in</span> CF TF; <span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> ../Merge_Tri_FQ/<span class="hljs-variable">$SAMPLE</span>*;<br>    sed <span class="hljs-string">&quot;s/Hi/ht2_<span class="hljs-variable">$SAMPLE</span>/;s/128/32/&quot;</span> ../Model.sh &gt; script/<span class="hljs-variable">$SAMPLE</span>\_ht2.sh<br>    <span class="hljs-built_in">echo</span> hisat2 -x ../DB/dmel-all-chromosome-r6.39 -p 40  -S ht2_<span class="hljs-variable">$SAMPLE</span>.sam -U $(ls ../Merge_Tri_FQ/<span class="hljs-variable">$SAMPLE</span>*| tr <span class="hljs-string">&quot;\n&quot;</span> <span class="hljs-string">&quot;,&quot;</span>| sed <span class="hljs-string">&#x27;s/,$/\n/&#x27;</span>)  &gt;&gt; script/<span class="hljs-variable">$SAMPLE</span>\_ht2.sh<br>    sbatch script/<span class="hljs-variable">$SAMPLE</span>\_ht2.sh<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure></div><p>PS: An interesting thing is you can’t build ‘hisat index’ with ‘gz’ file. So, we need to decompress it before building the index. Lol</p><div class="admonition note"><p class="admonition-title">Differential Expression and Differential Splicing.</p></div><table><thead><tr><th style="text-align:center"><img src="https://s1.ax1x.com/2022/11/11/zCFD2D.png" alt=""></th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://aacrjournals.org/mcr/article/15/9/1206/268100/The-Landscape-of-Isoform-Switches-in-Human">© K. Vitting-Seerup; 2017</a></td></tr></tbody></table><h2 id="Run-with-test-data">Run with test data</h2><p>In the official documentation, they applied a small group of test data:</p><p>Thanks for <a href="https://www.jieandze1314.com/post/cnposts/169/">Yunze Liu</a>, I knwo that we just need to download the human gtf for tarting the test.<br>I tried two set of parameters and the results end the same. But I do have different number of results from genome compared with Yunze Liu’s result which means we used different gtf (Mine has less genes). The reference I used is from <a href="https://hgdownload.soe.ucsc.edu/goldenPath/hg19/bigZips/genes/">ucsc</a>: <a href="https://hgdownload.soe.ucsc.edu/goldenPath/hg19/bigZips/genes/hg19.ensGene.gtf.gz">hg19</a></p><p>GTF and <a href="https://sourceforge.net/projects/rnaseq-mats/files/MATS/testData.tgz/download">Test data</a> from <a href="https://rnaseq-mats.sourceforge.net/">documentation</a></p><pre>.├── 231ESRP.25K.rep-1.bam├── 231ESRP.25K.rep-1.bam.bai├── 231ESRP.25K.rep-1.R1.fastq├── 231ESRP.25K.rep-1.R2.fastq├── 231ESRP.25K.rep-2.bam├── 231ESRP.25K.rep-2.bam.bai├── 231ESRP.25K.rep-2.R1.fastq├── 231ESRP.25K.rep-2.R2.fastq├── 231EV.25K.rep-1.bam├── 231EV.25K.rep-1.bam.bai├── 231EV.25K.rep-1.R1.fastq├── 231EV.25K.rep-1.R2.fastq├── 231EV.25K.rep-2.bam├── 231EV.25K.rep-2.bam.bai├── 231EV.25K.rep-2.R1.fastq├── 231EV.25K.rep-2.R2.fastq├── b1.txt├── b2.txt├── hg19.ensGene.gtf├── s1.txt└── s2.txt</pre><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">python ../Github/rmats-turbo/rmats.py  --b1 b1.txt --b2 b2.txt --gtf hg19.ensGene.gtf  --od bam_test --tmp bam_tmp -t paired --readLength 50 --cstat 0.0001 --libType fr-unstranded<br>python ../Github/rmats-turbo/rmats.py --b1 b1.txt  --b2 b2.txt  -t paired --readLength 50 --nthread 4 --od <span class="hljs-built_in">test</span> --tmp tmp_output --gtf hg19.ensGene.gtf<br></code></pre></td></tr></table></figure></div><pre>Done processing each gene from dictionary to compile AS eventsFound 39321 exon skipping eventsFound 2115 exon MX eventsFound 13456 alt SS eventsThere are 8337 alt 3 SS events and 5119 alt 5 SS events.Found 6244 RI events</pre><h2 id="Repeats-and-non-repeats-results">Repeats and non-repeats results</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">wc CFT*/*| awk <span class="hljs-string">&#x27;&#123;print $4,$1&#125;&#x27;</span>| tr <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-string">&#x27; &#x27;</span>| awk <span class="hljs-string">&#x27;&#123;print $2,$1,$3&#125;&#x27;</span>|sort | column -t -s<span class="hljs-string">&#x27; &#x27;</span><br></code></pre></td></tr></table></figure></div><pre>MXE.MATS.JCEC.txt             CFTF    350MXE.MATS.JCEC.txt             CFTF_s  109MXE.MATS.JC.txt               CFTF    349MXE.MATS.JC.txt               CFTF_s  109RI.MATS.JCEC.txt              CFTF    31RI.MATS.JCEC.txt              CFTF_s  17RI.MATS.JC.txt                CFTF    31RI.MATS.JC.txt                CFTF_s  17SE.MATS.JCEC.txt              CFTF    857SE.MATS.JCEC.txt              CFTF_s  334SE.MATS.JC.txt                CFTF    849SE.MATS.JC.txt                CFTF_s  333</pre><p>The first column is rMATS results. the second column is result folder. The last column is the number of row for each file.<br><code>CFTF</code> is triplicate result and <code>CFTF_s</code> is single result. We can find that triplicate result have more counts.</p><h2 id="Visualization">Visualization</h2><p>Tools: <a href="https://github.com/Xinglab/rmats2sashimiplot">Xinglab/rmats2sashimiplot</a></p><div class="admonition note"><p class="admonition-title">This tool is based ob python2, not python3!</p></div><p>An example of code could be: (<a href="https://evvail.com/2021/05/05/2400.html">Omics-Hunter</a>)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">rmats2sashimiplot --b1 231ESRP.25K.rep-1.bam,231ESRP.25K.rep-2.bam --b2  231EV.25K.rep-1.bam,231EV.25K.rep-2.bam -t SE -e bam_test/SE.MATS.JC.txt --l1 SampleOne --l2 SampleTwo --exon_s 1 --intron_s 5 -o test_events_output<br></code></pre></td></tr></table></figure></div><table><thead><tr><th style="text-align:center"><img src="https://s1.ax1x.com/2022/11/12/zPwasU.png" alt=""></th></tr></thead><tbody></tbody></table><div class="admonition info"><p class="admonition-title">Errors</p></div><pre>ImportError: No module named _bsddbmv: cannot stat '/mnt/cypress/kraken_RNA/asp2/plot/Sashimi_plot/2R:24671294:24688185:+.pdf': No such file or directory</pre><p>It is because you lack of</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">conda install -c conda-forge bsddb3<br></code></pre></td></tr></table></figure></div><h3 id="Plot-the-result-by-position">Plot the result by position</h3><p>By using the <code>rmats2sashimiplot</code> tool, you can create a plot of the output by specifying a region with the -c option. However, this can be prone to errors. Based on my experience, there are several factors that should be considered:</p><ul><li>It is recommended that each position should have its own directory, as the tool generates an index for that position which may not update even if the parameters are changed.</li><li>It is possible to assign a random position, but it is preferable to assign a position based on the position of exons.</li><li>If there are no genes located within the region that has been specified, an error will occur.</li></ul><div class="admonition info"><p class="admonition-title">png result</p><p>It appears that the <code>rmats2sashimiplot</code> tool is not capable of producing the result as a PNG image format. As a solution, we can use other tools such as <code>pdftoppm</code> to convert the generated PDF file to the PNG format. For instance, a command example to convert a file named p1.pdf to a PNG file named p1.png with a resolution of 1000 can be: <code>pdftoppm p1.pdf p1.png -png -r 1000</code>.</p></div><h2 id="Result-Explanation">Result Explanation</h2><div class="admonition note"><p class="admonition-title">result</p><ul><li>ES（Exon skipping）：外显子跳跃。外显子在前体mRNA剪接形成成熟mRNA过程中被跳过，最终没有出现在某些成熟mRNA上【发生跳跃的外显子和其两侧的内含子都被剪切掉；上游和下游的外显子被直接连着一起保留在剪切后的产物中】</li><li>RI（Retained intron）：内含子保留。前体mRNA在剪接形成成熟mRNA的过程中，部分内含子被保留下来【某一段核苷酸序列在一个剪切体中是外显子的一部分，而在与之对照的剪切体中却是内含子而被剪切掉】</li><li>AD（Alternate Donor site）或A5SS（Alternative 5’ splice site）：5’端可变剪接。前体mRNA在剪接形成成熟mRNA的过程中，5’端边界发生不同方式的剪接，导致5‘端外显子有所延长</li><li>AA（Alternate acceptor site）或A3SS（Alternative 3’ splice site）：3’端可变剪接。前体mRNA在剪接形成成熟mRNA的过程中，3’端边界发生不同方式的剪接，导致3‘端外显子有所延长</li><li>AT（Alternate terminator）或Alternative last exon：第一个外显子发生改变</li><li>AP（Alternate promoter）或Alternative first exon：最后一个外显子发生改变</li><li>ME（Mutually exclusive exon）：外显子选择性跳跃。形成的两种不同的转录本中，两转录本之间相同的外显子称为constitutive exon， 不同的外显子称为inclusive exon，inclusive exon不能同时存在与同一转录本中， 只能分别存在于不同转录本中from: <a href="https://www.jieandze1314.com/post/cnposts/169/">Yunze Liu</a></li></ul></div><p>An Example of “SE” results</p><pre>IDGeneIDgeneSymbolchrstrandexonStart_0baseexonEndupstreamESupstreamEEdownstreamESdownstreamEEIDIJC_SAMPLE_1SJC_SAMPLE_1IJC_SAMPLE_2SJC_SAMPLE_2IncFormLenSkipFormLenPValueFDRIncLevel1IncLevel2IncLevelDifference2365"FBgn0283521""lola"chr2R-105158341051605110510524105110041053203810532119236569,54,772,0,67,63,1598493.09913051888e-086.84584054917e-070.945,1.0,0.8650.538,0.1670.5842366"FBgn0283521""lola"chr2R-10527065105272191052480410525862105320381053211923664,0,97,6,75,30,098491.0012167162e-072.0676289395e-060.222,0.0,0.3911.0,1.0-0.7962341"FBgn0250823""gish"chr3R+1628208016282408162749531627516916289630162898392341400,517,47557,86,8233,4040,43984900.00.778,0.75,0.7430.292,0.3170.4532358"FBgn0250823""gish"chr3R+16299590162996891629717416297345163018221630237223584,8,40,0,01,02,198491.12175272649e-062.04962226569e-051.0,1.0,1.00.2,0.00.92356"FBgn0250823""gish"chr3R+16299590162996891629717416297345163005681630086523561,0,00,1,01,00,0984911.01.0,0.0,NA1.0,NA-0.52359"FBgn0250823""gish"chr3R+1629959016299689162984691629855016301244163013512359486,567,539562,650,571113,12534,32984900.00.302,0.304,0.3210.624,0.661-0.334</pre><p>There are lot’s of columns. Let’s check them one by one.</p><ul><li><strong>ID</strong>: A ID for this specific events. Numeric.</li><li><strong>GeneID</strong>: The ID of the event-location. Comes from the gtf file you given</li><li><strong>geneSymbol</strong>: The name of the genes. ‘lola’ for example.</li><li><strong>chr</strong>: chromosome name. It would add a chr at the head of each chromosome’s name. Don’t worry about this feature in <code>rmats2sashimiplot</code>. You just need the name as the same from gff file.</li><li><strong>strand</strong>: the direction of the gene.</li><li><strong>exonStart_0base</strong>:</li></ul><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">RNA Seq: Alternative Splicing</summary>
    
    
    
    <category term="Biology" scheme="https://karobben.github.io/categories/Biology/"/>
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/"/>
    
    <category term="Protocol" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Protocol/"/>
    
    <category term="Alternative Splicing" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Protocol/Alternative-Splicing/"/>
    
    
    <category term="RNA-Seq" scheme="https://karobben.github.io/tags/RNA-Seq/"/>
    
    <category term="Protocol" scheme="https://karobben.github.io/tags/Protocol/"/>
    
    <category term="RNA-Seq Protocol" scheme="https://karobben.github.io/tags/RNA-Seq-Protocol/"/>
    
  </entry>
  
  <entry>
    <title>KEGG API</title>
    <link href="https://karobben.github.io/2022/10/28/Bioinfor/kegg-api/"/>
    <id>https://karobben.github.io/2022/10/28/Bioinfor/kegg-api/</id>
    <published>2022-10-28T21:00:41.000Z</published>
    <updated>2023-02-12T01:22:10.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="KEGG-API">KEGG API</h2><p>list of all pathways:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">curl https://rest.kegg.jp/list/pathway/dme<br></code></pre></td></tr></table></figure></div><pre>path:dme00010Glycolysis / Gluconeogenesis - Drosophila melanogaster (fruit fly)path:dme00020Citrate cycle (TCA cycle) - Drosophila melanogaster (fruit fly)path:dme00030Pentose phosphate pathway - Drosophila melanogaster (fruit fly)</pre><p>list of all organisms gene ID</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">curl https://rest.kegg.jp/list/dme<br></code></pre></td></tr></table></figure></div><pre>dme:Dmel_CG40494CDSX:127449..140340RhoGAP1A; Rho GTPase activating protein at 1A, isoform Adme:Dmel_CR43552miRNAX:133385..133502mir-4915-RAdme:Dmel_CG17131CDSX:140318..200663tyn; trynity, isoform Adme:Dmel_CG17707CDSX:complement(142731..148426)CG17707; uncharacterized protein, isoform Bdme:Dmel_CG3038CDSX:complement(243954..245856)CG3038; uncharacterized protein, isoform Cdme:Dmel_CG2995CDSX:245978..254650G9a; G9a, isoform Bdme:Dmel_CG42376CDSX:254876..255524CG42376; uncharacterized protein, isoform A</pre><p>pathway information</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="code"><pre><code class="hljs awk">curl https:<span class="hljs-regexp">//</span>rest.kegg.jp<span class="hljs-regexp">/get/</span>dme00010<br></code></pre></td></tr></table></figure></div><pre>ENTRY       dme00010                    PathwayNAME        Glycolysis / Gluconeogenesis - Drosophila melanogaster (fruit fly)DESCRIPTION Glycolysis is the process of converting glucose into pyruvate and generating small amounts of ATP (energy) and NADH (reducing power). It is a central pathway that produces important precursor metabolites: six-carbon compounds of glucose-6P and fructose-6P and three-carbon compounds of glycerone-P, glyceraldehyde-3P, glycerate-3P, phosphoenolpyruvate, and pyruvate [MD:M00001]. Acetyl-CoA, another important precursor metabolite, is produced by oxidative decarboxylation of pyruvate [MD:M00307]. When the enzyme genes of this pathway are examined in completely sequenced genomes, the reaction steps of three-carbon compounds from glycerone-P to pyruvate form a conserved core module [MD:M00002], which is found in almost all organisms and which sometimes contains operon structures in bacterial genomes. Gluconeogenesis is a synthesis pathway of glucose from noncarbohydrate precursors. It is essentially a reversal of glycolysis with minor variations of alternative paths [MD:M00003].CLASS       Metabolism; Carbohydrate metabolismPATHWAY_MAP dme00010  Glycolysis / GluconeogenesisMODULE      dme_M00001  Glycolysis (Embden-Meyerhof pathway), glucose => pyruvate [PATH:dme00010]            dme_M00002  Glycolysis, core module involving three-carbon compounds [PATH:dme00010]            dme_M00003  Gluconeogenesis, oxaloacetate => fructose-6P [PATH:dme00010]            dme_M00307  Pyruvate oxidation, pyruvate => acetyl-CoA [PATH:dme00010]DBLINKS     GO: 0006096 0006094ORGANISM    Drosophila melanogaster (fruit fly) [GN:dme]GENE        Dmel_CG8094  Hex-C; hexokinase C [KO:K00844] [EC:2.7.1.1]            Dmel_CG32849  Hex-t2; Hex-t2 [KO:K00844] [EC:2.7.1.1]            Dmel_CG3001  Hex-A; hexokinase A, isoform C [KO:K00844] [EC:2.7.1.1]            Dmel_CG33102  Hex-t1; Hex-t1 [KO:K00844] [EC:2.7.1.1]</pre><p>KEGG modules</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">curl https://rest.kegg.jp/list/md<br></code></pre></td></tr></table></figure></div><pre>md:M00951Cremeomycin biosynthesis, aspartate/3,4-AHBA => cremeomycinmd:M00952Benzoxazinoid biosynthesis, indoleglycerol phosphate => DIMBOA-glucosidemd:M00953Mugineic acid biosynthesis, methionine => 3-epihydroxymugineic acidmd:M00956Lysine degradation, bacteria, L-lysine => succinatemd:M00957Lysine degradation, bacteria, L-lysine => glutarate => succinate/acetyl-CoAmd:M00958Adenine ribonucleotide degradation, AMP => Uratemd:M00959Guanine ribonucleotide degradation, GMP => Uratemd:M00960Lysine degradation, bacteria, L-lysine => D-lysine => succinatemd:M00961Betacyanin biosynthesis, L-tyrosine => amaranthinmd:M00962Psilocybin biosynthesis, tryptophan => psilocybinmd:M00963Chanoclavine aldehyde biosynthesis, tryptophan => chanoclavine-I aldehydemd:M00964Fumigaclavine biosynthesis, chanoclavine-I aldehyde => fumigaclavine Cmd:M00965Vindoline biosynthesis, tabersonine => vindoline</pre><h2 id="Another-Project">Another Project</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">curl https://rest.kegg.jp/get/hsa05130/image --output test.png<br>curl https://rest.kegg.jp/get/hsa05130/conf --output <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;test.png&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">title</span> =<span class="hljs-string">&quot;123&quot;</span>; <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: #0075eb; width: 50px;position: absolute;  left: 485px; top: 959px;&quot;</span>&gt;</span>ITGB1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: #eb0027; width: 50px;position: absolute;  left: 750px; top: 1788px;&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropbtn&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: #eb0027&quot;</span>&gt;</span>NAIP<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dropdown-content&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> &gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> &gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> &gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>    .dropbtn &#123;<br><span class="css">        <span class="hljs-attribute">background-color</span>: black;</span><br><span class="css">        <span class="hljs-attribute">color</span>: white;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: #px;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: #px;</span><br><span class="css">        <span class="hljs-attribute">border</span>: none;</span><br>    &#125;<br><br>    .dropdown &#123;<br><span class="css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">        <span class="hljs-attribute">display</span>: inline-block;</span><br>    &#125;<br><br>    .dropdown-content &#123;<br><span class="css">        <span class="hljs-attribute">display</span>: none;</span><br><span class="css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: lightgrey;</span><br><span class="css">        <span class="hljs-attribute">min-width</span>: #px;</span><br><span class="css">        <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;</span><br>    &#125;<br><br><span class="css">    <span class="hljs-selector-class">.dropdown-content</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">color</span>: black;</span><br><span class="css">        <span class="hljs-attribute">padding</span>: #px #px;</span><br><span class="css">        <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="css">        <span class="hljs-attribute">display</span>: block;</span><br>    &#125;<br><span class="css">    <span class="hljs-selector-class">.dropdown-content</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">background-color</span>: white;&#125;</span><br><span class="css">    <span class="hljs-selector-class">.dropdown</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.dropdown-content</span> &#123;<span class="hljs-attribute">display</span>: block;&#125;</span><br><span class="css">    <span class="hljs-selector-class">.dropdown</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-selector-class">.dropbtn</span> &#123;<span class="hljs-attribute">background-color</span>: grey;&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></div><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">KEGG API</summary>
    
    
    
    <category term="Biology" scheme="https://karobben.github.io/categories/Biology/"/>
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/"/>
    
    <category term="Database" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Database/"/>
    
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/tags/Bioinformatics/"/>
    
    <category term="Database" scheme="https://karobben.github.io/tags/Database/"/>
    
    <category term="api" scheme="https://karobben.github.io/tags/api/"/>
    
    <category term="KEGG" scheme="https://karobben.github.io/tags/KEGG/"/>
    
  </entry>
  
  <entry>
    <title>Venn Plot in R</title>
    <link href="https://karobben.github.io/2022/10/17/R/venn/"/>
    <id>https://karobben.github.io/2022/10/17/R/venn/</id>
    <published>2022-10-17T15:13:58.000Z</published>
    <updated>2023-02-12T01:22:15.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ggvenn">ggvenn</h2><p>Reference: <a href="https://statisticsglobe.com/ggvenn-r-package">statisticsglobe.com</a></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">library(ggvenn)<br><br>set.seed(<span class="hljs-number">654925</span>)                          <span class="hljs-comment"># Create example list</span><br>list_venn &lt;- <span class="hljs-built_in">list</span>(A = sort(sample(<span class="hljs-number">1</span>:<span class="hljs-number">100</span>, <span class="hljs-number">20</span>)),<br>                  B = sort(sample(<span class="hljs-number">1</span>:<span class="hljs-number">100</span>, <span class="hljs-number">20</span>)),<br>                  C = sort(sample(<span class="hljs-number">1</span>:<span class="hljs-number">100</span>, <span class="hljs-number">20</span>)),<br>                  D = sort(sample(<span class="hljs-number">1</span>:<span class="hljs-number">100</span>, <span class="hljs-number">20</span>)))<br>list_venn<br></code></pre></td></tr></table></figure></div><pre>list_venn                                                                                         $A[1]  1  3  4 11 19 20 22 32 34 36 47 48 58 59 60 64 69 72 97 98$B[1]  4 17 18 23 32 33 34 41 45 52 53 56 58 59 66 67 74 78 91 92$C[1]  3 10 28 31 34 38 46 47 51 57 58 65 67 70 72 74 80 89 94 97$D[1]  8 11 14 15 17 18 19 33 34 47 51 59 66 68 73 77 78 82 86 87</pre><table><thead><tr><th style="text-align:center"><img src="https://statisticsglobe.com/wp-content/uploads/2021/01/figure-1-plot-ggvenn-r-package-programming-language.png" alt=""></th><th style="text-align:center"><img src="https://statisticsglobe.com/wp-content/uploads/2021/01/figure-2-plot-ggvenn-r-package-programming-language.png" alt=""></th><th style="text-align:center"><img src="https://statisticsglobe.com/wp-content/uploads/2021/01/figure-3-plot-ggvenn-r-package-programming-language.png" alt=""></th></tr></thead><tbody><tr><td style="text-align:center"><code>ggvenn(list_venn, c(&quot;A&quot;, &quot;C&quot;))</code></td><td style="text-align:center"><code>ggvenn(list_venn, c(&quot;A&quot;, &quot;C&quot;, &quot;D&quot;))</code></td><td style="text-align:center"><code>ggvenn(list_venn)  </code></td></tr></tbody></table><div class="admonition note"><p class="admonition-title">Change the fill color</p><p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">ggvenn(list_venn, <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)) + scale_fill_brewer( palette = <span class="hljs-string">'Set1'</span>)<br></code></pre></td></tr></table></figure></div></p></div><p>Other related Posts:</p><ul><li><a href="https://www.datanovia.com/en/blog/venn-diagram-with-r-or-rstudio-a-million-ways/">Alboukadel</a><ul><li><a href="https://www.datanovia.com/en/blog/venn-diagram-with-r-or-rstudio-a-million-ways/"><img src="https://www.datanovia.com/en/wp-content/uploads/dn-tutorials/r-tutorial/figures/venn-diagram-in-r-or-rstudio-ggVennDiagram-1.png" alt=""></a></li></ul></li></ul><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">Venn Plot in R</summary>
    
    
    
    <category term="R" scheme="https://karobben.github.io/categories/R/"/>
    
    <category term="Plot" scheme="https://karobben.github.io/categories/R/Plot/"/>
    
    <category term="GGPLOT" scheme="https://karobben.github.io/categories/R/Plot/GGPLOT/"/>
    
    
    <category term="Plot" scheme="https://karobben.github.io/tags/Plot/"/>
    
    <category term="ggplot" scheme="https://karobben.github.io/tags/ggplot/"/>
    
  </entry>
  
  <entry>
    <title>FPKM, RPKM, CPM, TPM, TMM in RNA-Seq</title>
    <link href="https://karobben.github.io/2022/10/04/Bioinfor/rnaseq-norm/"/>
    <id>https://karobben.github.io/2022/10/04/Bioinfor/rnaseq-norm/</id>
    <published>2022-10-04T18:00:32.000Z</published>
    <updated>2023-02-12T01:22:02.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RPKM-FPKM-reads-fragments-per-kilobase-of-transcript-per-million-reads-mapped">RPKM/FPKM (reads/fragments per kilobase of transcript per million reads mapped)</h2><p>$$<br>FPKM_ i = \frac{q_ i}{l_ i × \sum_ i{q_ i}}×10^ 9<br>$$</p><p>$q_i$ is raw read or fragment counts, $l_i$ is feature (i.e., gene or transcript) length</p><p>RPKM is for single ends reads, a read is a unit.<br>FPKM is for paired ends reads, a paired reads is a unit.</p><h2 id="TPM-transcript-per-million">TPM (transcript per million)</h2><p>$$<br>TPM_ i = \frac{q_ i/l_ i}{\sum_ j{q_ i/l_ i}}×10^ 6<br>$$</p><p>0 where $q_i$ denotes reads mapped to transcript, $l_i$  is the transcript length, and $\sum_ j{q_ i/l_ i}$</p><p>corresponds to the sum of mapped reads to transcript normalized by transcript length.</p><p>The TPM measure can easily be converted to FPKM:<br>$TPM_ i = \frac{FPKM_ i}{\sum_ j{FPKM_ i}}×10^ 6$</p><h2 id="CPM-counts-per-million-reads-mapped-CPM">CPM (counts per million reads mapped (CPM)</h2><p>$$<br>CPM_ i = \frac{q_ i}{\sum_ i{q_ i}} × 10^ 6<br>$$</p><p>The simplest RNA-seq feature expression unit reports normalized counts, or the number of reads that align to a particular feature after correcting for sequencing depth and transcriptome composition bias. Normalized counts are the most popular unit among differential expression analysis methods (including edgeR). However, feature length normalization is skipped, with the important consequence that within-sample differential feature expression analysis is not possible.</p><h2 id="Shortcomings">Shortcomings</h2><p>Example 1:<br>We have 2 genes:</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">Length</th><th style="text-align:left">Sample1</th><th style="text-align:left">Sample2</th></tr></thead><tbody><tr><td style="text-align:left">Gene1</td><td style="text-align:left">100</td><td style="text-align:left">200</td><td style="text-align:left">200</td></tr><tr><td style="text-align:left">Gene2</td><td style="text-align:left">2400</td><td style="text-align:left">0</td><td style="text-align:left">1200</td></tr></tbody></table><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">CPM &lt;- <span class="hljs-keyword">function</span>(TB) &#123;<br>&#125;<br><br>FPKM &lt;- <span class="hljs-keyword">function</span>(TB) &#123;<br>&#125;<br><br>TPM &lt;- <span class="hljs-keyword">function</span>(TB) &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure></div><h2 id="Others">Others</h2><ul><li>TMM (trimmed mean of M values frpm edgeR)</li><li>RLE (Relative Log Expression from DESeq)</li><li>MRN (Median Ratio Normalization)</li></ul><p>Though, TPM, RPKM, and FPKM are designed to normalize the expression levels of genes, <mark>it suitable for the comparison within a sample, not cross samples</mark><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>. According to Dillies<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>, normalization algorithms could be divided into two groups: library size concept (TMM and DESeq) or distribution adjustment of read counts (Total Counts, RPKM, Quantile from <code>limma</code>). The hypothesis of TMMP and DESeq is that most of genes are not DE and the both propose a scaling factor based on a mean, median, or ratio. Based on Real data and simulated date, TMM and DESeq’s performance are acceptable, but RPKM and total counts of genes are not suggested to be used on the down stream analysis<sup class="footnote-ref"><a href="#fn2" id="fnref2:1">[2:1]</a></sup><sup class="footnote-ref"><a href="#fn1" id="fnref1:1">[1:1]</a></sup>. On the other hand, RPKM, FPKM, and TPM tend to perform poorly when transcript distribution differ between samples<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>. In another reseach, the title is without replicates RNA-Seq, but the data set is triplicates shows that the results from TMM, RLE, and MRN are really similar<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>. And for more complicated comparison, MRN might be better<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>.</p><style>pre {  background-color:#38393d;  color: #5fd381;}</style><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Zhao, Y., Li, MC., Konaté, M.M. et al. TPM, FPKM, or Normalized Counts? A Comparative Study of Quantification Measures for the Analysis of RNA-seq Data from the NCI Patient-Derived Models Repository. J Transl Med 19, 269 (2021). <a href="https://doi.org/10.1186/s12967-021-02936-w">https://doi.org/10.1186/s12967-021-02936-w</a> <a href="#fnref1" class="footnote-backref">↩︎</a> <a href="#fnref1:1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>Dillies MA, Rau A, Aubert J, Hennequet-Antier C, Jeanmougin M, Servant N, Keime C, Marot G, Castel D, Estelle J, et al. A comprehensive evaluation of normalization methods for Illumina high-throughput RNA sequencing data analysis. Brief Bioinform. 2013;14:671–83. <a href="#fnref2" class="footnote-backref">↩︎</a> <a href="#fnref2:1" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>Conesa A, Madrigal P, Tarazona S, Gomez-Cabrero D, Cervera A, McPherson A, Szczesniak MW, Gaffney DJ, Elo LL, Zhang X, Mortazavi A. A survey of best practices for RNA-seq data analysis. Genome Biol. 2016;17:13. <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>Maza E (2016) In Papyro Comparison of TMM (edgeR), RLE (DESeq2), and MRN Normalization Methods for a Simple Two-Conditions-Without-Replicates RNA-Seq Experimental Design. Front. Genet. 7:164. doi: 10.3389/fgene.2016.00164 <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p>Maza, E., Frasse, P., Senin, P., Bouzayen, M., and Zouine, M. (2013). Comparison of normalization methods for differential gene expression analysis in RNA-Seq experiments: a matter of relative size of studied transcriptomes. Commun. Integr. Biol. 6:e25849. doi: 10.4161/cib.25849 <a href="#fnref5" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">FPKM, RPKM, CPM, TPM, TMM in RNA-Seq</summary>
    
    
    
    <category term="Biology" scheme="https://karobben.github.io/categories/Biology/"/>
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/"/>
    
    <category term="Protocol" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Protocol/"/>
    
    <category term="RNA-Seq" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Protocol/RNA-Seq/"/>
    
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/tags/Bioinformatics/"/>
    
    <category term="RNA-Seq" scheme="https://karobben.github.io/tags/RNA-Seq/"/>
    
  </entry>
  
  <entry>
    <title>Gene Set Enrichment Analysis (GESA) in R</title>
    <link href="https://karobben.github.io/2022/10/03/Bioinfor/gsea/"/>
    <id>https://karobben.github.io/2022/10/03/Bioinfor/gsea/</id>
    <published>2022-10-04T02:39:56.000Z</published>
    <updated>2023-02-12T22:26:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="How-it-works-and-why-it-matters">How it works and why it matters</h2><div class="admonition info"><p class="admonition-title">Here is an example explained by ChatGPT</p></div><blockquote><p>Suppose we have a gene expression dataset consisting of 6 genes (A, B, C, D, E, and F) and 3 samples (S1, S2, and S3), and we want to test whether a pre-defined gene set called “MySet” is enriched in this dataset. Here’s the dataset:</p><table><thead><tr><th style="text-align:left">Gene</th><th style="text-align:left">S1</th><th style="text-align:left">S2</th><th style="text-align:left">S3</th></tr></thead><tbody><tr><td style="text-align:left">A</td><td style="text-align:left">1</td><td style="text-align:left">2</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">B</td><td style="text-align:left">2</td><td style="text-align:left">4</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">C</td><td style="text-align:left">3</td><td style="text-align:left">6</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">D</td><td style="text-align:left">4</td><td style="text-align:left">8</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">E</td><td style="text-align:left">1</td><td style="text-align:left">2</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">F</td><td style="text-align:left">2</td><td style="text-align:left">4</td><td style="text-align:left">1</td></tr></tbody></table><p>The first step in GSEA is to rank the genes based on their correlation with the phenotype of interest. In this example, we will use the sum of expression values across samples as the phenotype. The ranked list of genes based on this phenotype is:</p><table><thead><tr><th style="text-align:right">Gene</th><th style="text-align:left">Rank</th></tr></thead><tbody><tr><td style="text-align:right">D</td><td style="text-align:left">15</td></tr><tr><td style="text-align:right">C</td><td style="text-align:left">11</td></tr><tr><td style="text-align:right">B</td><td style="text-align:left">7</td></tr><tr><td style="text-align:right">F</td><td style="text-align:left">7</td></tr><tr><td style="text-align:right">A</td><td style="text-align:left">4</td></tr><tr><td style="text-align:right">E</td><td style="text-align:left">4</td></tr></tbody></table><p>The second step is to calculate an enrichment score for the gene set “MySet” by walking down the ranked list of genes, and computing a running sum of the signed correlation between each gene and the phenotype. If a gene is in “MySet”, its correlation is positive; otherwise, it is negative. The enrichment score is the maximum deviation from zero of the running sum. Here’s the calculation:</p><table><thead><tr><th style="text-align:left">Gene</th><th style="text-align:left">Rank</th><th style="text-align:left">In MySet?</th><th style="text-align:left">Correlation</th><th style="text-align:left">Running Sum</th></tr></thead><tbody><tr><td style="text-align:left">D</td><td style="text-align:left">15</td><td style="text-align:left">No</td><td style="text-align:left">-1</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">C</td><td style="text-align:left">11</td><td style="text-align:left">No</td><td style="text-align:left">-1</td><td style="text-align:left">-2</td></tr><tr><td style="text-align:left">B</td><td style="text-align:left">7</td><td style="text-align:left">Yes</td><td style="text-align:left">+1</td><td style="text-align:left">-1</td></tr><tr><td style="text-align:left">F</td><td style="text-align:left">7</td><td style="text-align:left">Yes</td><td style="text-align:left">+1</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">A</td><td style="text-align:left">4</td><td style="text-align:left">Yes</td><td style="text-align:left">+1</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">E</td><td style="text-align:left">4</td><td style="text-align:left">No</td><td style="text-align:left">-1</td><td style="text-align:left">0</td></tr></tbody></table><p>The maximum deviation from zero of the running sum is 1, which occurs at gene A. Therefore, the enrichment score for “MySet” is 1.</p><p>This example demonstrates the basic steps of GSEA, but in practice, GSEA is often applied to much larger datasets and gene sets, and the significance of the enrichment score is assessed using statistical tests such as permutation tests or gene set permutation tests.</p></blockquote><h2 id="GESA">GESA</h2><p>In clusterProfiler, there are functions designed to do GESA based on GO and KEGG gene sets. Here I am trying to show you how to do GESA with your customized data set.</p><p>There are two main functions which are <code>GSEA</code> from <code>clusterProfiler</code> and <code>fgsea</code> from <code>fgsea</code>. A quick enrichment analysis could be done by example data.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">library(clusterProfiler)<br>library(plyr)<br>library(fgsea)<br><br><span class="hljs-comment"># loading example data set</span><br>data(examplePathways)<br>data(exampleRanks)<br><br>fgseaRes &lt;- fgsea(examplePathways, exampleRanks, nperm=<span class="hljs-number">1000</span>, maxSize=<span class="hljs-number">500</span>, minSize = <span class="hljs-number">10</span>))<br><br>TERM2GENE = ldply(examplePathways, data.frame)<br>gse &lt;- GSEA(gene = rev.default(exampleRanks) ,  TERM2GENE = TERM2GENE)<br><span class="hljs-comment">#gseaplot(gse, by = &quot;all&quot;, title = gse$Description[1], geneSetID = 1)</span><br></code></pre></td></tr></table></figure></div><div class="admonition note"><p class="admonition-title">Default Parameters for Two Functions</p></div><table><thead><tr><th style="text-align:left"><code>fgsea</code></th><th style="text-align:left"><code>GSEA</code></th></tr></thead><tbody><tr><td style="text-align:left"><code>fgsea( pathways, stats, nperm, minSize = 1, maxSize = Inf, nproc = 0, gseaParam = 1, BPPARAM = NULL)</code></td><td style="text-align:left"><code> GSEA( geneList, exponent = 1, nPerm = 1000, minGSSize = 10, maxGSSize = 500, pvalueCutoff = 0.05, pAdjustMethod = &quot;BH&quot;, TERM2GENE, TERM2NAME = NA, verbose = TRUE, seed = FALSE, by = &quot;fgsea&quot;)</code></td></tr></tbody></table><div class="admonition note"><p class="admonition-title">Check the Results from Tow Functions</p></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">List &lt;- gse$Description[<span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>,<span class="hljs-number">30</span>,<span class="hljs-number">100</span>)]<br>gse[gse$Description %in% List]<br>fgseaRes[fgseaRes$pathway %in% List,]<br></code></pre></td></tr></table></figure></div><table><thead><tr><th style="text-align:left">Description</th><th style="text-align:left">setSize</th><th style="text-align:left">enrichmentScore</th><th style="text-align:left">NES</th><th style="text-align:left">pvalue</th><th style="text-align:left">p.adjust</th><th style="text-align:left">qvalues</th><th style="text-align:left">rank</th><th style="text-align:left">leading_edge</th></tr></thead><tbody><tr><td style="text-align:left">5991611_Processive_synthesis_on_the_C-strand_of_the_telomere</td><td style="text-align:left">11</td><td style="text-align:left">0.747047513123146</td><td style="text-align:left">1.92204468456492</td><td style="text-align:left">0.00374531835205993</td><td style="text-align:left">0.0280713464604887</td><td style="text-align:left">0.0209222578082764</td><td style="text-align:left">2110</td><td style="text-align:left">tags=82%, list=18%, signal=67%</td></tr><tr><td style="text-align:left">5990978_M_G1_Transition</td><td style="text-align:left">63</td><td style="text-align:left">0.578846390178477</td><td style="text-align:left">2.27421327922627</td><td style="text-align:left">0.00154320987654321</td><td style="text-align:left">0.0161091249574396</td><td style="text-align:left">0.012006522946795</td><td style="text-align:left">1970</td><td style="text-align:left">tags=48%, list=16%, signal=40%</td></tr><tr><td style="text-align:left">5991851_Mitotic_Prometaphase</td><td style="text-align:left">82</td><td style="text-align:left">0.725326964773323</td><td style="text-align:left">2.96349021486606</td><td style="text-align:left">0.0015527950310559</td><td style="text-align:left">0.0161091249574396</td><td style="text-align:left">0.012006522946795</td><td style="text-align:left">1042</td><td style="text-align:left">tags=54%, list=9%, signal=49%</td></tr></tbody></table><table><thead><tr><th style="text-align:left">pathway</th><th style="text-align:left">pval</th><th style="text-align:left">padj</th><th style="text-align:left">ES</th><th style="text-align:left">NES</th><th style="text-align:left">nMoreExtreme</th><th style="text-align:left">size</th></tr></thead><tbody><tr><td style="text-align:left">5991611_Processive_synthesis_on_the_C-strand_of_the_telomere</td><td style="text-align:left">0.001865672</td><td style="text-align:left">0.0307185</td><td style="text-align:left">0.7470475</td><td style="text-align:left">1.919031</td><td style="text-align:left">0</td><td style="text-align:left">11</td></tr><tr><td style="text-align:left">5990978_M_G1_Transition</td><td style="text-align:left">0.001545595</td><td style="text-align:left">0.0307185</td><td style="text-align:left">0.5788464</td><td style="text-align:left">2.236994</td><td style="text-align:left">0</td><td style="text-align:left">63</td></tr><tr><td style="text-align:left">5991851_Mitotic_Prometaphase</td><td style="text-align:left">0.001492537</td><td style="text-align:left">0.0307185</td><td style="text-align:left">0.7253270</td><td style="text-align:left">2.976492</td><td style="text-align:left">0</td><td style="text-align:left">82</td></tr></tbody></table><p>According to the comparison from above, their p-values are similar. But <code>GSEA</code> has a smaller <code>p.adjust</code>. Other wise, <code>Enrichment score</code> and <code>NES</code> are the same.</p><h2 id="Number-of-results">Number of results</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r"><span class="hljs-built_in">length</span>(examplePathways)<br>nrow(fgseaRes)<br>nrow(GSEA(gene = rev.default(exampleRanks) ,  TERM2GENE = TERM2GENE, pvalueCutoff = <span class="hljs-number">1</span>)@result)<br></code></pre></td></tr></table></figure></div><pre><code>[1] 1457[1] 757[1] 757</code></pre><p>In this result, we can find that the number of results is the same. Some of the gene sets are filtered out because of their size.</p><h2 id="Result-visualization">Result visualization</h2><p>Both two packages have functions for Visualizing their results. Function <code>plotEnrichment</code> is more friendly to customized data. What a surprise is it has <code>plotGseaTable</code> function which from <code>fgsea</code> could show multiple results in a table-like panel. Though this graphic is not fancy but could be very helpful in some situations.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">gseaplot(gse, geneSetID = <span class="hljs-string">&quot;5991851_Mitotic_Prometaphase&quot;</span>)<br>plotEnrichment(examplePathways[[<span class="hljs-string">&#x27;5991851_Mitotic_Prometaphase&#x27;</span>]], exampleRanks)<br><br><span class="hljs-comment"># Example of using gse result</span><br><span class="hljs-comment"># plotEnrichment(gse@geneSets[[&#x27;5991851_Mitotic_Prometaphase&#x27;]], exampleRanks)</span><br><br>plotGseaTable(examplePathways[List], exampleRanks, fgseaRes,  <br>                  gseaParam=<span class="hljs-number">0.5</span>)<br></code></pre></td></tr></table></figure></div><table><thead><tr><th style="text-align:center"><img src="https://s1.ax1x.com/2022/10/04/xQ7iB6.png" alt=""></th><th style="text-align:center"><img src="https://s1.ax1x.com/2022/10/04/xQ7m3d.png" alt=""></th></tr></thead><tbody><tr><td style="text-align:center"><code>gseaplot</code>   from <code>clusterProfiler</code></td><td style="text-align:center"><code>plotEnrichment</code> from <code>fgsea</code></td></tr></tbody></table><table><thead><tr><th style="text-align:center"><img src="https://s1.ax1x.com/2022/10/04/xQHSIS.png" alt=""></th></tr></thead><tbody></tbody></table><h2 id="Check-the-Data-Formats-and-Fabric-a-group-of-GeneList-GeneSets">Check the Data Formats and Fabric a group of GeneList &amp; GeneSets</h2><ul><li><code>exampleRanks</code>:  <pre>  170942    109711     18124     12775     72148     16010  -63.33703 -49.74779 -43.63878 -41.51889 -33.26039 -32.77626 </pre></li><li><code>examplePathways</code>:  <pre>  $`186589_Late_stage_branching_morphogenesis_pancreatic_bud_precursor_cells`  [1] "11925"  "15205"  "21410"  "246086"</pre></li></ul><p>The above two lists show a quick view of example data. <code>exampleRanks</code> is an increasing/decreasing numeric vector. <code>examplePathways</code> is a list that contains the name of each set and genes under each set.</p><p>An example of generating your own data:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">set.seed(<span class="hljs-number">1</span>)<br>GeneList &lt;- sample(seq(-<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">0.01</span>), <span class="hljs-number">100</span>)<br><span class="hljs-built_in">names</span>(GeneList) &lt;- paste(<span class="hljs-string">&quot;Gene&quot;</span>, <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>:<span class="hljs-number">100</span>), sep=<span class="hljs-string">&quot;_&quot;</span>)<br>GeneSet &lt;- append(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">names</span>(GeneList)[<span class="hljs-number">1</span>:<span class="hljs-number">50</span>]), <span class="hljs-built_in">list</span>(<span class="hljs-built_in">names</span>(GeneList)[<span class="hljs-number">40</span>:<span class="hljs-number">100</span>]))<br><span class="hljs-built_in">names</span>(GeneSet) &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Set1&quot;</span>, <span class="hljs-string">&quot;Set2&quot;</span>)<br><br><span class="hljs-comment"># List table for clusterProfiler</span><br>TERM2GENE_exp = ldply(GeneSet, data.frame)<br><span class="hljs-comment"># Sort the GeneList</span><br>GeneList &lt;- sort(GeneList, decreasing =  <span class="hljs-built_in">T</span>)<br>fgseaRes &lt;- fgsea(GeneSet, GeneList, nperm=<span class="hljs-number">1000</span>, maxSize=<span class="hljs-number">500</span>, minSize = <span class="hljs-number">10</span>)<br><br>gse &lt;- GSEA(gene = GeneList ,  TERM2GENE = TERM2GENE_exp, pvalueCutoff = <span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure></div><table><thead><tr><th style="text-align:left">pathway</th><th style="text-align:left">pval</th><th style="text-align:left">padj</th><th style="text-align:left">ES</th><th style="text-align:left">NES</th><th style="text-align:left">nMoreExtreme</th><th style="text-align:left">size</th></tr></thead><tbody><tr><td style="text-align:left">Set1</td><td style="text-align:left">0.845140032948929</td><td style="text-align:left">0.980519480519481</td><td style="text-align:left">0.20117826706011</td><td style="text-align:left">0.764831637359588</td><td style="text-align:left">512</td><td style="text-align:left">50</td></tr><tr><td style="text-align:left">Set2</td><td style="text-align:left">0.980519480519481</td><td style="text-align:left">0.980519480519481</td><td style="text-align:left">0.156182133808093</td><td style="text-align:left">0.582211034023132</td><td style="text-align:left">603</td><td style="text-align:left">61</td></tr></tbody></table><table><thead><tr><th style="text-align:left">Description</th><th style="text-align:left">setSize</th><th style="text-align:left">enrichmentScore</th><th style="text-align:left">NES</th><th style="text-align:left">pvalue</th><th style="text-align:left">p.adjust</th><th style="text-align:left">qvalues</th><th style="text-align:left">rank</th><th style="text-align:left">leading_edge</th></tr></thead><tbody><tr><td style="text-align:left">Set1</td><td style="text-align:left">50</td><td style="text-align:left">0.20117826706011</td><td style="text-align:left">0.750929659683889</td><td style="text-align:left">0.834633385335413</td><td style="text-align:left">0.971742543171115</td><td style="text-align:left">0.971742543171115</td><td style="text-align:left">34</td><td style="text-align:left">tags=38%, list=34%, signal=50%</td></tr><tr><td style="text-align:left">Set2</td><td style="text-align:left">61</td><td style="text-align:left">0.156182133808093</td><td style="text-align:left">0.586558400598972</td><td style="text-align:left">0.971742543171115</td><td style="text-align:left">0.971742543171115</td><td style="text-align:left">0.971742543171115</td><td style="text-align:left">18</td><td style="text-align:left">tags=18%, list=18%, signal=38%</td></tr></tbody></table><h3 id="Enrichment-Plot">Enrichment Plot</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="R"><figure class="iseeu highlight /r"><table><tr><td class="code"><pre><code class="hljs r">library(enrichplot)<br><br>gseaplot2(gse, geneSetID = <span class="hljs-number">1</span>, title = gse$Description[<span class="hljs-number">1</span>], color = <span class="hljs-string">&#x27;salmon&#x27;</span>, pvalue_table = <span class="hljs-literal">TRUE</span>)<br>gseaplot2(gse, geneSetID = <span class="hljs-number">1</span>:<span class="hljs-number">7</span>, title = <span class="hljs-string">&quot;GSEA&quot;</span>, color = <span class="hljs-string">&#x27;salmon&#x27;</span>, pvalue_table = <span class="hljs-literal">TRUE</span>)<br><br></code></pre></td></tr></table></figure></div><table><thead><tr><th style="text-align:center"><img src="https://s1.ax1x.com/2022/10/18/xr96ED.png" alt=""></th><th style="text-align:center"><img src="https://s1.ax1x.com/2022/10/18/xr9cUe.png" alt=""></th></tr></thead><tbody><tr><td style="text-align:center"><code>geneSetID = 1</code></td><td style="text-align:center"><code>geneSetID = 1:7</code></td></tr></tbody></table><div class="admonition error"><p class="admonition-title">What is nPerm</p><p>The nominal p value estimates the statistical significance of the enrichment score for a single gene set. However, <strong>when you are evaluating multiple gene sets, you must correct for gene set size and multiple hypothesis testing</strong>. Because the p value is not adjusted for either, it is of limited value when comparing gene sets.</p><p>The FDR is adjusted for gene set size and multiple hypotheses testing while the p value is not. When a top gene set has a <strong>small nominal p value and a high FDR value</strong>, it generally indicates that it is <strong>not as significant when compared with other gene sets in the empirical null distribution</strong>. This could be because you <strong>do not have enough samples</strong>, the biological signal is subtle, or the gene sets do not represent the biology in question very well. On the other hand, the FDR is based on two distributions of all gene sets; if only one of many gene sets is enriched, that gene set is likely to have a high FDR. Finally, a top gene set with a <strong>high nominal p value and a low FDR value</strong>, generally indicates a negative result: <strong>the gene set itself is not significant and other sets are weaker</strong>.</p><p>In the GSEA report, a p value of zero (0.0) indicates an actual p value of less than 1/number-of-permutations. For example, if the analysis performed 100 permutations, a reported p value of 0.0 indicates an actual p value of less than 0.01. For a more accurate p value, increase the number of permutations performed by the analysis. <strong>Typically, you will want to perform 1000 permutations (phenotype or gene_set). (If you attempt to perform significantly more than 1000 permutations, GSEA may run out of memory.)</strong></p><p>From: <a href="https://www.gsea-msigdb.org/gsea/doc/GSEAUserGuideFrame.html?Interpreting_GSEA">© gsea-msigdb.org</a></p></div><p><mark>More FAQ</mark> could be found at: <a href="https://software.broadinstitute.org/cancer/software/gsea/wiki/index.php/FAQ">software.broadinstitute.org</a></p><h2 id="Other-things-you-need-to-know">Other things you need to know</h2><blockquote><ul><li><strong>ES (enrichment score)</strong>: reflects the degree to which a gene-set is overrepresented at the top or bottom of a ranked list of genes.</li><li><strong>NES (normalized enrichment score)</strong>: NES corrects for differences in ES between gene-sets due to differences in gene-set sizes. It enables to compare the scores of the different tested gene-sets with each other.<br>NES = actual ES / mean of all ESs obtained from all random permutations for the single gene-set that is being tested</li><li><strong>nom p-value</strong>: The nominal p value estimates the statistical significance of the enrichment score for a single gene set. The p-value is calculated from the null distribution.<br>Using gene-set permutation, the null distribution is created by generating, for each permutation, a random gene set the same size as your specified gene set by selecting that number of genes from all of the genes in your expression data set (or pre-ranked list), and then calculating the enrichment score for that randomly selected gene set. The distribution of those enrichment scores across all of the permutations constitutes the null distribution.</li><li><strong>FDR</strong>: corrects for multiple hypothesis testing and enable a more correct comparison of the different tested gene-sets with each other.<ul><li><strong>note</strong>: for a given gene-set S and observed NES, called NES*, FDR is [% of all NES (including permutations) &gt;= NES*] / [% of all observed NES (=NES for all tested gene-sets) &gt;= NES*]</li></ul></li><li><strong>relationships between ES, pvalue , NES and FDR</strong>:<ul><li>pvalue is calculated from ES</li><li>FDR is calculated from NES</li><li>the higher the ES or NES and the lowest the FDR or pvalue</li><li>NES above 1.4 will usually give significant results</li></ul></li></ul><p><a href="http://www.baderlab.org/CancerStemCellProject/VeroniqueVoisin/AdditionalResources/GSEA#:~:text=ES%20(enrichment%20score)%3A%20reflects,differences%20in%20gene%2Dset%20sizes.">© BADER LAB, 2016</a></p></blockquote><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">Gene Set Enrichment Analysis (GESA) in R</summary>
    
    
    
    <category term="Biology" scheme="https://karobben.github.io/categories/Biology/"/>
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/"/>
    
    <category term="Protocol" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Protocol/"/>
    
    <category term="RNA-Seq" scheme="https://karobben.github.io/categories/Biology/Bioinformatics/Protocol/RNA-Seq/"/>
    
    
    <category term="Bioinformatics" scheme="https://karobben.github.io/tags/Bioinformatics/"/>
    
    <category term="R" scheme="https://karobben.github.io/tags/R/"/>
    
    <category term="RNA-Seq" scheme="https://karobben.github.io/tags/RNA-Seq/"/>
    
    <category term="GSEA" scheme="https://karobben.github.io/tags/GSEA/"/>
    
  </entry>
  
  <entry>
    <title>Dash-bio, powered by plotly, python</title>
    <link href="https://karobben.github.io/2022/10/01/Python/dash-bio1/"/>
    <id>https://karobben.github.io/2022/10/01/Python/dash-bio1/</id>
    <published>2022-10-01T22:32:35.000Z</published>
    <updated>2023-02-12T16:36:17.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-dash-and-how-wants-dash">What is dash and how wants dash</h2><blockquote><p>Dash is the original low-code framework for rapidly building data apps in Python, R, Julia, and F# (experimental). Written on top of Plotly.js and React.js, Dash is ideal for <strong>building and deploying data apps</strong> with customized <strong>user interfaces</strong>. It’s particularly suited for anyone who works with data. Through a couple of simple patterns, Dash abstracts away all of the technologies and protocols that are required to build a full-stack web app with interactive data visualization. <mark>Dash is simple enough that you can bind a user interface to your code in less than 10 minutes.</mark><br>Dash apps are rendered in the <strong>web browser</strong>. You can deploy your apps to VMs or Kubernetes clusters and then <strong>share them through URLs</strong>. Since Dash apps are viewed in the web browser, Dash is inherently cross-platform and mobile ready. There is a lot behind the framework. Plotly develops Dash and also offers a platform for writing and deploying Dash apps in an enterprise environment. If you’re interested, please get in touch.<br>From: <a href="https://dash.plotly.com/introduction">dash.plotly.com</a></p></blockquote><p>Examples: <a href="https://dash.gallery/Portal/">Dash Galleries</a></p><h2 id="Installation">Installation</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><code class="hljs bash">pip install dash<br>pip install jupyter-dash<br>pip install pandas<br>pip install dash_bio dash_auth<br>pip install matplotlib<br>pip install openpyxl<br></code></pre></td></tr></table></figure></div><h2 id="Hello-Word-for-Dash">Hello Word for Dash</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Run this app with `python app.py` and</span><br><span class="hljs-comment"># visit http://127.0.0.1:8050/ in your web browser.</span><br><br><span class="hljs-keyword">from</span> dash <span class="hljs-keyword">import</span> Dash, html, dcc<br><span class="hljs-keyword">import</span> plotly.express <span class="hljs-keyword">as</span> px<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>app = Dash(__name__)<br><br><span class="hljs-comment"># assume you have a &quot;long-form&quot; data frame</span><br><span class="hljs-comment"># see https://plotly.com/python/px-arguments/ for more options</span><br>df = pd.DataFrame(&#123;<br>    <span class="hljs-string">&quot;Fruit&quot;</span>: [<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Oranges&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>, <span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Oranges&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>],<br>    <span class="hljs-string">&quot;Amount&quot;</span>: [<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>],<br>    <span class="hljs-string">&quot;City&quot;</span>: [<span class="hljs-string">&quot;SF&quot;</span>, <span class="hljs-string">&quot;SF&quot;</span>, <span class="hljs-string">&quot;SF&quot;</span>, <span class="hljs-string">&quot;Montreal&quot;</span>, <span class="hljs-string">&quot;Montreal&quot;</span>, <span class="hljs-string">&quot;Montreal&quot;</span>]<br>&#125;)<br><br>fig = px.bar(df, x=<span class="hljs-string">&quot;Fruit&quot;</span>, y=<span class="hljs-string">&quot;Amount&quot;</span>, color=<span class="hljs-string">&quot;City&quot;</span>, barmode=<span class="hljs-string">&quot;group&quot;</span>)<br><br>app.layout = html.Div(children=[<br>    html.H1(children=<span class="hljs-string">&#x27;Hello Dash&#x27;</span>),<br><br>    html.Div(children=<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        Dash: A web application framework for your data.</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>),<br><br>    dcc.Graph(<br>        <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;example-graph&#x27;</span>,<br>        figure=fig<br>    )<br>])<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run_server(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure></div><table><thead><tr><th style="text-align:center"><img src="https://s1.ax1x.com/2022/10/02/xK4pUs.png" alt=""></th></tr></thead><tbody></tbody></table><div class="admonition note"><p class="admonition-title">How Dash Works</p><p>For the example above, main layouts information was stored in <code>app.layout</code>. It is a list. Each part is arranged horizontally from top to bottom. We can add <code>tags</code> for html one by one. For example, the <code>h1</code> tag, <code>div</code> tag.</p></div><h3 id="Customize-Hello-Dash">Customize Hello Dash</h3><p><img src="https://s1.ax1x.com/2022/10/02/xKI759.png" alt=""></p><details><summary>Codes for Dashboard</summary><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> dash <span class="hljs-keyword">import</span> Dash, html, dcc<br><span class="hljs-keyword">import</span> plotly.express <span class="hljs-keyword">as</span> px<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>app = Dash(__name__)<br><br><span class="hljs-comment"># assume you have a &quot;long-form&quot; data frame</span><br><span class="hljs-comment"># see https://plotly.com/python/px-arguments/ for more options</span><br>df = pd.DataFrame(&#123;<br>    <span class="hljs-string">&quot;Fruit&quot;</span>: [<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Oranges&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>, <span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Oranges&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>],<br>    <span class="hljs-string">&quot;Amount&quot;</span>: [<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>],<br>    <span class="hljs-string">&quot;City&quot;</span>: [<span class="hljs-string">&quot;SF&quot;</span>, <span class="hljs-string">&quot;SF&quot;</span>, <span class="hljs-string">&quot;SF&quot;</span>, <span class="hljs-string">&quot;Montreal&quot;</span>, <span class="hljs-string">&quot;Montreal&quot;</span>, <span class="hljs-string">&quot;Montreal&quot;</span>]<br>&#125;)<br><br>colors = &#123;<br>    <span class="hljs-string">&#x27;background&#x27;</span>: <span class="hljs-string">&#x27;#111111&#x27;</span>,<br>    <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;#7FDBFF&#x27;</span><br>&#125;<br><br>markdown_text = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">### Dash and Markdown</span><br><span class="hljs-string"></span><br><span class="hljs-string">One of the greatist feature from Dash is the markdown rendering. It may can only redenring the basic features but it could be very helpful. unfortunately, it not support html tags in the markdown. **But it accepts code highlight!!  Chears!!!**&lt;br&gt;</span><br><span class="hljs-string">&lt;pre&gt;</span><br><span class="hljs-string">code test, this is a code block</span><br><span class="hljs-string">&lt;/pre&gt;</span><br><span class="hljs-string">\```bash</span><br><span class="hljs-string">echo hello world</span><br><span class="hljs-string">\```</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>fig = px.bar(df, x=<span class="hljs-string">&quot;Fruit&quot;</span>, y=<span class="hljs-string">&quot;Amount&quot;</span>, color=<span class="hljs-string">&quot;City&quot;</span>, barmode=<span class="hljs-string">&quot;group&quot;</span>)<br><br>app.layout = html.Div(children=[<br>    html.H1(children=<span class="hljs-string">&#x27;Hello Dash&#x27;</span>,<br>            style=&#123;<br>            <span class="hljs-string">&#x27;textAlign&#x27;</span>: <span class="hljs-string">&#x27;center&#x27;</span>,<br>            <span class="hljs-string">&#x27;color&#x27;</span>: colors[<span class="hljs-string">&#x27;text&#x27;</span>]<br>        &#125;),<br><br>    html.Div(children=<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        Dash: A web application framework for your data.</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>,<br>            style=&#123;<br>            <span class="hljs-string">&#x27;textAlign&#x27;</span>: <span class="hljs-string">&#x27;center&#x27;</span>,<br>            <span class="hljs-string">&#x27;color&#x27;</span>: colors[<span class="hljs-string">&#x27;text&#x27;</span>],<br>        &#125;),<br><br>    html.Div(children=[<br>        html.Div(children=[dcc.Graph(<br>            <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;example-graph&#x27;</span>,<br>            figure=fig, style=&#123;<span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">720</span>&#125;)], style=&#123;<span class="hljs-string">&#x27;width&#x27;</span>:<span class="hljs-string">&quot;60%&quot;</span>,<span class="hljs-string">&#x27;height&#x27;</span>: <span class="hljs-string">&quot;100%&quot;</span>&#125;),<br>        html.Div(children=[<br>            dcc.Markdown(children=markdown_text),<br>            dcc.Graph(figure=fig, style=&#123;<span class="hljs-string">&#x27;width&#x27;</span>:<span class="hljs-string">&quot;100%&quot;</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-string">&quot;100%&quot;</span>&#125;)<br>            ],<br>            style=&#123;<span class="hljs-string">&#x27;width&#x27;</span>:<span class="hljs-string">&quot;40%&quot;</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-string">&quot;100%&quot;</span>&#125;)] ,<br>    style=&#123;<span class="hljs-string">&#x27;display&#x27;</span>: <span class="hljs-string">&#x27;flex&#x27;</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-string">&quot;100%&quot;</span>&#125;<br>    )<br>])<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run_server(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure></div></details><h2 id="Styles">Styles</h2><h3 id="Height-auto-size-by-the-window">Height auto-size by the window</h3><p>50% of the height of the current window</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python">style=&#123;<span class="hljs-string">&#x27;width&#x27;</span>:<span class="hljs-string">&quot;100%&quot;</span>, <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-string">&quot;50vh&quot;</span>&#125;<br></code></pre></td></tr></table></figure></div><h3 id="Window-overflow-show">Window overflow-show</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python">style=&#123;<span class="hljs-string">&#x27;width&#x27;</span>:<span class="hljs-string">&quot;100%&quot;</span>, <span class="hljs-string">&quot;max-height&quot;</span>: <span class="hljs-string">&quot;50%&quot;</span>, <span class="hljs-string">&quot;overflow&quot;</span>: <span class="hljs-string">&quot;scroll&quot;</span>&#125;<br>style=&#123;<span class="hljs-string">&#x27;width&#x27;</span>:<span class="hljs-string">&quot;100%&quot;</span>, <span class="hljs-string">&quot;max-height&quot;</span>: <span class="hljs-string">&quot;50%&quot;</span>, <span class="hljs-string">&quot;overflow-x&quot;</span>: <span class="hljs-string">&quot;scroll&quot;</span>&#125;<br>style=&#123;<span class="hljs-string">&#x27;width&#x27;</span>:<span class="hljs-string">&quot;100%&quot;</span>, <span class="hljs-string">&quot;max-height&quot;</span>: <span class="hljs-string">&quot;50%&quot;</span>, <span class="hljs-string">&quot;overflow-y&quot;</span>: <span class="hljs-string">&quot;scroll&quot;</span>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="Call-back">Call back</h2><!--<details>--><details><summary>Codes for Call back example</summary><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> dash <span class="hljs-keyword">import</span> Dash, dcc, html, Input, Output<br><br>app = Dash(__name__)<br><br>app.layout = html.Div([<br>    html.H6(<span class="hljs-string">&quot;Change the value in the text box to see callbacks in action!&quot;</span>),<br>    html.Div([<br>        <span class="hljs-string">&quot;Input: &quot;</span>,<br>        dcc.Input(<span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;my-input&#x27;</span>, value=<span class="hljs-string">&#x27;initial value&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;text&#x27;</span>)<br>    ]),<br>    html.Br(),<br>    html.Div(<span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;my-output&#x27;</span>),<br><br>])<br><br><br><span class="hljs-meta">@app.callback(<span class="hljs-params"></span></span><br><span class="hljs-meta"><span class="hljs-params">    Output(<span class="hljs-params">component_id=<span class="hljs-string">&#x27;my-output&#x27;</span>, component_property=<span class="hljs-string">&#x27;children&#x27;</span></span>),</span></span><br><span class="hljs-meta"><span class="hljs-params">    Input(<span class="hljs-params">component_id=<span class="hljs-string">&#x27;my-input&#x27;</span>, component_property=<span class="hljs-string">&#x27;value&#x27;</span></span>)</span></span><br><span class="hljs-meta"><span class="hljs-params"></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_output_div</span>(<span class="hljs-params">input_value</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Output: <span class="hljs-subst">&#123;input_value&#125;</span>&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run_server(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure></div></details><!--</details>--><p>Example shw: <a href="https://dash.plotly.com/basic-callbacks">dash.plotly.com</a></p><div class="admonition note"><p class="admonition-title">Explain</p></div><p>Input widgets is from <code>dash.dcc.Input</code>. By giving an id as <code>my-input</code>, it could be called back. After we added it in a thread <code>@app.callback</code>, it can update automatically whenever you made a change.<br>For adding more callback widgets, we can add, Dropdown widgets for instance, and show the result on a new line. We can’t add the Input&amp;Output in the old thread directly. But we can add it in a new thread.</p><p>Two things for <code>callback</code> functions:</p><ol><li>A threads is paired with function behind.</li><li>The parameters in the function following the order of the <code>Input</code> from the <code>@</code> threads.</li></ol><p>When you paired a thread and function, the like below:</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.callback(<span class="hljs-params"></span></span><br><span class="hljs-meta"><span class="hljs-params">    Output(<span class="hljs-params"><span class="hljs-string">&quot;id1&quot;</span>, <span class="hljs-string">&#x27;data&#x27;</span></span>)</span></span><br><span class="hljs-meta"><span class="hljs-params">    Input(<span class="hljs-params"><span class="hljs-string">&quot;id2&quot;</span>, <span class="hljs-string">&#x27;value&#x27;</span></span>)</span></span><br><span class="hljs-meta"><span class="hljs-params">    Input(<span class="hljs-params"><span class="hljs-string">&quot;id3&quot;</span>, <span class="hljs-string">&#x27;data&#x27;</span></span>)</span></span><br><span class="hljs-meta"><span class="hljs-params"></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span>(<span class="hljs-params">P1, P2</span>):</span><br>    P3 = P1 + P2<br>    <span class="hljs-keyword">return</span> P3<br></code></pre></td></tr></table></figure></div><p>In this result, it would accepts the data from widget ‘id3’ and ‘id2’. New variable <code>P3</code> is returned and be assigned into the widget ‘id1’. You can use it to make a sample calculator.</p><!--<details>--><details><summary>Codes for Call back example</summary><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> dash <span class="hljs-keyword">import</span> Dash, dcc, html, Input, Output<br><br>app = Dash(__name__)<br><br>app.layout = html.Div([<br>    html.H6(<span class="hljs-string">&quot;Change the value in the text box to see callbacks in action!&quot;</span>),<br>    html.Div([<br>        <span class="hljs-string">&quot;Input: &quot;</span>,<br>        dcc.Input(<span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;my-input&#x27;</span>, value=<span class="hljs-string">&#x27;initial value&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;text&#x27;</span>),<br>        dcc.Dropdown([<span class="hljs-string">&#x27;New York City&#x27;</span>, <span class="hljs-string">&#x27;Montréal&#x27;</span>, <span class="hljs-string">&#x27;San Francisco&#x27;</span>], value=<span class="hljs-string">&#x27;Montréal&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;my-input2&#x27;</span>),<br>    ]),<br>    html.Br(),<br>    html.Div(<span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;my-output&#x27;</span>),<br>    html.Div(<span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;my-output2&#x27;</span>),<br><br>])<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">TEST</span>():</span><br>    print(<span class="hljs-string">&quot;123&quot;</span>)<br><br><span class="hljs-meta">@app.callback(<span class="hljs-params"></span></span><br><span class="hljs-meta"><span class="hljs-params">    Output(<span class="hljs-params">component_id=<span class="hljs-string">&#x27;my-output2&#x27;</span>, component_property=<span class="hljs-string">&#x27;children&#x27;</span></span>),</span></span><br><span class="hljs-meta"><span class="hljs-params">    Input(<span class="hljs-params">component_id=<span class="hljs-string">&#x27;my-input2&#x27;</span>, component_property=<span class="hljs-string">&#x27;value&#x27;</span></span>),</span></span><br><span class="hljs-meta"><span class="hljs-params"></span>)</span><br><br><span class="hljs-meta">@app.callback(<span class="hljs-params"></span></span><br><span class="hljs-meta"><span class="hljs-params">    Output(<span class="hljs-params">component_id=<span class="hljs-string">&#x27;my-output&#x27;</span>, component_property=<span class="hljs-string">&#x27;children&#x27;</span></span>),</span></span><br><span class="hljs-meta"><span class="hljs-params">    Input(<span class="hljs-params">component_id=<span class="hljs-string">&#x27;my-input&#x27;</span>, component_property=<span class="hljs-string">&#x27;value&#x27;</span></span>),</span></span><br><span class="hljs-meta"><span class="hljs-params"></span></span><br><span class="hljs-meta"><span class="hljs-params"></span>)</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_output_div</span>(<span class="hljs-params">input_value</span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Output: <span class="hljs-subst">&#123;input_value&#125;</span>&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run_server(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure></div></details><!--</details>--><h2 id="Use-local-picture">Use local picture</h2><p>The easiest and lightest way to using local picture is cite a picture in Markdown. But before doing that, you should make a directory <code>assets</code> and then, put the picture in it.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MD"><figure class="iseeu highlight /md"><table><tr><td class="code"><pre><code class="hljs md">![<span class="hljs-string">Picture</span>](<span class="hljs-link">/assets/1.png</span>)<br></code></pre></td></tr></table></figure></div><h2 id="Plots">Plots</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> plotly.express <span class="hljs-keyword">as</span> px<br><br><span class="hljs-comment"># All settings</span><br><br>fig = px.scatter(<br>    <span class="hljs-comment"># Colors for each elements</span><br>    color = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>],<br>)<br><br><span class="hljs-comment">## map axis text</span><br>fig.update_layout(<br>    xaxis=<span class="hljs-built_in">dict</span>(title=<span class="hljs-string">&#x27;&#x27;</span>,<br>        tickvals= [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], <span class="hljs-comment"># raw text in axis</span><br>        ticktext = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>] <span class="hljs-comment"># alternative text</span><br>    )<br>)<br><br><span class="hljs-comment"># Other layout informations</span><br>fig.update_layout(<br>    <span class="hljs-comment"># stringent size</span><br>    autosize=<span class="hljs-literal">False</span>,<br>    width=<span class="hljs-number">500</span>,<br>    height=<span class="hljs-number">500</span>,<br>    xaxis_title= <span class="hljs-string">&quot;X Axis&quot;</span>,<br>    yaxis_title= <span class="hljs-string">&quot;Y Axis&quot;</span>,<br>    title_font_color=<span class="hljs-string">&quot;salmon&quot;</span>,<br>    <span class="hljs-comment">#more details for title</span><br>    title=&#123;<br>        <span class="hljs-string">&#x27;y&#x27;</span>:<span class="hljs-number">0.9</span>, <span class="hljs-string">&#x27;x&#x27;</span>:<span class="hljs-number">0.5</span>,<br>        <span class="hljs-string">&#x27;font&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">30</span>&#125;,<br>        <span class="hljs-string">&#x27;xanchor&#x27;</span>: <span class="hljs-string">&#x27;center&#x27;</span>,<br>        <span class="hljs-string">&#x27;yanchor&#x27;</span>: <span class="hljs-string">&#x27;top&#x27;</span>&#125;<br><br>)<br><br><br><span class="hljs-comment"># Bar plot</span><br>fig = px.bar(long_df, x=<span class="hljs-string">&quot;nation&quot;</span>, y=<span class="hljs-string">&quot;count&quot;</span>, color=<span class="hljs-string">&quot;medal&quot;</span>, title=<span class="hljs-string">&quot;Long-Form Input&quot;</span>)<br></code></pre></td></tr></table></figure></div><h3 id="Blank-Background-for-plot">Blank Background for plot</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python">fig.update_layout(<br>    autosize=<span class="hljs-literal">False</span>,<br>    width=<span class="hljs-number">300</span>,<br>    paper_bgcolor=<span class="hljs-string">&#x27;rgba(0,0,0,0)&#x27;</span>,<br>    plot_bgcolor=<span class="hljs-string">&#x27;rgba(0,0,0,0)&#x27;</span>,<br>    title=&#123;<br>        <span class="hljs-string">&#x27;y&#x27;</span>:<span class="hljs-number">0.9</span>, <span class="hljs-string">&#x27;x&#x27;</span>:<span class="hljs-number">0.5</span>,<br>        <span class="hljs-string">&#x27;font&#x27;</span>: &#123;<span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">30</span>&#125;,<br>        <span class="hljs-string">&#x27;xanchor&#x27;</span>: <span class="hljs-string">&#x27;center&#x27;</span>,<br>        <span class="hljs-string">&#x27;yanchor&#x27;</span>: <span class="hljs-string">&#x27;top&#x27;</span>&#125;<br>)<br></code></pre></td></tr></table></figure></div><h3 id="Pileup-example">Pileup example</h3><p>This function if for make a igv like graph.<br>The basic example is in this <a href="https://dash.plotly.com/dash-bio/pileup">link</a>. There is a few things worth to mention:</p><ul><li>The reference genome is ‘2bit’ format, which <a href="https://biojulia.net/BioSequences.jl/v1.0/io/twobit.html">is a binary file format designed for storing a genome consists of multiple chromosomal sequences.</a></li><li>To create a 2bi genome, you can follow the instruction from <a href="https://genome.ucsc.edu/goldenPath/help/twoBit.html">UCSC</a></li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pysam<br><span class="hljs-keyword">import</span> collections<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>samfile = pysam.AlignmentFile(<span class="hljs-string">&quot;WD-wts+wts149+wts149_3.s.bam&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br><br><br>Depth = []<br><span class="hljs-keyword">for</span> read <span class="hljs-keyword">in</span> samfile.fetch(<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-number">3134870</span>, <span class="hljs-number">3172221</span>):<br>    Depth += [i[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> read.aligned_pairs]<br><br>frequency = collections.Counter(Depth)<br>Dep_TB = pd.DataFrame(<span class="hljs-built_in">dict</span>(frequency), index=[<span class="hljs-string">&#x27;Freq&#x27;</span>]).T<br>Dep_TB[<span class="hljs-string">&#x27;Loc&#x27;</span>] = Dep_TB.index<br>Dep_TB.Loc = pd.to_numeric(Dep_TB.Loc)<br><br><br>plt.plot(Dep_TB.Loc,  Dep_TB.Freq)<br></code></pre></td></tr></table></figure></div><style>pre {  background-color:#38393d;  color: #5fd381;}</style>]]></content>
    
    
    <summary type="html">Dash-bio, powered by plotly, python</summary>
    
    
    
    
    <category term="python" scheme="https://karobben.github.io/tags/python/"/>
    
    <category term="dash" scheme="https://karobben.github.io/tags/dash/"/>
    
  </entry>
  
</feed>
